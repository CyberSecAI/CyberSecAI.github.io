{
  "Weaknesses": [
    {
      "ID": "1106",
      "Name": "Insufficient Use of Symbolic Constants",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code uses literal constants that may need to change\n\t\t\t\t\tor evolve over time, instead of using symbolic constants.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1107",
      "Name": "Insufficient Isolation of Symbolic Constant Definitions",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code uses symbolic constants, but it does not\n\t\t\t\t\tsufficiently place the definitions of these constants into a more centralized or\n\t\t\t\t\tisolated location.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1108",
      "Name": "Excessive Reliance on Global Variables",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code is structured in a way that relies too much on using\n\t\t\t\t\tor setting global variables throughout various points in the code, instead of\n\t\t\t\t\tpreserving the associated information in a narrower, more local\n\t\t\t\t\tcontext.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1076",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "DetectionMethodID": "DM-14",
          "Method": "Automated Static Analysis",
          "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
          "Effectiveness": "High"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1109",
      "Name": "Use of Same Variable for Multiple Purposes",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code contains a callable, block, or other code element in\n\t\t\t\t\twhich the same variable is used to control more than one unique task or store\n\t\t\t\t\tmore than one instance of data.",
      "ExtendedDescription": "\n\nUse of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1110",
      "Name": "Incomplete Design Documentation",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product's design documentation does not adequately describe\n\t\t\t\t\tcontrol flow, data flow, system initialization, relationships between tasks,\n\t\t\t\t\tcomponents, rationales, or other important aspects of the\n\t\t\t\t\tdesign.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1059",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1111",
      "Name": "Incomplete I/O Documentation",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product's documentation does not adequately define inputs,\n\t\t\t\t\toutputs, or system/software interfaces.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1059",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1112",
      "Name": "Incomplete Documentation of Program Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The document does not fully define all mechanisms that are used\n\t\t\t\t\tto control or influence how product-specific programs are\n\t\t\t\t\texecuted.",
      "ExtendedDescription": "\n\nThis includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1059",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1113",
      "Name": "Inappropriate Comment Style",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code uses comment styles or formats that are\n\t\t\t\t\tinconsistent or do not follow expected standards for the\n\t\t\t\t\tproduct.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1114",
      "Name": "Inappropriate Whitespace Style",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code contains whitespace that is inconsistent across\n\t\t\t\t\tthe code or does not follow expected standards for the\n\t\t\t\t\tproduct.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1115",
      "Name": "Source Code Element without Standard Prologue",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code contains elements such as source files \n\t\t\t\t\tthat do not consistently provide a prologue or header that has been\n\t\t\t\t\tstandardized for the project.",
      "ExtendedDescription": "\n\nThe lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.\n\n\nThis issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1116",
      "Name": "Inaccurate Comments",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.",
      "ExtendedDescription": "\n\nWhen a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Verify that each comment accurately reflects what is intended to happen during execution of the code."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "In the following Java example the code performs a calculation to determine how much medicine to administer. A comment is provided to give insight into what the calculation shoud be doing. Unfortunately the comment does not match the actual code and thus leaves the reader to wonder which is correct."
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "public class Main {\n\n```\n\t public static void main(String[] args) { \n\t\t int pt_weight = 83;\n\t\t int mg_per_kg = 3;\n\t\t int daily_dose = 0;\n\t\t // Add the patient weight and Mg/Kg to calculate the correct daily dose\n\t\t daily_dose = pt_weight * mg_per_kg;\n\t\t return dosage; \n\t } \n }\n```"
            },
            {
              "BodyText": "In the correction below, the code functionality has been verified, and the comment has been corrected to reflect the proper calculation."
            },
            {
              "Nature": "Good",
              "Language": "Java",
              "ExampleCode": "public class Main {\n\n```\n\t public static void main(String[] args) { \n\t\t int pt_weight = 83;\n\t\t int mg_per_kg = 3;\n\t\t int daily_dose = 0;\n\t\t // Multiply the patient weight and Mg/Kg to calculate the correct daily dose\n\t\t daily_dose = pt_weight * mg_per_kg;\n\t\t return dosage; \n\t } \n }\n```"
            },
            {
              "BodyText": "Note that in real-world code, these values should be validated to disallow negative numbers, prevent integer overflow, etc."
            }
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1117",
      "Name": "Callable with Insufficient Behavioral Summary",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code contains a function or method whose signature and/or associated\n\t\t\t\t\tinline documentation does not sufficiently describe the callable's inputs, outputs,\n\t\t\t\t\tside effects, assumptions, or return codes.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1078",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1118",
      "Name": "Insufficient Documentation of Error Handling Techniques",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The documentation does not sufficiently describe the techniques\n\t\t\t\t\tthat are used for error handling, exception processing, or similar\n\t\t\t\t\tmechanisms.",
      "ExtendedDescription": "\n\nDocumentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1059",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1119",
      "Name": "Excessive Use of Unconditional Branching",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code uses too many unconditional branches (such as\n\t\t\t\t\t\"goto\").",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1120",
      "Name": "Excessive Code Complexity",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code is too complex, as calculated using a well-defined,\n\t\t\t\t\tquantitative measure.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        },
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Performance"
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1121",
      "Name": "Excessive McCabe Cyclomatic Complexity",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code contains McCabe cyclomatic complexity that exceeds a\n\tdesirable maximum.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "OMG ASCMM",
          "EntryID": "ASCMM-MNT-11"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-964",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Cyclomatic Complexity",
          "PublicationYear": "2018",
          "PublicationMonth": "04",
          "PublicationDay": "13",
          "URL": "https://en.wikipedia.org/wiki/Cyclomatic_complexity"
        },
        {
          "ExternalReferenceID": "REF-960",
          "Section": "ASCMM-MNT-11",
          "Authors": [
            "Object Management Group (OMG)"
          ],
          "Title": "Automated Source Code Maintainability Measure (ASCMM)",
          "PublicationYear": "2016",
          "PublicationMonth": "01",
          "URL": "https://www.omg.org/spec/ASCMM/",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1122",
      "Name": "Excessive Halstead Complexity",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code is structured in a way that a Halstead complexity\n\t\t\t\t\tmeasure exceeds a desirable maximum.",
      "ExtendedDescription": "\n\nA variety of Halstead complexity measures exist, such as program vocabulary size or volume.\n\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-965",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Halstead complexity measures",
          "PublicationYear": "2017",
          "PublicationMonth": "11",
          "PublicationDay": "22",
          "URL": "https://en.wikipedia.org/wiki/Halstead_complexity_measures"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1123",
      "Name": "Excessive Use of Self-Modifying Code",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses too much self-modifying\n\t\t\t\t\tcode.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1124",
      "Name": "Excessively Deep Nesting",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code contains a callable or other code grouping in which\n\t\t\t\t\tthe nesting / branching is too deep.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-963",
          "Authors": [
            "Robert A. Martin",
            "Lawrence H. Shafer"
          ],
          "Title": "Providing a Framework for Effective Software Quality Assessment",
          "PublicationYear": "1996",
          "PublicationMonth": "07",
          "URL": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1125",
      "Name": "Excessive Attack Surface",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product has an attack surface whose quantitative\n\t\t\t\t\tmeasurement exceeds a desirable maximum.",
      "ExtendedDescription": "\n\nOriginating from software security, an \"attack surface\" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1120",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-966",
          "Authors": [
            "Pratyusa Manadhata"
          ],
          "Title": "An Attack Surface Metric",
          "PublicationYear": "2008",
          "PublicationMonth": "11",
          "URL": "http://reports-archive.adm.cs.cmu.edu/anon/2008/CMU-CS-08-152.pdf"
        },
        {
          "ExternalReferenceID": "REF-967",
          "Authors": [
            "Pratyusa Manadhata",
            "Jeannette M. Wing"
          ],
          "Title": "Measuring a System's Attack Surface",
          "PublicationYear": "2004",
          "URL": "http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/ManadhataWing04.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This entry is primarily a quality issue with no direct security implications.",
        "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.",
        "Reasons": [
          "Other"
        ]
      }
    },
    {
      "ID": "1126",
      "Name": "Declaration of Variable with Unnecessarily Wide Scope",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The source code declares a variable in one scope, but the\n\t\t\t\t\tvariable is only used within a narrower scope.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1127",
      "Name": "Compilation with Insufficient Warnings or Errors",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code is compiled without sufficient warnings enabled, which\n\t\t\t\t\tmay prevent the detection of subtle bugs or quality\n\t\t\t\t\tissues.",
      "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Build and Compilation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1164",
      "Name": "Irrelevant Code",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product contains code that is not essential for execution,\n\t     i.e. makes no state changes and has no side effects that alter\n\t     data or control flow, such that removal of the code would have no impact\n\t     to functionality or correctness.",
      "ExtendedDescription": "\n\nIrrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Reliability"
          ]
        },
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Performance"
          ]
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-217",
          "Entries": [
            {
              "IntroText": "The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null. However, on the only path where s can be assigned a non-null value, there is a return statement."
            },
            {
              "Nature": "Bad",
              "Language": "C++",
              "ExampleCode": "```\n\tString s = null;\n\tif (b) {\n\t\ts = \"Yes\";\n\t\treturn;\n\t}\n\tif (s != null) {\n\t\tDead();\n\t}\n```"
            }
          ]
        },
        {
          "ID": "DX-218",
          "Entries": [
            {
              "IntroText": "The following code excerpt assigns to the variable r and then overwrites the value without using it."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tr = getName();\n\tr = getNewBuffer(buf);\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2014-1266",
          "Description": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1266"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1173",
      "Name": "Improper Use of Validation Framework",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
      "ExtendedDescription": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language."
        },
        {
          "Phase": "Implementation",
          "Note": "This weakness may occur when developers do not correctly use a provided input validation framework."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Unexpected State"
          ],
          "Note": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others."
        }
      ],
      "DetectionMethods": [
        {
          "DetectionMethodID": "DM-3",
          "Method": "Automated Static Analysis",
          "Description": "\n\nSome instances of improper input validation can be detected using automated static analysis.\n\n\nA static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.\n\n\nExcept in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\n"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Properly use provided input validation frameworks."
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1174",
      "Name": "ASP.NET Misconfiguration: Improper Model Validation",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1173",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "ASP.NET",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Unexpected State"
          ],
          "Note": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others."
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1176",
      "Name": "Inefficient CPU Computation",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.",
      "ExtendedDescription": "\n\nThis issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "405",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        },
        {
          "Ordinality": "Primary"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (CPU)"
          ]
        },
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Performance"
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-37734",
          "Description": "Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-37734"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1008",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Computational complexity theory)",
          "URL": "https://en.wikipedia.org/wiki/Computational_complexity_theory"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1177",
      "Name": "Use of Prohibited Code",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.",
      "ExtendedDescription": "\n\nThe developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.\n\n\nTo reduce risk of vulnerabilities, the developer might maintain a list of \"banned\" functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the product more costly and difficult to maintain.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        },
        {
          "Ordinality": "Primary"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-5",
          "Entries": [
            {
              "IntroText": "The code below calls the gets() function to read in data from the command line."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\t\tchar buf[24];\n\t\tprintf(\"Please enter your name and press <Enter>\\n\");\n\t\tgets(buf);\n\t\t...\n\t}\n```"
            },
            {
              "BodyText": "However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition."
            }
          ]
        },
        {
          "ID": "DX-6",
          "Entries": [
            {
              "IntroText": "The following code attempts to create a local copy of a buffer to perform some manipulations to the data."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tvoid manipulate_string(char * string){\n\t\tchar buf[24];\n\t\tstrcpy(buf, string);\n\t\t...\n\t}\n```"
            },
            {
              "BodyText": "However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2007-1470",
          "Description": "Library has multiple buffer overflows using sprintf() and strcpy()",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1470"
        },
        {
          "Reference": "CVE-2007-4004",
          "Description": "FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4004"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1009",
          "Authors": [
            "Tim Rains"
          ],
          "Title": "Microsoft's Free Security Tools - banned.h",
          "PublicationYear": "2012",
          "PublicationMonth": "08",
          "PublicationDay": "30",
          "URL": "https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1010",
          "Authors": [
            "Michael Howard"
          ],
          "Title": "Microsoft's Free Security Tools - banned.h",
          "PublicationYear": "2011",
          "PublicationMonth": "06",
          "URL": "https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1187",
      "Name": "DEPRECATED: Use of Uninitialized Resource",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Deprecated",
      "Description": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.",
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This CWE has been deprecated.",
        "Comments": "See description and name for possible suggestions of other CWEs to consider.",
        "Reasons": [
          "Deprecated"
        ]
      }
    },
    {
      "ID": "1188",
      "Name": "Initialization of a Resource with an Insecure Default",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
      "ExtendedDescription": "\n\nDevelopers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1419",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "665",
          "ViewID": "1003",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-163",
          "Entries": [
            {
              "IntroText": "This code attempts to login a user using credentials from a POST request:"
            },
            {
              "Nature": "Bad",
              "Language": "PHP",
              "ExampleCode": "```\n```\n// $user and $pass automatically set from POST request* \n\tif (login_user($user,$pass)) {\n\t```\n\t\t$authorized = true;\n\t}\n```\n...* \n\t\n\tif ($authorized) {\n\t```\n\t\tgeneratePage();\n\t}\n```"
            },
            {
              "BodyText": "Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials."
            },
            {
              "BodyText": "Here is a fixed version:"
            },
            {
              "Nature": "Good",
              "Language": "PHP",
              "ExampleCode": "```\n\t$user = $_POST['user'];\n\t$pass = $_POST['pass'];\n\t$authorized = false;\n\tif (login_user($user,$pass)) {\n\t\t$authorized = true;\n\t}\n```\n...*"
            },
            {
              "BodyText": "This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-36349",
          "Description": "insecure default variable initialization in BIOS firmware for a hardware board allows DoS",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-36349"
        },
        {
          "Reference": "CVE-2022-42467",
          "Description": "A generic database browser interface has a default mode that exposes a web server to the network, allowing queries to the database.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42467"
        }
      ],
      "RelatedAttackPatterns": [
        "665"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry improves organization of concepts under initialization. The typical CWE model is to cover \"Missing\" and \"Incorrect\" behaviors. Arguably, this entry could be named as \"Incorrect\" instead of \"Insecure.\" This might be changed in the near future."
        }
      ]
    },
    {
      "ID": "1189",
      "Name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.",
      "ExtendedDescription": "\n\nA System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "653",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "668",
          "ViewID": "1000"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1331",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Note": "If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user."
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Quality Degradation"
          ],
          "Note": "The functionality of the shared resource may be intentionally degraded."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "\n\nPre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\n",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Strategy": "Separation of Privilege",
          "Description": "\n\nWhen sharing resources, avoid mixing agents of varying trust levels.\n\n\nUntrusted agents should not share resources with trusted agents.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider the following SoC design. The Hardware Root of Trust (HRoT) local SRAM is memory mapped in the core{0-N} address space. The HRoT allows or disallows access to private memory ranges, thus allowing the sram to function as a mailbox for communication between untrusted and trusted HRoT partitions."
            },
            {
              "BodyText": "We assume that the threat is from malicious software in the untrusted domain. We assume this software has access to the core{0-N} memory map and can be running at any privilege level on the untrusted cores. The capability of this threat in this example is communication to and from the mailbox region of SRAM modulated by the hrot_iface. To address this threat, information must not enter or exit the shared region of SRAM through hrot_iface when in secure or privileged mode."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-8698",
          "Description": "Processor has improper isolation of shared resources allowing for information disclosure.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8698"
        },
        {
          "Reference": "CVE-2019-6260",
          "Description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"
        }
      ],
      "RelatedAttackPatterns": [
        "124"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1036",
          "Authors": [
            "Ali Abbasi and Majid Hashemi"
          ],
          "Title": "Ghost in the PLC Designing an Undetectable Programmable Logic Controller Rootkit via Pin Control Attack",
          "PublicationYear": "2016",
          "URL": "https://www.blackhat.com/docs/eu-16/materials/eu-16-Abbasi-Ghost-In-The-PLC-Designing-An-Undetectable-Programmable-Logic-Controller-Rootkit-wp.pdf"
        },
        {
          "ExternalReferenceID": "REF-1138",
          "Authors": [
            "Stewart Smith"
          ],
          "Title": "CVE-2019-6260: Gaining control of BMC from the host processor",
          "PublicationYear": "2019",
          "URL": "https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1190",
      "Name": "DMA Device Enabled Too Early in Boot Phase",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
      "ExtendedDescription": "\n\nDMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "696",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "DMA devices have direct write access to main memory and due to time of attack will be able to bypass OS or Bootloader access control."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Utilize an IOMMU to orchestrate IO access from the start of the boot process."
        }
      ],
      "RelatedAttackPatterns": [
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1038",
          "Title": "DMA attack",
          "PublicationYear": "2019",
          "PublicationMonth": "10",
          "PublicationDay": "19",
          "URL": "https://en.wikipedia.org/wiki/DMA_attack"
        },
        {
          "ExternalReferenceID": "REF-1039",
          "Authors": [
            "A. Theodore Markettos",
            "Colin Rothwell",
            "Brett F. Gutstein",
            "Allison Pearce",
            "Peter G. Neumann",
            "Simon W. Moore",
            "Robert N. M. Watson"
          ],
          "Title": "Thunderclap: Exploring Vulnerabilities in Operating System IOMMU Protection via DMA from Untrustworthy Peripherals",
          "PublicationYear": "2019",
          "PublicationMonth": "02",
          "PublicationDay": "25",
          "URL": "https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_05A-1_Markettos_paper.pdf"
        },
        {
          "ExternalReferenceID": "REF-1040",
          "Authors": [
            "Maximillian Dornseif",
            "Michael Becher",
            "Christian N. Klein"
          ],
          "Title": "FireWire all your memory are belong to us",
          "PublicationYear": "2005",
          "URL": "http://www.orkspace.net/secdocs/Conferences/CanSecWest/2005/0wn3d%20by%20an%20iPod%20-%20Firewire1394%20Issues.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1041",
          "Authors": [
            "Rory Breuk",
            "Albert Spruyt",
            "Adam Boileau"
          ],
          "Title": "Integrating DMA attacks in exploitation frameworks",
          "PublicationYear": "2012",
          "PublicationMonth": "02",
          "PublicationDay": "20",
          "URL": "https://www.os3.nl/_media/2011-2012/courses/rp1/p14_report.pdf"
        },
        {
          "ExternalReferenceID": "REF-1042",
          "Authors": [
            "Maximillian Dornseif"
          ],
          "Title": "Owned by an iPod",
          "PublicationYear": "2004",
          "URL": "https://web.archive.org/web/20060505224959/https://pacsec.jp/psj04/psj04-dornseif-e.ppt",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1044",
          "Authors": [
            "Dmytro Oleksiuk"
          ],
          "Title": "My aimful life",
          "PublicationYear": "2015",
          "PublicationMonth": "09",
          "PublicationDay": "12",
          "URL": "http://blog.cr4.sh/2015/09/breaking-uefi-security-with-software.html"
        },
        {
          "ExternalReferenceID": "REF-1046",
          "Authors": [
            "A. Theodore Markettos",
            "Adam Boileau"
          ],
          "Title": "Hit by a Bus:Physical Access Attacks with Firewire",
          "PublicationYear": "2006",
          "URL": "https://security-assessment.com/files/presentations/ab_firewire_rux2k6-final.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1191",
      "Name": "On-Chip Debug and Test Interface With Improper Access Control",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.",
      "ExtendedDescription": "\n\nA device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.\n\n\nIf authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.\n\n\nSometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Authorization"
          ],
          "Impact": [
            "Execute Unauthorized Code or Commands"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Application Data"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "\n\nAuthentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (\"Security by obscurity\") should not be considered as sufficient security.\n"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "\n\nDynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.\n"
        },
        {
          "Method": "Fuzzing",
          "Description": "Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Strategy": "Separation of Privilege",
          "Description": "If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A home, WiFi-router device implements a login prompt which prevents an unauthorized user from issuing any commands on the device until appropriate credentials are provided. The credentials are protected on the device and are checked for strength against attack."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "If the JTAG interface on this device is not hidden by the manufacturer, the interface may be identified using tools such as JTAGulator. If it is hidden but not disabled, it can be exposed by physically wiring to the board.\n\n\nBy issuing a \"halt\" command before the OS starts, the unauthorized user pauses the watchdog timer and prevents the router from restarting (once the watchdog timer would have expired). Having paused the router, an unauthorized user is able to execute code and inspect and modify data in the device, even extracting all of the router's firmware. This allows the user to examine the router and potentially exploit it."
            },
            {
              "BodyText": "JTAG is useful to chip and device manufacturers during design, testing, and production and is included in nearly every product. Without proper authentication and authorization, the interface may allow tampering with a product."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "In order to prevent exposing the debugging interface, manufacturers might try to obfuscate the JTAG interface or blow device internal fuses to disable the JTAG interface. Adding authentication and authorization to this interface makes use by unauthorized individuals much more difficult."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The following example code is a snippet from the JTAG wrapper module in the RISC-V debug module of the HACK@DAC'21 Openpiton SoC [REF-1355]. To make sure that the JTAG is accessed securely, the developers have included a primary authentication mechanism based on a password."
            },
            {
              "BodyText": "The developers employed a Finite State Machine (FSM) to implement this authentication. When a user intends to read from or write to the JTAG module, they must input a password."
            },
            {
              "BodyText": "In the subsequent state of the FSM module, the entered password undergoes Hash-based Message Authentication Code (HMAC) calculation using an internal HMAC submodule. Once the HMAC for the entered password is computed by the HMAC submodule, the FSM transitions to the next state, where it compares the computed HMAC with the expected HMAC for the password."
            },
            {
              "BodyText": "If the computed HMAC matches the expected HMAC, the FSM grants the user permission to perform read or write operations on the JTAG module. [REF-1352]"
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t\tPassChkValid: begin\n\t\t\tif(hashValid) begin\n```\nif(exp_hash == pass_hash) begin** \n\t\t\t\t\n\t\t\t\t```\n```\npass_check = 1'b1;** \n\t\t\t\t **end else begin** \n\t\t\t\t```\n```\npass_check = 1'b0;** \n\t\t\t\t **end\n\t\t\t\t\t state_d = Idle;**  end else begin \n\t\t\t```\n\t\t\t\tstate_d = PassChkValid;\n\t\t\t end\n\t\t end\n\t ...\n```"
            },
            {
              "BodyText": "However, in the given vulnerable part of the code, the JTAG module has not defined a limitation for several continuous wrong password attempts. This omission poses a significant security risk, allowing attackers to carry out brute-force attacks without restrictions."
            },
            {
              "BodyText": "Without a limitation on wrong password attempts, an attacker can repeatedly guess different passwords until they gain unauthorized access to the JTAG module. This leads to various malicious activities, such as unauthorized read from or write to debug module interface."
            },
            {
              "BodyText": "To mitigate the mentioned vulnerability, developers need to implement a restriction on the number of consecutive incorrect password attempts allowed by the JTAG module, which can achieve by incorporating a mechanism that temporarily locks the module after a certain number of failed attempts.[REF-1353][REF-1354]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t case (state_q) \n\t\tIdle: begin\n\t\t ... \n\t\t\telse if ( (dm::dtm_op_e'(dmi.op) == dm::DTM_PASS) && \n```\n(miss_pass_check_cnt_q != 2'b11)**  )\n\t\t\t begin \n\t\t\t```\n\t\t\t\tstate_d = Write;\n\t\t\t\tpass_mode = 1'b1;\n\t\t\t end\n\t\t ...\n\t\t end\n\t\t ...\n\t\tPassChkValid: begin\n\t\t\tif(hashValid) begin\n\t\t\t\tif(exp_hash == pass_hash) begin\n\t\t\t\t\tpass_check = 1'b1;\n\t\t\t\t end else begin \n\t\t\t\t\tpass_check = 1'b0;\n```\nmiss_pass_check_cnt_d = miss_pass_check_cnt_q + 1**  end\n\t\t\t\t state_d = Idle;  end else begin \n\t\t\t```\n\t\t\t\tstate_d = PassChkValid;\n\t\t\t end\n\t\t end\n\t ...\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from the JTAG access control mechanism of the HACK@DAC'21 buggy OpenPiton SoC [REF-1364]. Access to JTAG allows users to access sensitive information in the system. Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n\n **logic [31-1:0] data_d,**  data_q;\n ...\n\n **logic [512-1:0] pass_data;** \n ...\n\n```\n\t Write: begin\n\t\t ...\n\t\t\t if (pass_mode) begin\n```\npass_data = { {60{8'h00}}, data_d};** \n\t\t\t\t state_d = PassChk;\n\t\t\t\t pass_mode = 1'b0;\n\t\t\t\t ...\n\t\t\t end\n\t ..."
            },
            {
              "BodyText": "The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits are hard coded as zeros). As a result, the system is susceptible to brute-force attacks on the access control mechanism of JTAG, where the attacker only needs to determine 32 bits of the secret message instead of 512 bits."
            },
            {
              "BodyText": "To mitigate this issue, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1365]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n\n **logic [512-1:0] data_d,**  data_q;\n ...\n logic [512-1:0] pass_data;\n ...\n\n```\n\t Write: begin\n\t\t ...\n\t\t\t if (pass_mode) begin\n```\npass_data = data_d;** \n\t\t\t\t state_d = PassChk;\n\t\t\t\t pass_mode = 1'b0;\n\t\t\t\t ...\n\t\t\t end\n\t ..."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-18827",
          "Description": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1037",
          "Authors": [
            "Kurt Rosenfeld",
            "Ramesh Karri"
          ],
          "Title": "Attacks and Defenses for JTAG",
          "PublicationYear": "2010",
          "PublicationMonth": "02",
          "URL": "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=5406671"
        },
        {
          "ExternalReferenceID": "REF-1043",
          "Authors": [
            "Gopal Vishwakarma",
            "Wonjun Lee"
          ],
          "Title": "Exploiting JTAG and Its Mitigation in IOT: A Survey",
          "PublicationYear": "2018",
          "PublicationMonth": "12",
          "PublicationDay": "03",
          "URL": "https://www.mdpi.com/1999-5903/10/12/121/pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1084",
          "Authors": [
            "Gopal Vishwakarma",
            "Wonjun Lee"
          ],
          "Title": "JTAG Explained (finally!): Why \"IoT\", Software Security Engineers, and Manufacturers Should Care",
          "URL": "https://www.mdpi.com/1999-5903/10/12/121/pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1085",
          "Authors": [
            "Bob Molyneaux",
            "Mark McDermott",
            "Anil Sabbavarapu"
          ],
          "Title": "Design for Testability & Design for Debug",
          "URL": "http://users.ece.utexas.edu/~mcdermot/vlsi-2/Lecture_17.pdf"
        },
        {
          "ExternalReferenceID": "REF-1355",
          "Authors": [
            "Florian Zaruba"
          ],
          "Title": "dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L192:L204",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1354",
          "Authors": [
            "Florian Zaruba"
          ],
          "Title": "Fix CWE-1191 in dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/58f984d492fdb0369c82ef10fcbbaa4b9850f9fb/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L200",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1353",
          "Authors": [
            "Florian Zaruba"
          ],
          "Title": "Fix CWE-1191 in dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/58f984d492fdb0369c82ef10fcbbaa4b9850f9fb/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L131",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1352",
          "Authors": [
            "Florian Zaruba"
          ],
          "Title": "dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L118:L204",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1364",
          "Title": "dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L82",
          "URLDate": "2023-07-15"
        },
        {
          "ExternalReferenceID": "REF-1365",
          "Title": "fix cwe_1205 in dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/c4f4b832218b50c406dbf9f425d3b654117c1355/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L158",
          "URLDate": "2023-07-22"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Relationship",
          "Note": "CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents."
        }
      ]
    },
    {
      "ID": "1192",
      "Name": "Improper Identifier for IP Block used in System-On-Chip (SOC)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",
      "ExtendedDescription": "\n\nA System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else.\n\n\nThere are several variants of this weakness:\n\n\n  - A \"missing\" identifier is when the SoC does not define any mechanism to uniquely identify the IP.\n\n  - An \"insufficient\" identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.\n\n  - A \"misconfigured\" mechanism occurs when a mechanism is available but not implemented correctly.\n\n  - An \"ignored\" identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.\n\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "657",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "Operation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Strategy": "Separation of Privilege",
          "Description": "\n\n Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization. \n"
        }
      ],
      "RelatedAttackPatterns": [
        "113"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1193",
      "Name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.",
      "ExtendedDescription": "\n\n After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "696",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThe boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n"
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1130",
          "Authors": [
            "Mark Ermolov, Positive Technologies"
          ],
          "Title": "Intel x86 Root of Trust: loss of trust",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "05",
          "URL": "https://blog.ptsecurity.com/2020/03/intelx86-root-of-trust-loss-of-trust.html"
        },
        {
          "ExternalReferenceID": "REF-1042",
          "Authors": [
            "Maximillian Dornseif"
          ],
          "Title": "Owned by an iPod",
          "PublicationYear": "2004",
          "URL": "https://web.archive.org/web/20060505224959/https://pacsec.jp/psj04/psj04-dornseif-e.ppt",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1204",
      "Name": "Generation of Weak Initialization Vector (IV)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t",
      "ExtendedDescription": "By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "330",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data"
          ],
          "Note": "If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179]."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nDifferent cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. \n\n\n NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178]. \n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-143",
          "Entries": [
            {
              "IntroText": "In the following examples, CBC mode is used when encrypting data:"
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tEVP_CIPHER_CTX ctx;\n\tchar key[EVP_MAX_KEY_LENGTH];\n\tchar iv[EVP_MAX_IV_LENGTH];\n\tRAND_bytes(key, b);\n\tmemset(iv,0,EVP_MAX_IV_LENGTH);\n\tEVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv);\n```"
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "```\n\tpublic class SymmetricCipherTest {\n\t\t\tpublic static void main() {\n\t\t\t\t\tbyte[] text =\"Secret\".getBytes();\n\t\t\t\t\tbyte[] iv ={\n\t\t\t\t\t\t0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n\t\t\t\t\t};\n\t\t\t\t\tKeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n\t\t\t\t\tkg.init(56);\n\t\t\t\t\tSecretKey key = kg.generateKey();\n\t\t\t\t\tCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\t\t\t\t\tIvParameterSpec ips = new IvParameterSpec(iv);\n\t\t\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, ips);\n\t\t\t\t\treturn cipher.doFinal(inpBytes);\n\t\t\t}\n\t}\n```"
            },
            {
              "BodyText": "In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The Wired Equivalent Privacy (WEP) protocol used in the 802.11 wireless standard only supported 40-bit keys, and the IVs were only 24 bits, increasing the chances that the same IV would be reused for multiple messages. The IV was included in plaintext as part of the packet, making it directly observable to attackers. Only 5000 messages are needed before a collision occurs due to the \"birthday paradox\" [REF-1176]. Some implementations would reuse the same IV for each packet. This IV reuse made it much easier for attackers to recover plaintext from two packets with the same IV, using well-understood attacks, especially if the plaintext was known for one of the packets [REF-1175]."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-1472",
          "Description": "ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-1472"
        },
        {
          "Reference": "CVE-2011-3389",
          "Description": "BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2011-3389"
        },
        {
          "Reference": "CVE-2001-0161",
          "Description": "wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0161"
        },
        {
          "Reference": "CVE-2001-0160",
          "Description": "WEP card generates predictable IV values, making it easier for attackers to decrypt traffic",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0160"
        },
        {
          "Reference": "CVE-2017-3225",
          "Description": "device bootloader uses a zero initialization vector during AES-CBC",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-3225"
        },
        {
          "Reference": "CVE-2016-6485",
          "Description": "crypto framework uses PHP rand function - which is not cryptographically secure - for an initialization vector",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2016-6485"
        },
        {
          "Reference": "CVE-2014-5386",
          "Description": "encryption routine does not seed the random number generator, causing the same initialization vector to be generated repeatedly",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-5386"
        },
        {
          "Reference": "CVE-2020-5408",
          "Description": "encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5408"
        },
        {
          "Reference": "CVE-2017-17704",
          "Description": "messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-17704"
        },
        {
          "Reference": "CVE-2017-11133",
          "Description": "application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-11133"
        },
        {
          "Reference": "CVE-2007-3528",
          "Description": "Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3528"
        }
      ],
      "FunctionalAreas": [
        "Cryptography"
      ],
      "RelatedAttackPatterns": [
        "20",
        "97"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1175",
          "Section": "3. Risks of Keystream Reuse",
          "Authors": [
            "Nikita Borisov",
            "Ian Goldberg",
            "David Wagner"
          ],
          "Title": "Intercepting Mobile Communications: The Insecurity of 802.11",
          "Publication": "Proceedings of the Seventh Annual International Conference on Mobile Computing And Networking",
          "PublicationYear": "2001",
          "PublicationMonth": "07",
          "Publisher": "ACM",
          "URL": "http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf"
        },
        {
          "ExternalReferenceID": "REF-1175",
          "Section": "Appendix C",
          "Authors": [
            "Nikita Borisov",
            "Ian Goldberg",
            "David Wagner"
          ],
          "Title": "Intercepting Mobile Communications: The Insecurity of 802.11",
          "Publication": "Proceedings of the Seventh Annual International Conference on Mobile Computing And Networking",
          "PublicationYear": "2001",
          "PublicationMonth": "07",
          "Publisher": "ACM",
          "URL": "http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf"
        },
        {
          "ExternalReferenceID": "REF-1176",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Birthday problem",
          "PublicationYear": "2021",
          "PublicationMonth": "03",
          "PublicationDay": "06",
          "URL": "https://en.wikipedia.org/wiki/Birthday_problem"
        },
        {
          "ExternalReferenceID": "REF-1177",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Initialization Vector",
          "PublicationYear": "2021",
          "PublicationMonth": "03",
          "PublicationDay": "08",
          "URL": "https://en.wikipedia.org/wiki/Initialization_vector"
        },
        {
          "ExternalReferenceID": "REF-1178",
          "Section": "8.2 IV Constructions",
          "Authors": [
            "NIST"
          ],
          "Title": "Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC",
          "PublicationYear": "2007",
          "PublicationMonth": "11",
          "URL": "https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1179",
          "Authors": [
            "Arxum Path Security"
          ],
          "Title": "CBC Mode is Malleable. Don't trust it for Authentication",
          "PublicationYear": "2019",
          "PublicationMonth": "10",
          "PublicationDay": "16",
          "URL": "https://arxumpathsecurity.com/blog/2019/10/16/cbc-mode-is-malleable-dont-trust-it-for-authentication",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios."
        }
      ]
    },
    {
      "ID": "1209",
      "Name": "Failure to Disable Reserved Bits",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",
      "ExtendedDescription": "\n\nReserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The Designer and Implementer have to make a conscious choice to do this"
        },
        {
          "Phase": "Implementation",
          "Note": "The Designer and Implementer have to make a conscious choice to do this"
        },
        {
          "Phase": "Documentation",
          "Note": "If documentation labels anything \"for future use\", \"reserved\", or the like, such labeling could indicate to an attacker a potential attack point"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nInclude a feature to disable reserved bits.\n"
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "\n\nAny writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Assume a hardware Intellectual Property (IP) has address space 0x0-0x0F for its configuration registers, with the last one labeled reserved (i.e. 0x0F). Therefore inside the Finite State Machine (FSM), the code is as follows:"
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t 4'b1111 : //0x0F\n\t\t begin\n\t\t\t gpio_out = 1;\n\t\t end\n```"
            },
            {
              "BodyText": "An adversary may perform writes to reserved address space in hopes of changing the behavior of the hardware. In the code above, the GPIO pin should remain low for normal operation. However, it can be asserted by accessing the reserved address space (0x0F). This may be a concern if the GPIO state is being used as an indicator of health (e.g. if asserted the hardware may respond by shutting down or resetting the system, which may not be the correct action the system should perform).\n\n\nIn the code below, the condition \"register_address = 0X0F\" is commented out, and a default is provided that will catch any values of register_address not explicitly accounted for and take no action with regards to gpio_out. This means that an attacker who is able to write 0X0F to register_address will not enable any undocumented \"features\" in the process."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t //4'b1111 : //0x0F\n\t default: gpio_out = gpio_out;\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "121"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1220",
      "Name": "Insufficient Granularity of Access Control",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.\n\n\nA common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Other"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "\n\n  - Access-control-policy protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system with a register for storing AES key for encryption or decryption. The key is 128 bits, implemented as a set of four 32-bit registers. The key registers are assets and registers, AES_KEY_READ_POLICY and AES_KEY_WRITE_POLICY, and are defined to provide necessary access controls.\n\n\nThe read-policy register defines which agents can read the AES-key registers, and write-policy register defines which agents can program or write to those registers. Each register is a 32-bit register, and it can support access control for a maximum of 32 agents. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption  Default 0x00000000 |\n| AES_KEY_READ_WRITE_POLICY | [31:0] Default 0x00000006 - meaning agent with identities \"1\" and \"2\" can both read from and write to key registers  |"
            },
            {
              "BodyText": "In the above example, there is only one policy register that controls access to both read and write accesses to the AES-key registers, and thus the design is not granular enough to separate read and writes access for different agents. Here, agent with identities \"1\" and \"2\" can both read and write."
            },
            {
              "BodyText": "A good design should be granular enough to provide separate access controls to separate actions. Access control for reads should be separate from writes. Below is an example of such implementation where two policy registers are defined for each of these actions. The policy is defined such that: the AES-key registers can only be read or used by a crypto agent with identity \"1\" when bit #1 is set. The AES-key registers can only be programmed by a trusted firmware with identity \"2\" when bit #2 is set."
            },
            {
              "Nature": "Good",
              "ExampleCode": "|  | \n|\n| AES_KEY_READ_POLICY | [31:0] Default 0x00000002 - meaning only Crypto engine with identity \"1\" can read registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3  |\n| AES_KEY_WRITE_POLICY | [31:0] Default 0x00000004 - meaning only trusted firmware with identity \"2\" can program registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3  |"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Within the AXI node interface wrapper module in the RISC-V AXI module of the HACK@DAC'19 CVA6 SoC [REF-1346], an access control mechanism is employed to regulate the access of different privileged users to peripherals."
            },
            {
              "BodyText": "The AXI ensures that only users with appropriate privileges can access specific peripherals. For instance, a ROM module is accessible exclusively with Machine privilege, and AXI enforces that users attempting to read data from the ROM must possess machine privilege; otherwise, access to the ROM is denied. The access control information and configurations are stored in a ROM."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t\tfor (i=0; i<NB_SUBORDINATE; i++)\n\t\t begin \n\t\t\tfor (j=0; j<NB_MANAGER; j++)\n\t\t\t begin \n```\nassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i] || ((j==6) && access_ctrl_i[i][7][priv_lvl_i]);**  end end ..."
            },
            {
              "BodyText": "However, in the example code above, while assigning distinct privileges to AXI manager and subordinates, both the Platform-Level Interrupt Controller Specification (PLIC) and the Core-local Interrupt Controller (CLINT) (which are peripheral numbers 6 and 7 respectively) utilize the same access control configuration. This common configuration diminishes the granularity of the AXI access control mechanism."
            },
            {
              "BodyText": "In certain situations, it might be necessary to grant higher privileges for accessing the PLIC than those required for accessing the CLINT. Unfortunately, this differentiation is overlooked, allowing an attacker to access the PLIC with lower privileges than intended."
            },
            {
              "BodyText": "As a consequence, unprivileged code can read and write to the PLIC even when it was not intended to do so. In the worst-case scenario, the attacker could manipulate interrupt priorities, potentially modifying the system's behavior or availability."
            },
            {
              "BodyText": "To address the aforementioned vulnerability, developers must enhance the AXI access control granularity by implementing distinct access control entries for the Platform-Level Interrupt Controller (PLIC) and the Core-local Interrupt Controller (CLINT). By doing so, different privilege levels can be defined for accessing PLIC and CLINT, effectively thwarting the potential attacks previously highlighted. This approach ensures a more robust and secure system, safeguarding against unauthorized access and manipulation of interrupt priorities. [REF-1347]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t\tfor (i=0; i<NB_SUBORDINATE; i++)\n\t\t begin \n\t\t\tfor (j=0; j<NB_MANAGER; j++)\n\t\t\t begin \n```\nassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i];**  end end ..."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Consider the following SoC design. The sram in HRoT has an address range that is readable and writable by unprivileged software and it has an area that is only readable by unprivileged software. The tbus interconnect enforces access control for subordinates on the bus but uses only one bit to control both read and write access. Address 0xA0000000 - 0xA000FFFF is readable and writable by the untrusted cores core{0-N} and address 0xA0010000 - 0xA001FFFF is only readable by the untrusted cores core{0-N}."
            },
            {
              "BodyText": "The security policy access control is not granular enough, as it uses one bit to enable both read and write access. This gives write access to an area that should only be readable by unprivileged agents. \n\n\n Access control logic should differentiate between read and write access and to have sufficient address granularity."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-24985",
          "Description": "A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24985"
        },
        {
          "Reference": "CVE-2021-36934",
          "Description": "An operating system has an overly permission Access Control List onsome system files, including those related to user passwords",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-36934"
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1346",
          "Title": "axi_node_intf_wrap.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/src/axi_node/src/axi_node_intf_wrap.sv#L430",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1347",
          "Title": "axi_node_intf_wrap.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/2078f2552194eda37ba87e54cbfef10f1aa41fa5/src/axi_node/src/axi_node_intf_wrap.sv#L430",
          "URLDate": "2023-09-18"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1221",
      "Name": "Incorrect Register Defaults or Module Parameters",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.\n\n\nThe system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1419",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "Degradation of system functionality, or loss of access control enforcement can occur."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "The default values of these security sensitive settings need to be defined as part of the design review phase."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "Testing phase should use automated tools to test that values are configured per design specifications."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-162",
          "Entries": [
            {
              "IntroText": "Consider example design module system verilog code shown below. The register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "// Parameterized Register module example \n // Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// \n module register_example \n #( \n parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits \n parameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) \n ) \n ( \n input [REGISTER_WIDTH-1:0] Data_in, \n input Clk, \n input resetn, \n input write, \n output reg [REGISTER_WIDTH-1:0] Data_out \n ); \n\n reg Secure_mode; \n\n always @(posedge Clk or negedge resetn) \n\n```\n\t if (~resetn) \n\t begin \n\t\t Data_out <= REGISTER_DEFAULT; // Register content set to Default at reset \n\t\t Secure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset \n\t end \n\t else if (write & ~Secure_mode) \n\t begin \n\t\t Data_out <= Data_in; \n\t end \n endmodule \n module register_top \n ( \n input Clk, \n input resetn, \n input write, \n input [31:0] Data_in, \n output reg [31:0] Secure_reg, \n output reg [31:0] Insecure_reg \n ); \n register_example #( \n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0. \n ) Insecure_Device_ID_1 ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n register_example #(\n\t .REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default. \n ) Insecure_Device_ID_2 ( \n\t .Data_in (Data_in), \n\t .Data_out (Insecure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n endmodule \n```"
            },
            {
              "BodyText": "These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters."
            },
            {
              "BodyText": "In the example design, both registers will be software writable since Secure_mode is defined as zero."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "register_example #( \n\n```\n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode \n ) Secure_Device_ID_example ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n );\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the fuse memory inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1356]. Fuse memory can be used to store key hashes, password hashes, and configuration information. For example, the password hashes of JTAG and HMAC are stored in the fuse memory in the OpenPiton design."
            },
            {
              "BodyText": "During the firmware setup phase, data in the Fuse memory are transferred into the registers of the corresponding SoC peripherals for initialization. However, if the offset to access the password hash is set incorrectly, programs cannot access the correct password hash from the fuse memory, breaking the functionalities of the peripherals and even exposing sensitive information through other peripherals."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "**parameter MEM_SIZE = 100;** \n\n **localparam JTAG_OFFSET = 81;** \n\n const logic [MEM_SIZE-1:0][31:0] mem = {\n\n```\n\t // JTAG expected hamc hash\n\t 32'h49ac13af, 32'h1276f1b8, 32'h6703193a, 32'h65eb531b,\n\t 32'h3025ccca, 32'h3e8861f4, 32'h329edfe5, 32'h98f763b4,\n ...\n assign jtag_hash_o = {mem[JTAG_OFFSET-1],mem[JTAG_OFFSET-2],mem[JTAG_OFFSET-3],\n mem[JTAG_OFFSET-4],mem[JTAG_OFFSET-5],mem[JTAG_OFFSET-6],mem[JTAG_OFFSET-7],mem[JTAG_OFFSET-8]};\n ...\n```"
            },
            {
              "BodyText": "The following vulnerable code accesses the JTAG password hash from the fuse memory. However, the JTAG_OFFSET is incorrect, and the fuse memory outputs the wrong values to jtag_hash_o. Moreover, setting incorrect offset gives the ability to attackers to access JTAG by knowing other low-privileged peripherals' passwords."
            },
            {
              "BodyText": "To mitigate this, change JTAG_OFFSET to the correct address of the JTAG key [REF-1357]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "parameter MEM_SIZE = 100;\n\n **localparam JTAG_OFFSET = 100;**"
            }
          ]
        },
        {
          "ID": "DX-222",
          "Entries": [
            {
              "IntroText": "The following example code is excerpted from the Access Control module, acct_wrapper, in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this module, a set of memory-mapped I/O registers, referred to as acct_mem, each 32-bit wide, is utilized to store access control permissions for peripherals [REF-1437]. Access control registers are typically used to define and enforce permissions and access rights for various system resources."
            },
            {
              "BodyText": "However, in the buggy SoC, these registers are all enabled at reset, i.e., essentially granting unrestricted access to all system resources [REF-1438]. This will introduce security vulnerabilities and risks to the system, such as privilege escalation or exposing sensitive information to unauthorized users or processes."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'hffffffff;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."
            },
            {
              "BodyText": "To fix this issue, the access control registers must be properly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, predictable behavior, and allow proper control of peripherals. The specifics of what values should be set depend on the SoC's design and the requirements of the system. To address the problem depicted in the bad code example [REF-1438], the default value for \"acct_mem\" should be set to 32'h00000000 (see good code example [REF-1439]). This ensures that during startup or after any reset, access to protected data is restricted until the system setup is complete and security procedures properly configure the access control settings."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6)) \n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'h00000000;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "166"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1356",
          "Title": "fuse_mem.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/fuse_mem/fuse_mem.sv#L14-L15",
          "URLDate": "2023-07-15"
        },
        {
          "ExternalReferenceID": "REF-1357",
          "Title": "fix CWE 1221 in fuse_mem.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/compare/main...cwe_1221_in_fuse_mem#diff-d7275edeac22f76691a31c83f005d0177359ad710ad6549ece3d069ed043ef21",
          "URLDate": "2023-07-24"
        },
        {
          "ExternalReferenceID": "REF-1437",
          "Title": "acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L39"
        },
        {
          "ExternalReferenceID": "REF-1438",
          "Title": "Bad Code acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L79C1-L86C16"
        },
        {
          "ExternalReferenceID": "REF-1439",
          "Title": "Good Code acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/062de4f25002d2dcbdb0a82af36b80a517592612/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L84"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1222",
      "Name": "Insufficient Granularity of Address Regions Protected by Register Locks",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.\n\n\nA problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1220",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Other"
          ],
          "Note": "System security configuration cannot be defined in a way that does not conflict with functional requirements of device."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThe defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks.\n\n\nAs an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "For example, consider a hardware unit with a 32 kilobyte configuration address space where the first 8 kilobyte address contains security sensitive controls that must only be writable by device bootloader. One way to protect the security configuration could be to define a 32 bit system configuration locking register (SYS_LOCK) where each bit lock locks the corresponding 1 kilobyte region."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "| Address | Register | \n| --- | --- |\n| 0x0000 | SYS_LOCK: 32 bit system configuration lock register, each bit is write-1-once  |\n| 0x0004 | SECURITY_FEATURE_ENABLE: 32 bit register controlling enabling of security features  |\n| ... |    |\n| 0x0310 | SW_MODE: 32 bit Software Mode indication register   |\n\n\t| Address region | Lock bit | \n| --- | --- |\n| 0x0000 - 0x03FF | SYS_LOCK[0]  |\n| 0x0400 - 0x07FF | SYS_LOCK[1]  |\n| ... |    |\n| 0x7C00 - 0x7FFF | SYS_LOCK[31]  |"
            },
            {
              "BodyText": "If a register exists within the first kilobyte address range (e.g. SW_MODE, address 0x310) and needs to be software writable at runtime, then this register cannot be written in a securely configured system since SYS_LOCK register lock bit 0 must be set to protect other security settings (e.g. SECURITY_FEATURE_ENABLE, address 0x0004). The only fix would be to change the hardware logic or not set the security lock bit."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "679"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1223",
      "Name": "Race Condition for Write-Once Attributes",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nImplementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "362",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Note": "System configuration cannot be programmed in a secure way."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module register_write_once_example\n (\n\n```\n\t input [15:0] Data_in,\n\t input Clk,\n\t input ip_resetn,\n\t input global_resetn,\n\t input write,\n\t output reg [15:0] Data_out\n );\n reg Write_once_status;\n always @(posedge Clk or negedge ip_resetn)\n if (~ip_resetn)\n\t begin\n\t\t Data_out <= 16'h0000; \n\t\t Write_once_status <= 1'b0;\n\t end\n else if (write & ~Write_once_status) \n\t begin\n\t\t Data_out <= Data_in & 16'hFFFE; // Input data written to register after masking bit 0\n\t\t Write_once_status <= 1'b1; // Write once status set after first write.\n\t end\n else if (~write)\n\t begin\n\t\t Data_out[15:1] <= Data_out[15:1];\n\t\t Data_out[0] <= Write_once_status;\n\t end\n endmodule\n```"
            },
            {
              "BodyText": "The first system component that sends a write cycle to this register can program the value. This could result in a race condition security issue in the SoC design, if an untrusted agent is running in the system in parallel with the trusted component that is expected to program the register."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Trusted firmware or software trying to set the write-once field: \n\n  - Must confirm the Write_once_status (bit 0) value is zero, before programming register. If another agent has programmed the register before, then Write_once_status value will be one.\n\n  - After writing to the register, the trusted software can issue a read to confirm that the valid setting has been programmed."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "26"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1224",
      "Name": "Improper Restriction of Write-Once Bit Fields",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nFailure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\".\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "System configuration cannot be programmed in a secure way."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. This implementation can be for a register that is defined by specification to be a write-once register, since the write_once_status field gets written by input data bit 0 on first write."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module register_write_once_example\n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn,\n input write,\n output reg [15:0] Data_out \n );\n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn)\n\n```\n\t if (~ip_resetn)\n\t begin\n\t\t Data_out <= 16'h0000;\n\t\t Write_once_status <= 1'b0; \n\t end \n\t else if (write & ~Write_once_status)\n\t begin\n\t\t Data_out <= Data_in & 16'hFFFE;\n\t\t Write_once_status <= Data_in[0]; // Input bit 0 sets Write_once_status\n\t end\n\t else if (~write)\n\t begin \n\t\t Data_out[15:1] <= Data_out[15:1]; \n\t\t Data_out[0] <= Write_once_status; \n\t end \n endmodule\n```"
            },
            {
              "BodyText": "The above example only locks further writes if write_once_status bit is written to one. So it acts as write_1-Once instead of the write-once attribute."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module register_write_once_example \n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn, \n input write, \n output reg [15:0] Data_out \n ); \n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn) \n\n```\n\t if (~ip_resetn) \n\t begin \n\t\t Data_out <= 16'h0000; \n\t\t Write_once_status <= 1'b0; \n\t end \n\t else if (write & ~Write_once_status) \n\t begin \n\t\t Data_out <= Data_in & 16'hFFFE; \n\t\t Write_once_status <= 1'b1; // Write once status set on first write, independent of input \n\t end \n\t else if (~write) \n\t begin \n\t\t Data_out[15:1] <= Data_out[15:1]; \n\t\t Data_out[0] <= Write_once_status; \n\t end \n endmodule\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "680"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1229",
      "Name": "Creation of Emergent Resource",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",
      "ExtendedDescription": "\n\nA product is only expected to behave in a way that was specifically intended by the developer. Resource allocation and management is expected to be performed explicitly by the associated code. However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design. For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers. \"Parasitic computing,\" while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "664",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1049",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Parasitic computing",
          "URL": "https://en.wikipedia.org/wiki/Parasitic_computing"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1230",
      "Name": "Exposure of Sensitive Information Through Metadata",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",
      "ExtendedDescription": "\n\nDevelopers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "285",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1231",
      "Name": "Improper Prevention of Lock Bit Modification",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",
      "ExtendedDescription": "\n\nIn integrated circuits and hardware intellectual property (IP) cores, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification.\n\n\nThis behavior is commonly implemented using a trusted lock bit. When set, the lock bit disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after it has been set. Attackers might be able to unlock the system and features that the bit is intended to protect.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Registers protected by lock bit can be modified even when lock is set."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Set the lock bit. Power cycle the device. Attempt to clear the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "\n\n  - Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\n\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware, and then the register needs to be locked (TEMP_SENSOR_LOCK)."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| CRITICAL_TEMP_LIMIT | [31:8] Reserved field; Read only; Default 0  [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125 |\n| TEMP_SENSOR_CALIB | [31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degrees Centigrade.  |\n| TEMP_SENSOR_LOCK | [31:1] Reserved field; Read only; Default 0  [0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0 |\n| TEMP_HW_SHUTDOWN | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0 |\n| CURRENT_TEMP | [31:8] Reserved field; Read only; Default 0  [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0 |"
            },
            {
              "BodyText": "In this example, note that if the system heats to critical temperature, the response of the system is controlled by the TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected, since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response."
            },
            {
              "Nature": "Good",
              "ExampleCode": "To fix this weakness, one could change the TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK.\n\n|  | \n|\n| TEMP_HW_SHUTDOWN | [31:2] Reserved field; Read only; Default 0   [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0 [0] Locked by TEMP_SENSOR_LOCK |"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The following example code is a snippet from the register locks inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1350]. Register locks help prevent SoC peripherals' registers from malicious use of resources. The registers that can potentially leak secret data are locked by register locks."
            },
            {
              "BodyText": "In the vulnerable code, the reglk_mem is used for locking information. If one of its bits toggle to 1, the corresponding peripheral's registers will be locked. In the context of the HACK@DAC System-on-Chip (SoC), it is pertinent to note the existence of two distinct categories of reset signals."
            },
            {
              "BodyText": "First, there is a global reset signal denoted as \"rst_ni,\" which possesses the capability to simultaneously reset all peripherals to their respective initial states."
            },
            {
              "BodyText": "Second, we have peripheral-specific reset signals, such as \"rst_9,\" which exclusively reset individual peripherals back to their initial states. The administration of these reset signals is the responsibility of the reset controller module."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\talways @(posedge clk_i)\n\t\tbegin\n```\nif(~(rst_ni && ~jtag_unlock && ~rst_9))** \n\t\t\t\n\t\t\t```\n\t\t\t\tbegin \n\t\t\t\t\tfor (j=0; j < 6; j=j+1) begin \n\t\t\t\t\t\treglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t end\n\t...\n```"
            },
            {
              "BodyText": "In the buggy SoC architecture during HACK@DAC'21, a critical issue arises within the reset controller module. Specifically, the reset controller can inadvertently transmit a peripheral reset signal to the register lock within the user privilege domain."
            },
            {
              "BodyText": "This unintentional action can result in the reset of the register locks, potentially exposing private data from all other peripherals, rendering them accessible and readable."
            },
            {
              "BodyText": "To mitigate the issue, remove the extra reset signal rst_9 from the register lock if condition. [REF-1351]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\talways @(posedge clk_i)\n\t\tbegin\n```\nif(~(rst_ni && ~jtag_unlock))** \n\t\t\t\n\t\t\t```\n\t\t\t\tbegin \n\t\t\t\t\tfor (j=0; j < 6; j=j+1) begin \n\t\t\t\t\t\treglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t end\n\t...\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-6283",
          "Description": "chip reset clears critical read/write lock permissions for RSA function",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-6283"
        }
      ],
      "RelatedAttackPatterns": [
        "680"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1350",
          "Title": "reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L80C1-L80C48",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1351",
          "Title": "fix cwe 1199 in reglk",
          "PublicationYear": "2023",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/commit/5928add42895b57341ae8fc1f9b8351c35aed865#diff-1c2b09dd092a56e5fb2be431a3849e72ff489d2ae4f4a6bb9c0ea6b7d450135aR80",
          "URLDate": "2023-09-18"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1232",
      "Name": "Improper Lock Behavior After Power State Transition",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",
      "ExtendedDescription": "\n\nDevices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions.\n\n\nAfter a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "667",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "\n\n  - Security Lock bit protections should be reviewed for behavior across supported power state transitions.\n\n  - Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.\n\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider the memory configuration settings of a system that uses DDR3 DRAM memory. Protecting the DRAM memory configuration from modification by software is required to ensure that system memory access control protections cannot be bypassed. This can be done by using lock bit protection that locks all of the memory configuration registers. The memory configuration lock can be set by the BIOS during the boot process.\n\n\nIf such a system also supports a rapid power on mode like hibernate, the DRAM data must be saved to a disk before power is removed and restored back to the DRAM once the system powers back up and before the OS resumes operation after returning from hibernate."
            },
            {
              "BodyText": "To support the hibernate transition back to the operating state, the DRAM memory configuration must be reprogrammed even though it was locked previously. As the hibernate resume does a partial reboot, the memory configuration could be altered before the memory lock is set. Functionally the hibernate resume flow requires a bypass of the lock-based protection. The memory configuration must be securely stored and restored by trusted system firmware. Lock settings and system configuration must be restored to the same state it was in before the device entered into the hibernate mode."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from the register lock module (reglk_wrapper) of the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Upon powering on, most of the silicon registers are initially unlocked. However, critical resources must be configured and locked by setting the lock bit in a register.\n\n\nIn this module, a set of six memory-mapped I/O registers (reglk_mem) is defined and maintained to control the access control of registers inside different peripherals in the SoC [REF-1432]. Each bit represents a register's read/write ability or sets of registers inside a peripheral. Setting improper lock values after system power transition or system rest would make a temporary window for the attackers to read unauthorized data, e.g., secret keys from the crypto engine, and write illegitimate data to critical registers, e.g., framework data. Furthermore, improper register lock values can also result in DoS attacks. \n\n\nIn this faulty implementation, the locks are disabled, i.e., initialized to zero, at reset instead of setting them to their appropriate values [REF-1433]. Improperly initialized locks might allow unauthorized access to sensitive registers, compromising the system's security."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module reglk_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~jtag_unlock && ~rst_9))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < 6; j=j+1) begin\n```\nreglk_mem[j] <= 'h0;** \n\t\t\t\t\t\t end\n\t\t\t\t\t end\n\t\t\t\t ..."
            },
            {
              "BodyText": "To resolve this issue, it is crucial to ensure that register locks are correctly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, and predictable behavior and allow for proper control of peripherals. The specifics of initializing register locks and their values depend on the SoC's design and the system's requirements; for example, access to all registers through the user privilege level should be locked at reset. To address the problem depicted in the bad code example [REF-1433], the default value for \"reglk_mem\" should be set to 32'hFFFFFFFF. This ensures that access to protected data is restricted during power state transition or after reset until the system state transition is complete and security procedures have properly configured the register locks."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module reglk_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~jtag_unlock && ~rst_9))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < 6; j=j+1) begin\n```\nreglk_mem[j] <= 'hffffffff;** \n\t\t\t\t\t\t end\n\t\t\t\t\t end\n\t\t\t\t ..."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "166"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1432",
          "Title": "reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L39C1-L39C1"
        },
        {
          "ExternalReferenceID": "REF-1433",
          "Title": "Bad Code reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L78C1-L85C16"
        },
        {
          "ExternalReferenceID": "REF-1434",
          "Title": "Good Code reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/5e2031fd3854bcc0b2ca11d13442542dd5ea98e0/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L83"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1233",
      "Name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration).\n\n\nHowever, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "667",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Modify Memory"
          ],
          "Note": "System Configuration protected by the lock bit can be modified even when the lock is set."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Set the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "\n\n  - Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\n\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by the firmware."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| CRITICAL_TEMP_LIMIT  | [31:8] Reserved field; Read only; Default 0  [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125  |\n| TEMP_SENSOR_CALIB  | [31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write; Default 25   |\n| TEMP_SENSOR_LOCK  | [31:1] Reserved field; Read only; Default 0  [0] Lock bit, locks CRITICAL_TEMP_LIMIT register; Write-1-once; Default 0  |\n| TEMP_HW_SHUTDOWN  | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on a critical temperature detection; Read-write; Default 0  |\n| CURRENT_TEMP  | [31:8] Reserved field; Read only; Default 0  [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0  |"
            },
            {
              "BodyText": "In this example note that only the CRITICAL_TEMP_LIMIT register is protected by the TEMP_SENSOR_LOCK bit, while the security design intent is to protect any modification of the critical temperature detection and response. \n\n\nThe response of the system, if the system heats to a critical temperature, is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Also, the TEMP_SENSOR_CALIB register is not protected by the lock bit. \n\n\nBy modifying the temperature sensor calibration, the conversion of the sensor data to a degree centigrade can be changed, such that the current temperature will never be detected to exceed critical temperature value programmed by the protected lock. \n\n\nSimilarly, by modifying the TEMP_HW_SHUTDOWN.Enable bit, the system response detection of the current temperature exceeding critical temperature can be disabled."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Change TEMP_HW_SHUTDOWN and TEMP_SENSOR_CALIB controls to be locked by TEMP_SENSOR_LOCK. \n\n|  | \n|\n| TEMP_SENSOR_CALIB  | [31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write-Lock; Default 25; Locked by TEMP_SENSOR_LOCK bit[0]   |\n| TEMP_HW_SHUTDOWN  | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0; Locked by TEMP_SENSOR_LOCK bit[0]  |"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2018-9085",
          "Description": "Certain servers leave a write protection lock bit unset after boot, potentially allowing modification of parts of flash memory.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-9085"
        },
        {
          "Reference": "CVE-2014-8273",
          "Description": "Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-8273"
        }
      ],
      "RelatedAttackPatterns": [
        "176",
        "680"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1237",
          "Authors": [
            "CERT Coordination Center"
          ],
          "Title": "Intel BIOS locking mechanism contains race condition that enables write protection bypass",
          "PublicationYear": "2015",
          "PublicationMonth": "01",
          "PublicationDay": "05",
          "URL": "https://www.kb.cert.org/vuls/id/766164/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1234",
      "Name": "Hardware Internal or Debug Modes Allow Override of Locks",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "System configuration protection may be bypassed during debug mode.",
      "ExtendedDescription": "\n\nDevice configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "667",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Bypass of lock bit allows access and modification of system configuration even when the lock bit is set."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "\n\n  - Security Lock bit protections should be reviewed for any bypass/override modes supported.\n\n  - Any supported override modes either should be removed or protected using authenticated debug modes.\n\n  - Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.\n\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "For example, consider the example Locked_override_register example. This register module supports a lock mode that blocks any writes after lock is set to 1. \n However, it also allows override of the lock protection when scan_mode or debug_unlocked modes are active."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module Locked_register_example\n (\n input [15:0] Data_in,\n input Clk,\n input resetn,\n input write,\n input Lock,\n input scan_mode,\n input debug_unlocked,\n output reg [15:0] Data_out\n );\n\n reg lock_status;\n\n always @(posedge Clk or negedge resetn)\n\n```\n\t if (~resetn) // Register is reset resetn\n\t begin\n\t\t lock_status <= 1'b0;\n\t end\n\t else if (Lock)\n\t begin\n\t\t lock_status <= 1'b1;\n\t end\n\t else if (~Lock)\n\t begin\n\t\t lock_status <= lock_status\n\t end\n always @(posedge Clk or negedge resetn)\n\t if (~resetn) // Register is reset resetn\n\t begin\n\t\t Data_out <= 16'h0000;\n\t end\n\t else if (write & (~lock_status | scan_mode | debug_unlocked) ) // Register protected by Lock bit input, overrides supported for scan_mode & debug_unlocked\n\t begin\n\t\t Data_out <= Data_in;\n\t end\n\t else if (~write)\n\t begin\n\t\t Data_out <= Data_out;\n\t end\n endmodule\n```"
            },
            {
              "BodyText": "If either the scan_mode or the debug_unlocked modes can be triggered by software, then the lock protection may be bypassed."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Either remove the debug and scan mode overrides or protect enabling of these modes so that only trusted and authorized users may enable these modes."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The following example code [REF-1375] is taken from the register lock security peripheral of the HACK@DAC'21 buggy OpenPiton SoC. It demonstrates how to lock read or write access to security-critical hardware registers (e.g., crypto keys, system integrity code, etc.). The configuration to lock all the sensitive registers in the SoC is managed through the reglk_mem registers. These reglk_mem registers are reset when the hardware powers up and configured during boot up. Malicious users, even with kernel-level software privilege, do not get access to the sensitive contents that are locked down. Hence, the security of the entire system can potentially be compromised if the register lock configurations are corrupted or if the register locks are disabled."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n always @(posedge clk_i)\n\n```\n\t begin\n```\nif(~(rst_ni && ~jtag_unlock && ~rst_9))** \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t for (j=0; j < 6; j=j+1) begin\n\t\t\t\t\t reglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t\t\t end\n ...\n```"
            },
            {
              "BodyText": "The example code [REF-1375] illustrates an instance of a vulnerable implementation of register locks in the SoC. In this flawed implementation [REF-1375], the reglk_mem registers are also being reset when the system enters debug mode (indicated by the jtag_unlock signal). Consequently, users can simply put the processor in debug mode to access sensitive contents that are supposed to be protected by the register lock feature."
            },
            {
              "BodyText": "This can be mitigated by excluding debug mode signals from the reset logic of security-critical register locks as demonstrated in the following code snippet [REF-1376]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n always @(posedge clk_i)\n\n```\n\t begin\n```\nif(~(rst_ni && ~rst_9))** \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t for (j=0; j < 6; j=j+1) begin\n\t\t\t\t\t reglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t\t\t end\n ...\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "176"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1375",
          "Title": "reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/cde1d9d6888bffab21d4b405ccef61b19c58dd3c/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L80C1-L80C48",
          "URLDate": "2023-12-13"
        },
        {
          "ExternalReferenceID": "REF-1376",
          "Title": "Fix for reglk_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/20238068b385d7ab704cabfb95ff95dd6e56e1c2/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L80",
          "URLDate": "2023-12-13"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1235",
      "Name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",
      "ExtendedDescription": "\n\nLanguages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.\n\n\nHowever, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "400",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Java",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C#",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "The programmer may use boxed primitives when not strictly necessary."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (CPU)",
            "DoS: Resource Consumption (Memory)",
            "DoS: Resource Consumption (Other)",
            "Reduce Performance"
          ],
          "Likelihood": [
            "Low"
          ],
          "Note": "Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary."
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "```\n\tLong count = 0L; \n\t for (long i = 0; i < Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"
            },
            {
              "BodyText": "In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the \"long\" primitive was used to declare the count variable, which can impact availability of a resource."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "This code uses primitive long which fixes the issue."
            },
            {
              "Nature": "Good",
              "Language": "Java",
              "ExampleCode": "```\n\tlong count = 0L; \n\t for (long i = 0; i < Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"
            }
          ]
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "SEI CERT Oracle Coding Standard for Java",
          "EntryID": "EXP04-J",
          "EntryName": "Do not pass arguments to certain Java Collections Framework methods that are a different type than the collection parameter type"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SI-2"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1051",
          "Title": "Oracle Java Documentation",
          "URL": "https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html"
        },
        {
          "ExternalReferenceID": "REF-1052",
          "Authors": [
            "The Software Engineering Institute"
          ],
          "Title": "SEI CERT Oracle Coding Standard for Java : Rule 02. Expressions (EXP)",
          "URL": "https://wiki.sei.cmu.edu/confluence/display/java/EXP04-J.+Do+not+pass+arguments+to+certain+Java+Collections+Framework+methods+that+are+a+different+type+than+the+collection+parameter+type"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1236",
      "Name": "Improper Neutralization of Formula Elements in a CSV File",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",
      "ExtendedDescription": "User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "74",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "74",
          "ViewID": "1003",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Other",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "CSV Injection"
        },
        {
          "Term": "Formula Injection"
        },
        {
          "Term": "Excel Macro Injection"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "The weakness is in the implementation of a software's CSV export feature, in particular how it formats formula entries as the output gets flattened into a text file."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data",
            "Execute Unauthorized Code or Commands"
          ],
          "Likelihood": [
            "Low"
          ],
          "Note": "Current versions of Excel warn users of untrusted content."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Unfortunately, there is no perfect solution, since different spreadsheet products act differently."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "It is not clear how effective this mitigation is with other spreadsheet software."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Hyperlinks or other commands can be executed when a cell begins with the formula identifier, '='"
            },
            {
              "Nature": "Attack",
              "Language": "Other",
              "ExampleCode": "=HYPERLINK(link_location, [friendly_name])"
            },
            {
              "BodyText": "Stripping the leading equals sign, or simply not executing formulas from untrusted sources, impedes malicious activity."
            },
            {
              "Nature": "Good",
              "ExampleCode": "HYPERLINK(link_location, [friendly_name])"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-12134",
          "Description": "Low privileged user can trigger CSV injection through a contact form field value",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-12134"
        },
        {
          "Reference": "CVE-2019-4521",
          "Description": "Cloud management product allows arbitrary command execution via CSV injection",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-4521"
        },
        {
          "Reference": "CVE-2019-17661",
          "Description": "CSV injection in content management system via formula code in a first or last name",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-17661"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-21",
          "Authors": [
            "OWASP"
          ],
          "Title": "CSV Injection",
          "PublicationYear": "2020",
          "PublicationMonth": "02",
          "PublicationDay": "02",
          "URL": "https://owasp.org/www-community/attacks/CSV_Injection"
        },
        {
          "ExternalReferenceID": "REF-22",
          "Authors": [
            "Jamie Rougvie"
          ],
          "Title": "Data Extraction to Command Execution CSV Injection",
          "PublicationYear": "2019",
          "PublicationMonth": "09",
          "PublicationDay": "06",
          "URL": "https://www.veracode.com/blog/secure-development/data-extraction-command-execution-csv-injection"
        },
        {
          "ExternalReferenceID": "REF-23",
          "Authors": [
            "George Mauer"
          ],
          "Title": "The Absurdly Underestimated Dangers of CSV Injection",
          "PublicationYear": "2017",
          "PublicationMonth": "10",
          "PublicationDay": "07",
          "URL": "http://georgemauer.net/2017/10/07/csv-injection.html"
        },
        {
          "ExternalReferenceID": "REF-24",
          "Authors": [
            "James Kettle"
          ],
          "Title": "Comma Separated Vulnerabilities",
          "PublicationYear": "2014",
          "PublicationMonth": "08",
          "PublicationDay": "29",
          "URL": "https://rstforums.com/forum/topic/82690-comma-separated-vulnerabilities/",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1239",
      "Name": "Improper Zeroization of Hardware Register",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.",
      "ExtendedDescription": "Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Lack of hardware mechanisms to zeroize or clear registers in the design or specification."
        },
        {
          "Phase": "Implementation",
          "Note": "Mechanisms to zeroize and clear registers are in the design but implemented incorrectly."
        },
        {
          "Phase": "Operation",
          "Note": "Hardware-provided zeroization mechanisms are not used appropriately by the IP user (ex. firmware), or data remanence issues are not taken into account."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "The consequences will depend on the information disclosed due to the vulnerability."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
          "EffectivenessNotes": "Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055]."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Suppose a hardware IP for implementing an encryption routine works as expected, but it leaves the intermediate results in some registers that can be accessed. Exactly why this access happens is immaterial - it might be unintentional or intentional, where the designer wanted a \"quick fix\" for something."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below [REF-1379] is taken from the SHA256 Interface/wrapper controller module of the HACK@DAC'21 buggy OpenPiton SoC. Within the wrapper module there are a set of 16 memory-mapped registers referenced data[0] to data[15]. These registers are 32 bits in size and are used to store the data received on the AXI Lite interface for hashing. Once both the message to be hashed and a request to start the hash computation are received, the values of these registers will be forwarded to the underlying SHA256 module for processing. Once forwarded, the values in these registers no longer need to be retained. In fact, if not cleared or overwritten, these sensitive values can be read over the AXI Lite interface, potentially compromising any previously confidential data stored therein."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n\n```\n\t // Implement SHA256 I/O memory map interface\n\t // Write side\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_3))\n\t\t\t\t begin\n\t\t\t\t\t startHash <= 0;\n\t\t\t\t\t newMessage <= 0;\n\t\t\t\t\t data[0] <= 0;\n\t\t\t\t\t data[1] <= 0;\n\t\t\t\t\t data[2] <= 0;\n\t\t\t\t\t ...\n\t\t\t\t\t data[14] <= 0;\n\t\t\t\t\t data[15] <= 0;\n ...\n```"
            },
            {
              "BodyText": "In the previous code snippet [REF-1379] there is the lack of a data clearance mechanism for the memory-mapped I/O registers after their utilization. These registers get cleared only when a reset condition is met. This condition is met when either the global negative-edge reset input signal (rst_ni) or the dedicated reset input signal for SHA256 peripheral (rst_3) is active. In other words, if either of these reset signals is true, the registers will be cleared. However, in cases where there is not a reset condition these registers retain their values until the next hash operation. It is during the time between an old hash operation and a new hash operation that that data is open to unauthorized disclosure."
            },
            {
              "BodyText": "To correct the issue of data persisting between hash operations, the memory mapped I/O registers need to be cleared once the values written in these registers are propagated to the SHA256 module. This could be done for example by adding a new condition to zeroize the memory mapped I/O registers once the hash value is computed, i.e., hashValid signal asserted, as shown in the good code example below [REF-1380]. This fix will clear the memory-mapped I/O registers after the data has been provided as input to the SHA engine."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n\n```\n\t // Implement SHA256 I/O memory map interface\n\t // Write side\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_3))\n\t\t\t\t begin\n\t\t\t\t\t startHash <= 0;\n\t\t\t\t\t newMessage <= 0;\n\t\t\t\t\t data[0] <= 0;\n\t\t\t\t\t data[1] <= 0;\n\t\t\t\t\t data[2] <= 0;\n\t\t\t\t\t ...\n\t\t\t\t\t data[14] <= 0;\n\t\t\t\t\t data[15] <= 0;\n\t\t\t\t end\n```\nelse if(hashValid && ~hashValid_r)** \n\t\t\t```\n```\nbegin** \n\t\t\t\t```\n```\ndata[0] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[1] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[2] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **...** \n\t\t\t\t\t\n\t\t\t\t\t **data[14] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[15] <= 0;** \n\t\t\t\t\t end\n\t\t\t\t ..."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "150",
        "204",
        "37",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-267",
          "Authors": [
            "Information Technology Laboratory, National Institute of Standards and Technology"
          ],
          "Title": "SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES",
          "PublicationYear": "2001",
          "PublicationMonth": "05",
          "PublicationDay": "25",
          "URL": "https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1055",
          "Authors": [
            "Peter Gutmann"
          ],
          "Title": "Data Remanence in Semiconductor Devices",
          "Publication": "10th USENIX Security Symposium",
          "PublicationYear": "2001",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/legacy/events/sec01/full_papers/gutmann/gutmann.pdf"
        },
        {
          "ExternalReferenceID": "REF-1379",
          "Title": "sha256_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/sha256/sha256_wrapper.sv#L94-L116",
          "URLDate": "2023-12-13"
        },
        {
          "ExternalReferenceID": "REF-1380",
          "Title": "Fix for sha256_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/e8ba396b5c7cec9031e0e0e18ac547f32cd0ed50/piton/design/chip/tile/ariane/src/sha256/sha256_wrapper.sv#L98C1-L139C18",
          "URLDate": "2023-12-13"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1240",
      "Name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",
      "ExtendedDescription": "\n\nCryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of \"primitive\" can vary depending on point of view. See \"Terminology Notes\" for further explanation of some concepts.\n\n\nCryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time.\n\n\nIf a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is \"broken\"). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack.\n\n\nCryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly.\n\n\nIf ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences.\n\n\nThis weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "327",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness is primarily introduced during the architecture and design phase as risky primitives are included."
        },
        {
          "Phase": "Implementation",
          "Note": "Even in cases where the Architectural phase properly specifies a cryptographically secure design, the design may be changed during implementation due to unforeseen constraints."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.",
          "Effectiveness": "High"
        },
        {
          "Method": "Manual Analysis",
          "Description": "Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-55",
          "Phase": [
            "Requirements"
          ],
          "Description": "Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
          "Effectiveness": "High"
        },
        {
          "MitigationID": "MIT-54",
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.",
          "Effectiveness": "Discouraged Common Practice"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.",
          "Effectiveness": "Discouraged Common Practice"
        },
        {
          "MitigationID": "MIT-52",
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.",
          "Effectiveness": "Defense in Depth"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].",
          "Effectiveness": "Discouraged Common Practice"
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.",
          "Effectiveness": "Discouraged Common Practice"
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Do not use a checksum as a substitute for a cryptographically generated hash.",
          "Effectiveness": "Discouraged Common Practice"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Strategy": "Libraries or Frameworks",
          "Description": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.",
          "Effectiveness": "Moderate"
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Re-using random values may compromise security."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "Suppose an Encryption algorithm needs a random value for a key. Instead of using a DRNG (Deterministic Random Number Generator), the designer uses a linear-feedback shift register (LFSR) to generate the value."
            },
            {
              "BodyText": "While an LFSR may provide pseudo-random number generation service, the entropy (measure of randomness) of the resulting output may be less than that of an accepted DRNG (like that used in dev/urandom). Thus, using an LFSR weakens the strength of the cryptographic system, because it may be possible for an attacker to guess the LFSR output and subsequently the encryption key."
            },
            {
              "Nature": "Good",
              "ExampleCode": "If a cryptographic algorithm expects a random number as its input, provide one. Do not provide a pseudo-random value."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-4778",
          "Description": "software uses MD5, which is less safe than the default SHA-256 used by related products",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4778"
        },
        {
          "Reference": "CVE-2005-2946",
          "Description": "Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2946"
        },
        {
          "Reference": "CVE-2019-3907",
          "Description": "identity card uses MD5 hash of a salt and password",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3907"
        },
        {
          "Reference": "CVE-2021-34687",
          "Description": "personal key is transmitted over the network using a substitution cipher",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-34687"
        },
        {
          "Reference": "CVE-2020-14254",
          "Description": "product does not disable TLS-RSA cipher suites, allowing decryption of traffic if TLS 2.0 and secure ciphers are not enabled.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-14254"
        },
        {
          "Reference": "CVE-2019-1543",
          "Description": "SSL/TLS library generates 16-byte nonces but reduces them to 12 byte nonces for the ChaCha20-Poly1305 cipher, converting them in a way that violates the cipher's requirements for unique nonces.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1543"
        },
        {
          "Reference": "CVE-2017-9267",
          "Description": "LDAP interface allows use of weak ciphers",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-9267"
        },
        {
          "Reference": "CVE-2017-7971",
          "Description": "SCADA product allows \"use of outdated cipher suites\"",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-7971"
        },
        {
          "Reference": "CVE-2020-6616",
          "Description": "Chip implementing Bluetooth uses a low-entropy PRNG instead of a hardware RNG, allowing spoofing.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6616"
        },
        {
          "Reference": "CVE-2019-1715",
          "Description": "security product has insufficient entropy in the DRBG, allowing collisions and private key discovery",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1715"
        },
        {
          "Reference": "CVE-2014-4192",
          "Description": "Dual_EC_DRBG implementation in RSA toolkit does not correctly handle certain byte requests, simplifying plaintext recovery",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-4192"
        },
        {
          "Reference": "CVE-2007-6755",
          "Description": "Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6755"
        }
      ],
      "RelatedAttackPatterns": [
        "97"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-267",
          "Authors": [
            "Information Technology Laboratory, National Institute of Standards and Technology"
          ],
          "Title": "SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES",
          "PublicationYear": "2001",
          "PublicationMonth": "05",
          "PublicationDay": "25",
          "URL": "https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1227",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Cryptographic primitive",
          "URL": "https://en.wikipedia.org/wiki/Cryptographic_primitive"
        },
        {
          "ExternalReferenceID": "REF-1226",
          "Authors": [
            "Information Technology Laboratory, National Institute of Standards and Technology"
          ],
          "Title": "FIPS PUB 140-2: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES",
          "PublicationYear": "2001",
          "PublicationMonth": "05",
          "PublicationDay": "25",
          "URL": "https://csrc.nist.gov/publications/detail/fips/140/2/final"
        },
        {
          "ExternalReferenceID": "REF-1192",
          "Authors": [
            "Information Technology Laboratory, National Institute of Standards and Technology"
          ],
          "Title": "FIPS PUB 140-3: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES",
          "PublicationYear": "2019",
          "PublicationMonth": "03",
          "PublicationDay": "22",
          "URL": "https://csrc.nist.gov/publications/detail/fips/140/3/final"
        },
        {
          "ExternalReferenceID": "REF-1236",
          "Section": "Test Vectors",
          "Authors": [
            "NIST"
          ],
          "Title": "CAVP Testing: Individual Component Testing",
          "URL": "https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/component-testing"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Terminology",
          "Note": "\n\n Terminology for cryptography varies widely, from informal and colloquial to mathematically-defined, with different precision and formalism depending on whether the stakeholder is a developer, cryptologist, etc. Yet there is a need for CWE to be self-consistent while remaining understandable and acceptable to multiple audiences.\n\n\nAs of CWE 4.6, CWE terminology around \"primitives\" and \"algorithms\" is emerging as shown by the following example, subject to future consultation and agreement within the CWE and cryptography communities. Suppose one wishes to send encrypted data using a CLI tool such as OpenSSL. One might choose to use AES with a 256-bit key and require tamper protection (GCM mode, for instance). For compatibility's sake, one might also choose the ciphertext to be formatted to the PKCS#5 standard. In this case, the \"cryptographic system\" would be AES-256-GCM with PKCS#5 formatting. The \"cryptographic function\" would be AES-256 in the GCM mode of operation, and the \"algorithm\" would be AES. Colloquially, one would say that AES (and sometimes AES-256) is the \"cryptographic primitive,\" because it is the algorithm that realizes the concept of symmetric encryption (without modes of operation or other protocol related modifications). In practice, developers and architects typically refer to base cryptographic algorithms (AES, SHA, etc.) as cryptographic primitives.\n"
        },
        {
          "Type": "Maintenance",
          "Note": "Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing."
        }
      ]
    },
    {
      "ID": "1241",
      "Name": "Use of Predictable Algorithm in Random Number Generator",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The device uses an algorithm that is predictable and generates a pseudo-random number.",
      "ExtendedDescription": "\n\nPseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "330",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "In many cases, the design originally defines a cryptographically secure random number generator, but is then changed during implementation due to unforeseen constraints."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "A true random number generator should be specified for cryptographic algorithms."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "A true random number generator should be implemented for cryptographic algorithms."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Suppose a cryptographic function expects random value to be supplied for the crypto algorithm."
            },
            {
              "BodyText": "During the implementation phase, due to space constraint, a cryptographically secure random-number-generator could not be used, and instead of using a TRNG (True Random Number Generator), a LFSR (Linear Feedback Shift Register) is used to generate a random value. While an LFSR will provide a pseudo-random number, its entropy (measure of randomness) is insufficient for a cryptographic algorithm."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the PRNG inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1370]. The SoC implements a pseudo-random number generator using a Linear Feedback Shift Register (LFSR)."
            },
            {},
            {
              "BodyText": "An example of LFSR with the polynomial function P(x) = x\n6+x\n4+x\n3+1 is shown in the figure."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "**reg in_sr, entropy16_valid;** \n\n **reg [15:0] entropy16;** \n\n\n **assign entropy16_o = entropy16;** \n\n **assign entropy16_valid_o = entropy16_valid;** \n\n\n **always @ (*)** \n\n **begin** \n\n```\n```\nin_sr = ^ (poly_i [15:0] & entropy16 [15:0]);** \n\t\n **end**"
            },
            {
              "BodyText": "A LFSR's input bit is determined by the output of a linear function of two or more of its previous states. Therefore, given a long cycle, a LFSR-based PRNG will enter a repeating cycle, which is predictable."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-3692",
          "Description": "PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3692"
        }
      ],
      "RelatedAttackPatterns": [
        "97"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1370",
          "Title": "rng_16.v",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/rand_num/rng_16.v#L12-L22",
          "URLDate": "2023-07-15"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios."
        }
      ]
    },
    {
      "ID": "1242",
      "Name": "Inclusion of Undocumented Features or Chicken Bits",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.",
      "ExtendedDescription": "\n\nA common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as \"chicken bits\". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "Documentation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nThe implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a device that comes with various security measures, such as secure boot. The secure-boot process performs firmware-integrity verification at boot time, and this code is stored in a separate SPI-flash device. However, this code contains undocumented \"special access features\" intended to be used only for performing failure analysis and intended to only be unlocked by the device designer."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\tAttackers dump the code from the device and then perform reverse engineering to analyze the code. The undocumented, special-access features are identified, and attackers can activate them by sending specific commands via UART before secure-boot phase completes. Using these hidden features, attackers can perform reads and writes to memory via the UART interface. At runtime, the attackers can also execute arbitrary code and dump the entire memory contents.\n```"
            },
            {
              "BodyText": "Remove all chicken bits and hidden features that are exposed to attackers. Add authorization schemes that rely on cryptographic primitives to access any features that the manufacturer does not want to expose. Clearly document all interfaces."
            }
          ]
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SD-4"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SVV-3"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 2.12"
        }
      ],
      "RelatedAttackPatterns": [
        "212",
        "36"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1071",
          "Authors": [
            "Ali Abbasi",
            "Tobias Scharnowski",
            "Thorsten Holz"
          ],
          "Title": "Doors of Durin: The Veiled Gate to Siemens S7 Silicon",
          "URL": "https://i.blackhat.com/eu-19/Wednesday/eu-19-Abbasi-Doors-Of-Durin-The-Veiled-Gate-To-Siemens-S7-Silicon.pdf"
        },
        {
          "ExternalReferenceID": "REF-1072",
          "Authors": [
            "Sergei Skorobogatov",
            "Christopher Woods"
          ],
          "Title": "Breakthrough Silicon Scanning Discovers Backdoor in Military Chip",
          "URL": "https://www.cl.cam.ac.uk/~sps32/Silicon_scan_draft.pdf"
        },
        {
          "ExternalReferenceID": "REF-1073",
          "Authors": [
            "Chris Domas"
          ],
          "Title": "God Mode Unlocked: Hardware Backdoors in x86 CPUs",
          "URL": "https://i.blackhat.com/us-18/Thu-August-9/us-18-Domas-God-Mode-Unlocked-Hardware-Backdoors-In-x86-CPUs.pdf"
        },
        {
          "ExternalReferenceID": "REF-1074",
          "Authors": [
            "Jonathan Brossard"
          ],
          "Title": "Hardware Backdooring is Practical",
          "URL": "https://media.blackhat.com/bh-us-12/Briefings/Brossard/BH_US_12_Brossard_Backdoor_Hacking_Slides.pdf"
        },
        {
          "ExternalReferenceID": "REF-1075",
          "Authors": [
            "Sergei Skorabogatov"
          ],
          "Title": "Security, Reliability, and Backdoors",
          "URL": "https://www.cl.cam.ac.uk/~sps32/SG_talk_SRB.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1243",
      "Name": "Sensitive Non-Volatile Information Not Protected During Debug",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Access to security-sensitive information stored in fuses is not limited during debug.",
      "ExtendedDescription": "\n\nSeveral security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1263",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nDisable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Sensitive manufacturing data (such as die information) are stored in fuses. When the chip powers on, these values are read from the fuses and stored in microarchitectural registers. These registers are only given read access to trusted software running on the core. Untrusted software running on the core is not allowed to access these registers."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\tAll microarchitectural registers in this chip can be accessed through the debug interface. As a result, even an untrusted debugger can access this data and retrieve sensitive manufacturing data.\n```"
            },
            {
              "Nature": "Good",
              "ExampleCode": "```\n\tRegisters used to store sensitive values read from fuses should be blocked during debug. These registers should be disconnected from the debug interface.\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from one of the AES cryptographic accelerators of the HACK@DAC'21 buggy OpenPiton SoC [REF-1366]. The operating system (OS) uses three AES keys to encrypt and decrypt sensitive data using this accelerator. These keys are sensitive data stored in fuses. The security of the OS will be compromised if any of these AES keys are leaked. During system bootup, these AES keys are sensed from fuses and stored in temporary hardware registers of the AES peripheral. Access to these temporary registers is disconnected during the debug state to prevent them from leaking through debug access. In this example (see the vulnerable code source), the registers key0, key1, and key2 are used to store the three AES keys (which are accessed through key_big0, key_big1, and key_big2 signals). The OS selects one of these three keys through the key_big signal, which is used by the AES engine."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n assign key_big0 = debug_mode_i ? 192'b0 : {key0[0],\n key0[1], key0[2], key0[3], key0[4], key0[5]};\n\n assign key_big1 = debug_mode_i ? 192'b0 : {key1[0],\n key1[1], key1[2], key1[3], key1[4], key1[5]};\n\n\n **assign key_big2 = {key2[0], key2[1], key2[2],** \n\n **key2[3], key2[4], key2[5]};** \n ...\n\n **assign key_big = key_sel[1] ? key_big2 : ( key_sel[0] ?** \n\n **key_big1 : key_big0 );** \n ..."
            },
            {
              "BodyText": "The above code illustrates an instance of a vulnerable implementation for blocking AES key mechanism when the system is in debug mode (i.e., when debug_mode_i is asserted). During debug mode, key accesses through key_big0 and key_big1 are effectively disconnected, as their values are set to zero. However, the key accessed via the key_big2 signal remains accessible, creating a potential pathway for sensitive fuse data leakage, specifically AES key2, during debug mode. Furthermore, even though it is not strictly necessary to disconnect the key_big signal when entering debug mode (since disconnecting key_big0, key_big1, and key_big2 will inherently disconnect key_big), it is advisable, in line with the defense-in-depth strategy, to also sever the connection to key_big. This additional security measure adds an extra layer of protection and safeguards the AES keys against potential future modifications to the key_big logic."
            },
            {
              "BodyText": "To mitigate this, disconnect access through key_big2 and key_big during debug mode [REF-1367]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n assign key_big0 = debug_mode_i ? 192'b0 : {key0[0],\n key0[1], key0[2], key0[3], key0[4], key0[5]};\n\n assign key_big1 = debug_mode_i ? 192'b0 : {key1[0],\n key1[1], key1[2], key1[3], key1[4], key1[5]}; \n\n assign key_big2 = \n **debug_mode_i ? 192'b0 :**  {key2[0],\n key2[1], key2[2], key2[3], key2[4], key2[5]};\n ...\n assign key_big = \n **debug_mode_i ? 192'b0 :**  ( key_sel[1] ?\n key_big2 : ( key_sel[0] ? key_big1 : key_big0 ) );\n ..."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "116",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1366",
          "Title": "aes0_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/aes0/aes0_wrapper.sv#L56C1-L57C1",
          "URLDate": "2023-07-15"
        },
        {
          "ExternalReferenceID": "REF-1367",
          "Title": "fix cwe_1243 in aes0_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/cde1d9d6888bffab21d4b405ccef61b19c58dd3c/piton/design/chip/tile/ariane/src/aes0/aes0_wrapper.sv#L56",
          "URLDate": "2023-09-28"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1244",
      "Name": "Internal Asset Exposed to Unsafe Debug Access Level or State",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.",
      "ExtendedDescription": "\n\nDebug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger.\n\n\nIf this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "863",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ]
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Memory"
          ]
        },
        {
          "Scope": [
            "Authorization",
            "Access Control"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Check 2 devices for their passcode to authenticate access to JTAG/debugging ports. If the passcodes are missing or the same, update the design to fix and retest. Check communications over JTAG/debugging ports for encryption. If the communications are not encrypted, fix the design and retest.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nFor security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.\n",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
          "Effectiveness": "Limited"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.",
          "Effectiveness": "Limited"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The JTAG interface is used to perform debugging and provide CPU core access for developers. JTAG-access protection is implemented as part of the JTAG_SHIELD bit in the hw_digctl_ctrl register. This register has no default value at power up and is set only after the system boots from ROM and control is transferred to the user software."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "|  | \n|\n| 1 bit | 0x0 = JTAG debugger is enabled (default)  |\n| JTAG_SHIELD | 0x1 = JTAG debugger is disabled  |"
            },
            {
              "BodyText": "This means that since the end user has access to JTAG at system reset and during ROM code execution before control is transferred to user software, a JTAG user can modify the boot flow and subsequently disclose all CPU information, including data-encryption keys."
            },
            {
              "Nature": "Informative",
              "ExampleCode": "```\n\tThe default value of this register bit should be set to 1 to prevent the JTAG from being enabled at system reset.\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from the CVA6 processor core of the HACK@DAC'21 buggy OpenPiton SoC. Debug access allows users to access internal hardware registers that are otherwise not exposed for user access or restricted access through access control protocols. Hence, requests to enter debug mode are checked and authorized only if the processor has sufficient privileges. In addition, debug accesses are also locked behind password checkers. Thus, the processor enters debug mode only when the privilege level requirement is met, and the correct debug password is provided."
            },
            {
              "BodyText": "The following code [REF-1377] illustrates an instance of a vulnerable implementation of debug mode. The core correctly checks if the debug requests have sufficient privileges and enables the debug_mode_d and debug_mode_q signals. It also correctly checks for debug password and enables umode_i signal."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n```\nassign priv_lvl_o = (debug_mode_q || umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q <= debug_mode_d;\n ...\n```"
            },
            {
              "BodyText": "However, it grants debug access and changes the privilege level, priv_lvl_o, even when one of the two checks is satisfied and the other is not. Because of this, debug access can be granted by simply requesting with sufficient privileges (i.e., debug_mode_q is enabled) and failing the password check (i.e., umode_i is disabled). This allows an attacker to bypass the debug password checking and gain debug access to the core, compromising the security of the processor."
            },
            {
              "BodyText": "A fix to this issue is to only change the privilege level of the processor when both checks are satisfied, i.e., the request has enough privileges (i.e., debug_mode_q is enabled) and the password checking is successful (i.e., umode_i is enabled) [REF-1378]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n\t assign priv_lvl_o = \n```\n(debug_mode_q && umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q <= debug_mode_d;\n ...\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-18827",
          "Description": "After ROM code execution, JTAG access is disabled. But before the ROM code is executed, JTAG access is possible, allowing a user full system access. This allows a user to modify the boot flow and successfully bypass the secure-boot process.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"
        }
      ],
      "RelatedAttackPatterns": [
        "114"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1056",
          "Authors": [
            "F-Secure Labs"
          ],
          "Title": "Multiple Vulnerabilities in Barco Clickshare: JTAG access is not permanently disabled",
          "URL": "https://labs.f-secure.com/advisories/multiple-vulnerabilities-in-barco-clickshare/"
        },
        {
          "ExternalReferenceID": "REF-1057",
          "Authors": [
            "Kurt Rosenfeld",
            "Ramesh Karri"
          ],
          "Title": "Attacks and Defenses for JTAG",
          "URL": "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=5406671"
        },
        {
          "ExternalReferenceID": "REF-1219",
          "Authors": [
            "Monodeep Kar",
            "Arvind Singh",
            "Santosh Ghosh",
            "Sanu Mathew",
            "Anand Rajan",
            "Vivek De",
            "Raheem Beyah",
            "Saibal Mukhopadhyay"
          ],
          "Title": "Blindsight: Blinding EM Side-Channel Leakage using Built-In Fully Integrated Inductive Voltage Regulator",
          "PublicationYear": "2018",
          "PublicationMonth": "02",
          "URL": "https://arxiv.org/pdf/1802.09096.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1377",
          "Title": "csr_regile.sv line 938",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/57e7b2109c1ea2451914878df2e6ca740c2dcf34/src/csr_regfile.sv#L938",
          "URLDate": "2023-12-13"
        },
        {
          "ExternalReferenceID": "REF-1378",
          "Title": "Fix for csr_regfile.sv line 938",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/a7b61209e56c48eec585eeedea8413997ec71e4a/src/csr_regfile.sv#L938C31-L938C56",
          "URLDate": "2023-12-13"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Relationship",
          "Note": "CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents."
        }
      ]
    },
    {
      "ID": "1245",
      "Name": "Improper Finite State Machines (FSMs) in Hardware Logic",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
      "ExtendedDescription": "\n\nThe functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "684",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Unexpected State",
            "DoS: Crash, Exit, or Restart",
            "DoS: Instability",
            "Gain Privileges or Assume Identity"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-152",
          "Entries": [
            {
              "IntroText": "The Finite State Machine (FSM) shown in the \"bad\" code snippet below assigns the output (\"out\") based on the value of state, which is determined based on the user provided input (\"user_input\")."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\tmodule fsm_1(out, user_input, clk, rst_n); \n\tinput [2:0] user_input; \n\tinput clk, rst_n; \n\toutput reg [2:0] out; \n\treg [1:0] state; \n\talways @ (posedge clk or negedge rst_n ) \n\t\tbegin \n\t\t\t if (!rst_n)\n\t\t\t\t state = 3'h0; \n\t\t\t else\n\t\t\t case (user_input) \n\t\t\t\t 3'h0:\n\t\t\t\t 3'h1:\n\t\t\t\t 3'h2:\n\t\t\t\t 3'h3: state = 2'h3;\n\t\t\t\t 3'h4: state = 2'h2;\n\t\t\t\t 3'h5: state = 2'h1;\n\t\t\t endcase \n\t\t end\n\t\t out <= {1'h1, state};\n\t endmodule \n```"
            },
            {
              "BodyText": "The case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7. Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.\n\n\nAdding a default statement to handle undefined inputs mitigates this issue. This is shown in the \"Good\" code snippet below. The default statement is in bold."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\tcase (user_input) \n\t\t3'h0: \n\t\t3'h1: \n\t\t3'h2: \n\t\t3'h3: state = 2'h3; \n\t\t3'h4: state = 2'h2; \n\t\t3'h5: state = 2'h1; \n```\ndefault: state = 2'h0;**  endcase"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "74"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1060",
          "Authors": [
            "Farimah Farahmandi",
            "Prabhat Mishra"
          ],
          "Title": "FSM Anomaly Detection using Formal Analysis",
          "URL": "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8119228&tag=1"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1246",
      "Name": "Improper Write Handling in Limited-write Non-Volatile Memories",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.",
      "ExtendedDescription": "\n\nNon-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "400",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Storage Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Instability"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Testing"
          ],
          "Description": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "An attacker can render a memory line unusable by repeatedly causing a write to the memory line."
            },
            {
              "BodyText": "Below is example code from [REF-1058] that the user can execute repeatedly to cause line failure. W is the maximum associativity of any cache in the system; S is the size of the largest cache in the system."
            },
            {
              "Nature": "Attack",
              "Language": "C++",
              "ExampleCode": "// Do aligned alloc of (W+1) arrays each of size S\n while(1) {\n\n```\n\t for (ii = 0; ii < W + 1; ii++)\n\t\t array[ii].element[0]++;\n }\n```"
            },
            {
              "BodyText": "Without wear leveling, the above attack will be successful. Simple randomization of blocks will not suffice as instead of the original physical block, the randomized physical block will be worn out."
            },
            {
              "Nature": "Good",
              "ExampleCode": "```\n\tWear leveling must be used to even out writes to the device.\n```"
            }
          ]
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SD-4"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SI-1"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SVV-3"
        }
      ],
      "RelatedAttackPatterns": [
        "212"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1058",
          "Authors": [
            "Moinuddin Qureshi",
            "Michele Franchescini",
            "Vijayalakshmi Srinivasan",
            "Luis Lastras",
            "Bulent Abali",
            "John Karidis"
          ],
          "Title": "Enhancing Lifetime and Security of PCM-Based Main Memory with Start-Gap Wear Leveling",
          "URL": "https://researcher.watson.ibm.com/researcher/files/us-moinqureshi/papers-sgap.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1059",
          "Authors": [
            "Micron"
          ],
          "Title": "Bad Block Management in NAND Flash Memory",
          "URL": "https://www.micron.com/-/media/client/global/documents/products/technical-note/nand-flash/tn2959_bbm_in_nand_flash.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1247",
      "Name": "Improper Protection Against Voltage and Clock Glitches",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
      "ExtendedDescription": "\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1384",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Power Management Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Clock/Counter Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Sensor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Operation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Read Memory",
            "Modify Memory",
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "\n\nPut the processor in an infinite loop, which is then followed by instructions that should not ever be executed, since the loop is not expected to exit. After the loop, toggle an I/O bit (for oscilloscope monitoring purposes), print a console message, and reenter the loop. Note that to ensure that the loop exit is actually captured, many NOP instructions should be coded after the loop branch instruction and before the I/O bit toggle and the print statement.\n\n\nMargining the clock consists of varying the clock frequency until an anomaly occurs. This could be a continuous frequency change or it could be a single cycle. The single cycle method is described here. For every 1000th clock pulse, the clock cycle is shortened by 10 percent. If no effect is observed, the width is shortened by 20%. This process is continued in 10% increments up to and including 50%. Note that the cycle time may be increased as well, down to seconds per cycle.\n\n\nSeparately, the voltage is margined. Note that the voltage could be increased or decreased. Increasing the voltage has limits, as the circuitry may not be able to withstand a drastically increased voltage. This process starts with a 5% reduction of the DC supply to the CPU chip for 5 millisecond repeated at 1KHz. If this has no effect, the process is repeated, but a 10% reduction is used. This process is repeated at 10% increments down to a 50% reduction. If no effects are observed at 5 millisecond, the whole process is repeated using a 10 millisecond pulse. If no effects are observed, the process is repeated in 10 millisecond increments out to 100 millisecond pulses.\n\n\nWhile these are suggested starting points for testing circuitry for weaknesses, the limits may need to be pushed further at the risk of device damage. See [REF-1217] for descriptions of Smart Card attacks against a clock (section 14.6.2) and using a voltage glitch (section 15.5.3).\n",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks."
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\"."
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nAt the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "...\n if (signature_matches) // <-Glitch Here\n {\n\n```\n\t load_runtime_firmware();\n }\n else\n {\n\t do_not_load_runtime_firmware();\n }\n ...\n```"
            },
            {
              "BodyText": "After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access."
            },
            {
              "Nature": "Good",
              "ExampleCode": "```\n\tIf the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful.\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-17391",
          "Description": "Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-17391"
        },
        {
          "Reference": "CVE-2021-33478",
          "Description": "IP communication firmware allows access to a boot shell via certain impulses",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33478"
        }
      ],
      "FunctionalAreas": [
        "Power",
        "Clock"
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1061",
          "Authors": [
            "Keith Bowman",
            "James Tschanz",
            "Chris Wilkerson",
            "Shih-Lien Lu",
            "Tanay Karnik",
            "Vivek De",
            "Shekhar Borkar"
          ],
          "Title": "Circuit Techniques for Dynamic Variation Tolerance",
          "URL": "https://dl.acm.org/doi/10.1145/1629911.1629915",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1062",
          "Authors": [
            "Dan Ernst",
            "Nam Sung Kim",
            "Shidhartha Das",
            "Sanjay Pant",
            "Rajeev Rao",
            "Toan Pham",
            "Conrad Ziesler",
            "David Blaauw",
            "Todd Austin",
            "Krisztian Flautner",
            "Trevor Mudge"
          ],
          "Title": "Razor: A Low-Power Pipeline Based on Circuit-Level Timing Speculation",
          "URL": "https://web.eecs.umich.edu/~taustin/papers/MICRO36-Razor.pdf"
        },
        {
          "ExternalReferenceID": "REF-1063",
          "Authors": [
            "James Tschanz",
            "Keith Bowman",
            "Steve Walstra",
            "Marty Agostinelli",
            "Tanay Karnik",
            "Vivek De"
          ],
          "Title": "Tunable Replica Circuits and Adaptive Voltage-Frequency Techniques for Dynamic Voltage, Temperature, and Aging Variation Tolerance",
          "URL": "https://ieeexplore.ieee.org/document/5205410"
        },
        {
          "ExternalReferenceID": "REF-1064",
          "Authors": [
            "Bilgiday Yuce",
            "Nahid F. Ghalaty",
            "Chinmay Deshpande",
            "Conor Patrick",
            "Leyla Nazhandali",
            "Patrick Schaumont"
          ],
          "Title": "FAME: Fault-attack Aware Microprocessor Extensions for Hardware Fault Detection and Software Fault Response",
          "URL": "https://dl.acm.org/doi/10.1145/2948618.2948626",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1065",
          "Authors": [
            "Keith A. Bowman",
            "James W. Tschanz",
            "Shih-Lien L. Lu",
            "Paolo A. Aseron",
            "Muhammad M. Khellah",
            "Arijit Raychowdhury",
            "Bibiche M. Geuskens",
            "Carlos Tokunaga",
            "Chris B. Wilkerson",
            "Tanay Karnik",
            "Vivek De"
          ],
          "Title": "A 45 nm Resilient Microprocessor Core for Dynamic Variation Tolerance",
          "URL": "https://ieeexplore.ieee.org/document/5654663"
        },
        {
          "ExternalReferenceID": "REF-1066",
          "Authors": [
            "Niek Timmers",
            "Albert Spruyt"
          ],
          "Title": "Bypassing Secure Boot Using Fault Injection",
          "URL": "https://www.blackhat.com/docs/eu-16/materials/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-Injection.pdf"
        },
        {
          "ExternalReferenceID": "REF-1217",
          "Section": "14.6.2 Security Evolution, page 291",
          "Authors": [
            "Ross Anderson"
          ],
          "Title": "Security Engineering",
          "PublicationYear": "2001",
          "URL": "https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf"
        },
        {
          "ExternalReferenceID": "REF-1217",
          "Section": "15.5.3 Glitching, page 317",
          "Authors": [
            "Ross Anderson"
          ],
          "Title": "Security Engineering",
          "PublicationYear": "2001",
          "URL": "https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf"
        },
        {
          "ExternalReferenceID": "REF-1081",
          "Authors": [
            "Kit Murdock",
            "David Oswald",
            "Flavio D Garcia",
            "Jo Van Bulck",
            "Frank Piessens",
            "Daniel Gruss"
          ],
          "Title": "Plundervolt",
          "URL": "https://plundervolt.com/"
        },
        {
          "ExternalReferenceID": "REF-1082",
          "Authors": [
            "Adrian Tang",
            "Simha Sethumadhavan",
            "Salvatore Stolfo"
          ],
          "Title": "CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management",
          "URL": "https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf"
        },
        {
          "ExternalReferenceID": "REF-1285",
          "Authors": [
            "Texas Instruments"
          ],
          "Title": "Physical Security Attacks Against Silicon Devices",
          "PublicationYear": "2022",
          "PublicationMonth": "01",
          "PublicationDay": "31",
          "URL": "https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420"
        },
        {
          "ExternalReferenceID": "REF-1286",
          "Section": "1.2 / 4",
          "Authors": [
            "Lennert Wouters",
            "Benedikt Gierlichs",
            "Bart Preneel"
          ],
          "Title": "On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "14",
          "URL": "https://eprint.iacr.org/2022/328.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1248",
      "Name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The security-sensitive hardware module contains semiconductor defects.",
      "ExtendedDescription": "\n\nA semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Manufacturing",
          "Note": "May be introduced due to issues in the manufacturing environment or improper handling of components, for example."
        },
        {
          "Phase": "Operation",
          "Note": "May be introduced by improper handling or usage outside of rated operating environments (temperature, humidity, etc.)"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "DoS: Instability"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Testing"
          ],
          "Description": "\n\nWhile semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.\n"
        },
        {
          "Phase": [
            "Operation"
          ],
          "Description": "\n\nOperating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The network-on-chip implements a firewall for access control to peripherals from all IP cores capable of mastering transactions."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\tA manufacturing defect in this logic manifests itself as a logical fault, which always sets the output of the filter to \"allow\" access.\n```"
            },
            {
              "BodyText": "Post-manufacture testing must be performed to ensure that hardware logic implementing security functionalities is defect-free."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1067",
          "Authors": [
            "Brian Bailey"
          ],
          "Title": "Why Chips Die",
          "URL": "https://semiengineering.com/why-chips-die/"
        },
        {
          "ExternalReferenceID": "REF-1068",
          "Authors": [
            "V. Lakshminarayan"
          ],
          "Title": "What causes semiconductor devices to fail",
          "URL": "Original",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1249",
      "Name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",
      "ExtendedDescription": "\n\nMany products provide web-based applications or other interfaces for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems. When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.\n\n\nFor example, numerous systems utilize a web front-end for administrative control. They also offer the ability to add, alter, and drop users with various privileges as it relates to the functionality of the system. A potential architectural weakness may exist where the user information reflected in the web interface does not mirror the users in the underlying operating system. Many web UI or REST APIs use the underlying operating system for authentication; the system's logic may also track an additional set of user capabilities within configuration files and datasets for authorization capabilities. When there is a discrepancy between the user information in the UI or REST API's interface system and the underlying operating system's user listing, this may introduce a weakness into the system. For example, if an attacker compromises the OS and adds a new user account - a \"ghost\" account - then the attacker could escape detection if the management tool does not list the newly-added account.\n\n\nThis discrepancy could be exploited in several ways:\n\n\n  - A rogue admin could insert a new account into a system that will persist if they are terminated or wish to take action on a system that cannot be directly associated with them.\n\n  - An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh.\n\n  - An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all.\n\n  - An attacker could create an admin account which is viewable by an administrator, use this account to create the ghost account, delete logs and delete the first created admin account.\n\nMany of these attacker scenarios can be realized by leveraging separate vulnerabilities related to XSS, command injection, authentication bypass, or logic flaws on the various systems. ",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1250",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Web Based",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "Ghost in the Shell"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The design might assume that the underlying OS does not change."
        },
        {
          "Phase": "Implementation",
          "Note": "Assumptions about the underlying OS might be hard-coded into the application or otherwise in external data stores in a way that is not updated when the OS's state changes."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Varies by Context"
          ]
        },
        {
          "Scope": [
            "Accountability"
          ],
          "Impact": [
            "Hide Activities"
          ]
        },
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Unexpected State"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nEnsure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Suppose that an attacker successfully gains root privileges on a Linux system and adds a new 'user2' account:"
            },
            {
              "Nature": "Attack",
              "Language": "Other",
              "ExampleCode": "```\n\techo \"user2:x:0:0::/root:/\" >> /etc/passwd;\n\techo \"user2:\\$6\\$IdvyrM6VJnG8Su5U\\$1gmW3Nm.IO4vxTQDQ1C8urm72JCadOHZQwqiH/nRtL8dPY80xS4Ovsv5bPCMWnXKKWwmsocSWXupUf17LB3oS.:17256:0:99999:7:::\" >> /etc/shadow;\n```"
            },
            {
              "BodyText": "This new user2 account would not be noticed on the web interface, if the interface does not refresh its data of available users."
            },
            {
              "BodyText": "It could be argued that for this specific example, an attacker with root privileges would be likely to compromise the admin tool or otherwise feed it with false data. However, this example shows how the discrepancy in critical data can help attackers to escape detection."
            }
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1070",
          "Authors": [
            "Tony Martin"
          ],
          "Title": "Ghost in the Shell Weakness",
          "PublicationYear": "2020",
          "PublicationMonth": "02",
          "PublicationDay": "13",
          "URL": "https://friendsglobal.com/ghost-in-the-shell/ghost-in-the-shell-weakness/",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1250",
      "Name": "Improper Preservation of Consistency Between Independent Representations of Shared State",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.",
      "ExtendedDescription": "\n\nIn highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same \"view\" of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same \"view\" of the world. Alternately, a processor's Memory Management Unit (MMU) might have \"shadow\" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.\n\n\nIn such environments, it becomes critical for the product to ensure that this \"shared state\" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "664",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Cloud Computing",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Security Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-132",
          "Entries": [
            {
              "IntroText": "Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."
            },
            {
              "BodyText": "Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."
            }
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1069",
          "Authors": [
            "Tanakorn Leesatapornwongsa",
            "Jeffrey F. Lukman",
            "Shan Lu",
            "Haryadi S. Gunawi"
          ],
          "Title": "TaxDC: A Taxonomy of Non-Deterministic Concurrency Bugs\n\t\t\t\tin Datacenter Distributed Systems",
          "PublicationYear": "2016",
          "URL": "https://ucare.cs.uchicago.edu/pdf/asplos16-TaxDC.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Research Gap",
          "Note": "Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It likely has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems."
        }
      ]
    },
    {
      "ID": "1251",
      "Name": "Mirrored Regions with Different Values",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product's architecture mirrors regions without ensuring that their contents always stay in sync.",
      "ExtendedDescription": "\n\nHaving mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise.\n\n\nIn the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a \"local\" copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true.\n\n\nDuring hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called \"shadow copies\" or \"mirrored copies.\"\n\n\nIf the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast.\n\n\nThis situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: \n\n\n  - After the values in the original copy change, due to some reason the original copy does not send the \"update\" request to its shadow copies.\n\n  - After the values in the original copy change, the original copy dutifully sends the \"update\" request to its shadow copies, but due to some reason the shadow copy does not \"execute\" this update request.\n\n  - After the values in the original copy change, the original copy sends the \"update\" request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has \"new\" values and the shadow copy is still holding the \"old\" values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins.\n\n  - The attacker might send a \"spoofed\" update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker.\n\n  - Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the \"old\" value, and the shadow copy has the \"new\" value.\n\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1250",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nWhenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are:\n\n\n  - Make this out-of-sync time period as small as possible, and\n\n  - Make the update process as robust as possible.\n\n",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-132",
          "Entries": [
            {
              "IntroText": "Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."
            },
            {
              "BodyText": "Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."
            }
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Research Gap",
          "Note": "Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems."
        }
      ]
    },
    {
      "ID": "1252",
      "Name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.",
      "ExtendedDescription": "\n\nCPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nImplement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).\n"
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "\n\nIf MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "MCS51 Microcontroller (based on 8051) does not have a special bit to support write exclusivity. It also does not have an MMU/MPU support. The Cortex-M CPU has an optional MPU that supports up to 8 regions."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\tThe optional MPU is not configured.\n```"
            },
            {
              "BodyText": "If the MPU is not configured, then an attacker will be able to inject malicious data into memory and execute it."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "679"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1076",
          "Authors": [
            "ARM"
          ],
          "Title": "Cortex-R4 Manual",
          "URL": "https://developer.arm.com/Processors/Cortex-M4",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1077",
          "Authors": [
            "Intel"
          ],
          "Title": "MCS 51 Microcontroller Family User's Manual",
          "URL": "http://web.mit.edu/6.115/www/document/8051.pdf"
        },
        {
          "ExternalReferenceID": "REF-1078",
          "Authors": [
            "ARM"
          ],
          "Title": "Memory Protection Unit (MPU)",
          "URL": "https://web.archive.org/web/20200630034848/https://static.docs.arm.com/100699/0100/armv8m_architecture_memory_protection_unit_100699_0100_00_en.pdf",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1253",
      "Name": "Incorrect Selection of Fuse Values",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.",
      "ExtendedDescription": "\n\nFuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control",
            "Authorization"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Gain Privileges or Assume Identity"
          ]
        },
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart"
          ]
        },
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ]
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Memory",
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A chip implements a secure boot and uses the sensed value of a fuse \"do_secure_boot\" to determine whether to perform a secure boot or not. If this fuse value is \"0\", the system performs secure boot. Otherwise, it does not perform secure boot.\n\n\nAn attacker blows the \"do_secure_boot\" fuse to \"1\". After reset, the attacker loads a custom bootloader, and, since the fuse value is now \"1\", the system does not perform secure boot, and the attacker can execute their custom firmware image.\n\n\nSince by default, a fuse-configuration value is a \"0\", an attacker can blow it to a \"1\" with inexpensive hardware.\n\n\nIf the logic is reversed, an attacker cannot easily reset the fuse. Note that, with specialized and expensive equipment, an attacker with full physical access might be able to \"unblow\" the fuse value to a \"0\"."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "74"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1080",
          "Authors": [
            "Christopher Tarnovsky"
          ],
          "Title": "Security Failures in Secure Devices",
          "URL": "https://www.blackhat.com/presentations/bh-europe-08/Tarnovsky/Presentation/bh-eu-08-tarnovsky.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1254",
      "Name": "Incorrect Comparison Logic Granularity",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.",
      "ExtendedDescription": "\n\nComparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "208",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "697",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Authorization"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nThe hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-173",
          "Entries": [
            {
              "IntroText": "Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "always_comb @ (posedge clk)\n\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 - 1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t break;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"
            },
            {
              "BodyText": "Since the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts."
            },
            {
              "BodyText": "To fix this weakness, either the comparison of the entire string should be done all at once, or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set."
            },
            {
              "Nature": "Good",
              "ExampleCode": "always_comb @ (posedge clk)\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 -1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t continue;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-10482",
          "Description": "Smartphone OS uses comparison functions that are not in constant time, allowing side channels",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10482"
        },
        {
          "Reference": "CVE-2019-10071",
          "Description": "Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10071"
        },
        {
          "Reference": "CVE-2014-0984",
          "Description": "Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0984"
        }
      ],
      "RelatedAttackPatterns": [
        "26"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1079",
          "Authors": [
            "Joe Fitzpatrick"
          ],
          "Title": "SCA4n00bz - Timing-based Sidechannel Attacks for Hardware N00bz workshop",
          "URL": "https://github.com/securelyfitz/SCA4n00bz"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1255",
      "Name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.",
      "ExtendedDescription": "\n\nThe power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1300",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1259",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The design of the algorithm itself may intrinsically allow the power side channel attack to be effective"
        },
        {
          "Phase": "Implementation",
          "Note": "This weakness may be introduced during implementation despite a robust design that otherwise prevents exploitation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Read Files or Directories",
            "Modify Files or Directories",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Read Application Data",
            "Modify Application Data",
            "Hide Activities"
          ],
          "Note": "As compromising a security token may result in complete system control, the impacts are relatively universal."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider an example hardware module that checks a user-provided password (or PIN) to grant access to a user. The user-provided password is compared against a stored value byte-by-byte."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "static nonvolatile password_tries = NUM_RETRIES;\n do\n\n```\n\t while (password_tries == 0) ; // Hang here if no more password tries\n\t password_ok = 0;\n\t for (i = 0; i < NUM_PW_DIGITS; i++)\n\t\t if (GetPasswordByte() == stored_password([i])\n\t\t\t password_ok |= 1; // Power consumption is different here\n\t\t else\n\t\t\t password_ok |= 0; // than from here\n\t end\n\t if (password_ok > 0)\n\t\t password_tries = NUM_RETRIES;\n\t\t break_to_Ok_to_proceed\n\t password_tries--;\n while (true)\n // Password OK\n```"
            },
            {
              "BodyText": "Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes."
            },
            {
              "BodyText": "Among various options for mitigating the string comparison is obscuring the power consumption by having opposing bit flips during bit operations. Note that in this example, the initial change of the bit values could still provide power indication depending upon the hardware itself. This possibility needs to be measured for verification."
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "static nonvolatile password_tries = NUM_RETRIES;\n do\n\n```\n\t while (password_tries == 0) ; // Hang here if no more password tries\n\t password_tries--; // Put retry code here to catch partial retries\n\t password_ok = 0;\n\t for (i = 0; i < NUM_PW_DIGITS; i++)\n\t\t if (GetPasswordByte() == stored_password([i])\n\t\t\t password_ok |= 0x10; // Power consumption here\n\t\t else\n\t\t\t password_ok |= 0x01; // is now the same here\n\t end\n\t if ((password_ok & 1) == 0)\n\t\t password_tries = NUM_RETRIES;\n\t\t break_to_Ok_to_proceed\n while (true)\n // Password OK\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "This code demonstrates the transfer of a secret key using Serial-In/Serial-Out shift. It's easy to extract the secret using simple power analysis as each shift gives data on a single bit of the key."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module siso(clk,rst,a,q);\n\n```\n\t input a;\n\t input clk,rst;\n\t output q;\n\t reg q;\n\t always@(posedge clk,posedge rst)\n\t begin\n\t\t if(rst==1'b1)\n\t\t\t q<1'b0;\n\t\t else\n\t\t\t q<a;\n\t end\n endmodule\n```"
            },
            {
              "BodyText": "This code demonstrates the transfer of a secret key using a Parallel-In/Parallel-Out shift. In a parallel shift, data confounded by multiple bits of the key, not just one."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module pipo(clk,rst,a,q);\n\n```\n\t input clk,rst;\n\t input[3:0]a;\n\t output[3:0]q;\n\t reg[3:0]q;\n\t always@(posedge clk,posedge rst)\n\t begin\n\t\t if (rst==1'b1)\n\t\t\t q<4'b0000;\n\t\t else\n\t\t\t q<a;\n\t end\n endmodule\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-12788",
          "Description": "CMAC verification vulnerable to timing and power attacks.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12788"
        }
      ],
      "FunctionalAreas": [
        "Power"
      ],
      "RelatedAttackPatterns": [
        "189"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1184",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Power Analysis",
          "URL": "https://en.wikipedia.org/wiki/Power_analysis"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1256",
      "Name": "Improper Restriction of Software Interfaces to Hardware Features",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.",
      "ExtendedDescription": "\n\nIt is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.\n\n\nFault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).\n\n\nSide channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "285",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Power Management Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Clock/Counter Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "An architect may initiate introduction of this weakness via exacting requirements for software accessible power/clock management requirements"
        },
        {
          "Phase": "Implementation",
          "Note": "An implementer may introduce this weakness by assuming there are no consequences to unbounded power and clock management for secure components from untrusted ones."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Memory",
            "Modify Application Data",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Perform a security evaluation of system-level architecture and design with software-aided physical attacks in scope."
        },
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "\n\nUse custom software to change registers that control clock settings or power settings to try to bypass security locks, or repeatedly write DRAM to try to change adjacent locations. This can be effective in extracting or changing data. The drawback is that it cannot be run before manufacturing, and it may require specialized software.\n",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nEnsure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example considers the Rowhammer problem [REF-1083]. The Rowhammer issue was caused by a program in a tight loop writing repeatedly to a location to which the program was allowed to write but causing an adjacent memory location value to change."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "Continuously writing the same value to the same address causes the value of an adjacent location to change value."
            },
            {
              "BodyText": "Preventing the loop required to defeat the Rowhammer exploit is not always possible:"
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "Redesign the RAM devices to reduce inter capacitive coupling making the Rowhammer exploit impossible."
            },
            {
              "BodyText": "While the redesign may be possible for new devices, a redesign is not possible in existing devices. There is also the possibility that reducing capacitance with a relayout would impact the density of the device resulting in a less capable, more costly device."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Suppose a hardware design implements a set of software-accessible registers for scaling clock frequency and voltage but does not control access to these registers. Attackers may cause register and memory changes and race conditions by changing the clock or voltage of the device under their control."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Consider the following SoC design. Security-critical settings for scaling clock frequency and voltage are available in a range of registers bounded by [PRIV_END_ADDR : PRIV_START_ADDR] in the tmcu.csr module in the HW Root of Trust. These values are writable based on the lock_bit register in the same module. The lock_bit is only writable by privileged software running on the tmcu."
            },
            {
              "BodyText": "We assume that untrusted software running on any of the Core{0-N} processors has access to the input and output ports of the hrot_iface. If untrusted software can clear the lock_bit or write the clock frequency and voltage registers due to inadequate protection, a fault injection attack could be performed."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-11157",
          "Description": "Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access [REF-1081].",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-11157"
        },
        {
          "Reference": "CVE-2020-8694",
          "Description": "PLATYPUS Attack: Insufficient access control in the Linux kernel driver for some Intel processors allows information disclosure.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8694"
        },
        {
          "Reference": "CVE-2020-8695",
          "Description": "Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8695"
        },
        {
          "Reference": "CVE-2020-12912",
          "Description": "AMD extension to a Linux service does not require privileged access to the RAPL interface, allowing side-channel attacks.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12912"
        },
        {
          "Reference": "CVE-2015-0565",
          "Description": "NaCl in 2015 allowed the CLFLUSH instruction, making Rowhammer attacks possible.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-0565"
        }
      ],
      "FunctionalAreas": [
        "Power",
        "Clock"
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1081",
          "Authors": [
            "Kit Murdock",
            "David Oswald",
            "Flavio D Garcia",
            "Jo Van Bulck",
            "Frank Piessens",
            "Daniel Gruss"
          ],
          "Title": "Plundervolt",
          "URL": "https://plundervolt.com/"
        },
        {
          "ExternalReferenceID": "REF-1082",
          "Authors": [
            "Adrian Tang",
            "Simha Sethumadhavan",
            "Salvatore Stolfo"
          ],
          "Title": "CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management",
          "URL": "https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf"
        },
        {
          "ExternalReferenceID": "REF-1083",
          "Authors": [
            "Yoongu Kim",
            "Ross Daly",
            "Jeremie Kim",
            "Ji Hye Lee",
            "Donghyuk Lee",
            "Chris Wilkerson",
            "Konrad Lai",
            "Onur Mutlu"
          ],
          "Title": "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors",
          "URL": "https://users.ece.cmu.edu/~yoonguk/papers/kim-isca14.pdf"
        },
        {
          "ExternalReferenceID": "REF-1225",
          "Authors": [
            "Project Zero"
          ],
          "Title": "Exploiting the DRAM rowhammer bug to gain kernel privileges",
          "PublicationYear": "2015",
          "PublicationMonth": "03",
          "PublicationDay": "09",
          "URL": "https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html"
        },
        {
          "ExternalReferenceID": "REF-1217",
          "Authors": [
            "Ross Anderson"
          ],
          "Title": "Security Engineering",
          "PublicationYear": "2001",
          "URL": "https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1257",
      "Name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\t\t\t",
      "ExtendedDescription": "\n\nHardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO).\n\n\nEach memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell.\n\n\nThis is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address.\n\n\nA common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory.\n\n\nAn untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "119",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Network on Chip Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ]
        },
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Instability"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "In a System-on-a-Chip (SoC) design the system fabric uses 16 bit addresses. An IP unit (Unit_A) has 4 kilobyte of internal memory which is mapped into a 16 kilobyte address range in the system fabric address map.\n\n|  | \n|\n|  System Address  |  Mapped to   |\n|  0x0000 - 0x3FFF  |  Unit_A registers : 0x0000 - 0x0FFF   |\n|  0x4000 - 0xFFFF  |  Other IPs & Memory   |\n\n\t\n To protect the register controls in Unit_A unprivileged software is blocked from accessing addresses between 0x0000 - 0x0FFF. \n\n\t\n The address decoder of Unit_A masks off the higher order address bits and decodes only the lower 12 bits for computing the offset into the 4 kilobyte internal memory space."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "In this design the aliased memory address ranges are these:\n\n\n\n0x0000 - 0x0FFF\n\n\n0x1000 - 0x1FFF\n\n\n0x2000 - 0x2FFF\n\n\n0x3000 - 0x3FFF\n\n\n The same register can be accessed using four different addresses: 0x0000, 0x1000, 0x2000, 0x3000. \n\n\n The system address filter only blocks access to range 0x0000 - 0x0FFF and does not block access to the aliased addresses in 0x1000 - 0x3FFF range. Thus, untrusted software can leverage the aliased memory addresses to bypass the memory protection."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "In this design the aliased memory addresses (0x1000 - 0x3FFF) could be blocked from all system software access since they are not used by software. \n\n\n Alternately, the MPU logic can be changed to apply the memory protection policies to the full address range mapped to Unit_A (0x0000 - 0x3FFF)."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "456",
        "679"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1258",
      "Name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.",
      "ExtendedDescription": "\n\nSecurity sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "212",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "200",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ]
        },
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nWhenever debug mode is enabled, all registers containing sensitive assets must be cleared.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A cryptographic core in a System-On-a-Chip (SoC) is used for cryptographic acceleration and implements several cryptographic operations (e.g., computation of AES encryption and decryption, SHA-256, HMAC, etc.). The keys for these operations or the intermediate values are stored in registers internal to the cryptographic core. These internal registers are in the Memory Mapped Input Output (MMIO) space and are blocked from access by software and other untrusted agents on the SoC. These registers are accessible through the debug and test interface."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "In the above scenario, registers that store keys and intermediate values of cryptographic operations are not cleared when system enters debug mode. An untrusted actor running a debugger may read the contents of these registers and gain access to secret keys and other sensitive cryptographic information."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "Whenever the chip enters debug mode, all registers containing security-sensitive data are be cleared rendering them unreadable."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The following code example is extracted from the AES wrapper module, aes1_wrapper, of the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this wrapper module are four memory-mapped registers: core_key, core_key0, core_key1, and core_key2. Core_key0, core_key1, and core_key2 hold encryption/decryption keys. The core_key register selects a key and sends it to the underlying AES module to execute encryption/decryption operations.\n\n\nDebug mode in processors and SoCs facilitates design debugging by granting access to internal signal/register values, including physical pin values of peripherals/core, fabric bus data transactions, and inter-peripheral registers. Debug mode allows users to gather detailed, low-level information about the design to diagnose potential issues. While debug mode is beneficial for diagnosing processors or SoCs, it also introduces a new attack surface for potential attackers. For instance, if an attacker gains access to debug mode, they could potentially read any content transmitted through the fabric bus or access encryption/decryption keys stored in cryptographic peripherals.\n\n\nTherefore, it is crucial to clear the contents of secret registers upon entering debug mode. In the provided example of flawed code below, when debug_mode_i is activated, the register core_key0 is set to zero to prevent AES key leakage during debugging. However, this protective measure is not applied to the core_key1 register [REF-1435], leaving its contents uncleared during debug mode. This oversight enables a debugger to access sensitive information. Failing to clear sensitive data during debug mode may lead to unauthorized access to secret keys and compromise system security."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module aes1_wrapper #(\n ...\n\n```\n\t assign core_key0 = debug_mode_i ? 'b0 : { \n\t\t key_reg0[7],\n\t\t key_reg0[6],\n\t\t key_reg0[5],\n\t\t key_reg0[4],\n\t\t key_reg0[3],\n\t\t key_reg0[2],\n\t\t key_reg0[1],\n\t\t key_reg0[0]};\n```\nassign core_key1 = { ** \n\t\n\t```\n```\nkey_reg1[7],** \n\t\t\n\t\t **key_reg1[6],** \n\t\t\n\t\t **key_reg1[5],** \n\t\t\n\t\t **key_reg1[4],** \n\t\t\n\t\t **key_reg1[3],** \n\t\t\n\t\t **key_reg1[2],** \n\t\t\n\t\t **key_reg1[1],** \n\t\t\n\t\t **key_reg1[0]};** \n\t\t ...\n endmodule"
            },
            {
              "BodyText": "To address the issue, it is essential to ensure that the register is cleared and zeroized after activating debug mode on the SoC. In the correct implementation illustrated in the good code below, core_keyx registers are set to zero when debug mode is activated [REF-1436]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module aes1_wrapper #(\n ...\n\n```\n\t assign core_key0 = debug_mode_i ? 'b0 : { \n\t\t key_reg0[7],\n\t\t key_reg0[6],\n\t\t key_reg0[5],\n\t\t key_reg0[4],\n\t\t key_reg0[3],\n\t\t key_reg0[2],\n\t\t key_reg0[1],\n\t\t key_reg0[0]};\n\t assign core_key1 = \n```\ndebug_mode_i ? 'b0 :**  { \n\t\n\t```\n\t\t key_reg1[7],\n\t\t key_reg1[6],\n\t\t key_reg1[5],\n\t\t key_reg1[4],\n\t\t key_reg1[3],\n\t\t key_reg1[2],\n\t\t key_reg1[1],\n\t\t key_reg1[0]};\n ...\n endmodule\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-33080",
          "Description": "Uncleared debug information in memory accelerator for SSD product exposes sensitive system information",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33080"
        },
        {
          "Reference": "CVE-2022-31162",
          "Description": "Rust library leaks Oauth client details in application debug logs",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-31162"
        }
      ],
      "RelatedAttackPatterns": [
        "150",
        "204",
        "37",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1435",
          "Title": "Bad Code aes1_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/bcae7aba7f9daee8ad2cfd47b997ac7ad6611034/piton/design/chip/tile/ariane/src/aes1/aes1_wrapper.sv#L149:L155"
        },
        {
          "ExternalReferenceID": "REF-1436",
          "Title": "Good Code aes1_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/e3234bb15f07f213de08ec91a9ec08d2a16b5714/piton/design/chip/tile/ariane/src/aes1/aes1_wrapper.sv#L149:L155"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1259",
      "Name": "Improper Restriction of Security Token Assignment",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.",
      "ExtendedDescription": "Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1294",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Files or Directories",
            "Execute Unauthorized Code or Commands",
            "Bypass Protection Mechanism",
            "Gain Privileges or Assume Identity",
            "Modify Memory",
            "Modify Memory",
            "DoS: Crash, Exit, or Restart"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\n  - Security Token assignment review checks for design inconsistency and common weaknesses.\n\n  - Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.\n\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "For example, consider a system with a register for storing an AES key for encryption and decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key register assets have an associated control register, AES_KEY_ACCESS_POLICY, which provides the necessary access controls. This access-policy register defines which agents may engage in a transaction, and the type of transaction, with the AES-key registers. Each bit in this 32-bit register defines a security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent."
            },
            {
              "BodyText": "Let's assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". \n| Register | Description | Default | \n| --- | --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption | 0x00000000  |\n| AES_KEY_ACCESS_POLICY | AES key access register [31:0] | 0x00000002  |"
            },
            {
              "BodyText": "An agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\"."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The Aux-controller could program its Security Token to \"1\" from \"2\"."
            },
            {
              "BodyText": "The SoC does not properly protect the Security Token of the agents, and, hence, the Aux-controller in the above example can spoof the transaction (i.e., send the transaction as if it is coming from the Main-controller to access the AES-Key registers)"
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The SoC needs to protect the Security Tokens. None of the agents in the SoC should have the ability to change the Security Token."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "681"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements. Currently it is expressed as a general absence of a protection mechanism as opposed to a specific mistake, and the entry's name and description could be interpreted as applying to software."
        }
      ]
    },
    {
      "ID": "1260",
      "Name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
      "ExtendedDescription": "\n\nIsolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.\n\n\nIf a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "119",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        },
        {
          "Ordinality": "Resultant"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design or implementation and identified later during the Testing phase."
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Instability"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nEnsure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nFor all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.\n\n\nFor example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software.\n\n\nHardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. \n\n\nThe memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "For example, consider a design with a 16-bit address that has two software privilege levels: Privileged_SW and Non_privileged_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, and Region_2.\n\n\nEach region is defined by two 32 bit registers: its range and its access policy.\n\n\n  - Address_range[15:0]: specifies the Base address of the region\n\n  - Address_range[31:16]: specifies the size of the region\n\n  - Access_policy[31:0]: specifies what types of software can access a region and which actions are allowed\n\nCertain bits of the access policy are defined symbolically as follows:\n\n  - Access_policy.read_np: if set to one, allows reads from Non_privileged_SW\n\n  - Access_policy.write_np: if set to one, allows writes from Non_privileged_SW\n\n  - Access_policy.execute_np: if set to one, allows code execution by Non_privileged_SW\n\n  - Access_policy.read_p: if set to one, allows reads from Privileged_SW\n\n  - Access_policy.write_p: if set to one, allows writes from Privileged_SW\n\n  - Access_policy.execute_p: if set to one, allows code execution by Privileged_SW\n\nFor any requests from software, an address-protection filter checks the address range and access policies for each of the three regions, and only allows software access if all three filters allow access.\n\nConsider the following goals for access control as intended by the designer:\n\n\n  - Region_0 & Region_1: registers are programmable by Privileged_SW\n\n  - Region_2: registers are programmable by Non_privileged_SW\n\nThe intention is that Non_privileged_SW cannot modify memory region and policies defined by Privileged_SW in Region_0 and Region_1. Thus, it cannot read or write the memory regions that Privileged_SW is using."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "Non_privileged_SW can program the Address_range register for Region_2 so that its address overlaps with the ranges defined by Region_0 or Region_1. Using this capability, it is possible for Non_privileged_SW to block any memory region from being accessed by Privileged_SW, i.e., Region_0 and Region_1."
            },
            {
              "BodyText": "This design could be improved in several ways."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Ensure that software accesses to memory regions are only permitted if all three filters permit access. Additionally, the scheme could define a memory region priority to ensure that Region_2 (the memory region defined by Non_privileged_SW) cannot overlap Region_0 or Region_1 (which are used by Privileged_SW)."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from the IOMMU controller module of the HACK@DAC'19 buggy CVA6 SoC [REF-1338]. The static memory map is composed of a set of Memory-Mapped Input/Output (MMIO) regions covering different IP agents within the SoC. Each region is defined by two 64-bit variables representing the base address and size of the memory region (XXXBase and XXXLength)."
            },
            {
              "BodyText": "In this example, we have 12 IP agents, and only 4 of them are called out for illustration purposes in the code snippets. Access to the AES IP MMIO region is considered privileged as it provides access to AES secret key, internal states, or decrypted data."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\t... \n\t\t localparam logic[63:0] PLICLength = 64'h03FF_FFFF;\n```\nlocalparam logic[63:0] UARTLength = 64'h0011_1000;** \n\t\t\n\t\t **localparam logic[63:0] AESLength = 64'h0000_1000;** \n\t\t localparam logic[63:0] SPILength = 64'h0080_0000;\n\t\t\n\t```\n\t\t...\n\t\t typedef enum logic [63:0] {\n\t\t\t ...\n\t\t\t PLICBase = 64'h0C00_0000,\n```\nUARTBase = 64'h1000_0000,** \n\t\t\t\n\t\t\t **AESBase = 64'h1010_0000,** \n\t\t\t SPIBase = 64'h2000_0000,\n\t\t\t ..."
            },
            {
              "BodyText": "The vulnerable code allows the overlap between the protected MMIO region of the AES peripheral and the unprotected UART MMIO region. As a result, unprivileged users can access the protected region of the AES IP. In the given vulnerable example UART MMIO region starts at address 64'h1000_0000 and ends at address 64'h1011_1000 (UARTBase is 64'h1000_0000, and the size of the region is provided by the UARTLength of 64'h0011_1000)."
            },
            {
              "BodyText": "On the other hand, the AES MMIO region starts at address 64'h1010_0000 and ends at address 64'h1010_1000, which implies an overlap between the two peripherals' memory regions. Thus, any user with access to the UART can read or write the AES MMIO region, e.g., the AES secret key."
            },
            {
              "BodyText": "To mitigate this issue, remove the overlapping address regions by decreasing the size of the UART memory region or adjusting memory bases for all the remaining peripherals. [REF-1339]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\t... \n\t\t localparam logic[63:0] PLICLength = 64'h03FF_FFFF;\n```\nlocalparam logic[63:0] UARTLength = 64'h0000_1000;** \n\t\t localparam logic[63:0] AESLength = 64'h0000_1000;\n\t\t localparam logic[63:0] SPILength = 64'h0080_0000;\n\t\t\n\t```\n\t\t...\n\t\t typedef enum logic [63:0] {\n\t\t\t ...\n\t\t\t PLICBase = 64'h0C00_0000,\n\t\t\t UARTBase = 64'h1000_0000,\n\t\t\t AESBase = 64'h1010_0000,\n\t\t\t SPIBase = 64'h2000_0000,\n\t\t\t ...\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2008-7096",
          "Description": "virtualization product allows compromise of hardware product by accessing certain remapping registers.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7096"
        },
        {
          "Reference": "[REF-1100]",
          "Description": "processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]",
          "Link": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf"
        }
      ],
      "RelatedAttackPatterns": [
        "456",
        "679"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1100",
          "Authors": [
            "Christopher Domas"
          ],
          "Title": "The Memory Sinkhole",
          "PublicationYear": "2015",
          "PublicationMonth": "07",
          "PublicationDay": "20",
          "URL": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf"
        },
        {
          "ExternalReferenceID": "REF-1338",
          "Title": "Hackatdac19 ariane_soc_pkg.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/tb/ariane_soc_pkg.sv#L44:L62",
          "URLDate": "2023-06-21"
        },
        {
          "ExternalReferenceID": "REF-1339",
          "Authors": [
            "Florian Zaruba",
            "Michael Schaffner",
            "Andreas Traber"
          ],
          "Title": "csr_regfile.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/csr_regfile.sv#L45",
          "URLDate": "2023-06-21"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted."
        }
      ]
    },
    {
      "ID": "1261",
      "Name": "Improper Handling of Single Event Upsets",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur.",
      "ExtendedDescription": "\n\nTechnology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1384",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1254",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart",
            "DoS: Instability",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nImplement triple-modular redundancy around security-sensitive modules.\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nSEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This is an example from [REF-1089]. See the reference for full details of this issue."
            },
            {
              "BodyText": "Parity is error detecting but not error correcting."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "Due to single-event upsets, bits are flipped in memories. As a result, memory-parity checks fail, which results in restart and a temporary denial of service of two to three minutes."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "Using error-correcting codes could have avoided the restart caused by SEUs."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "In 2016, a security researcher, who was also a patient using a pacemaker, was on an airplane when a bit flip occurred in the pacemaker, likely due to the higher prevalence of cosmic radiation at such heights. The pacemaker was designed to account for bit flips and went into a default safe mode, which still forced the patient to go to a hospital to get it reset. The bit flip also inadvertently enabled the researcher to access the crash file, perform reverse engineering, and detect a hard-coded key. [REF-1101]"
            }
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1086",
          "Authors": [
            "Fan Wang",
            "Vishwani D. Agrawal"
          ],
          "Title": "Single Event Upset: An Embedded Tutorial",
          "URL": "https://www.eng.auburn.edu/~agrawvd/TALKS/tutorial_6pg.pdf"
        },
        {
          "ExternalReferenceID": "REF-1087",
          "Authors": [
            "P. D. Bradley",
            "E. Normand"
          ],
          "Title": "Single Event Upsets in Implantable Cardioverter Defibrillators",
          "URL": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=736549&tag=1",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1088",
          "Authors": [
            "Melanie Berg",
            "Kenneth LaBel",
            "Jonathan Pellish"
          ],
          "Title": "Single Event Effects in FPGA Devices 2015-2016",
          "URL": "https://ntrs.nasa.gov/search.jsp?R=20160007754"
        },
        {
          "ExternalReferenceID": "REF-1089",
          "Authors": [
            "Cisco"
          ],
          "Title": "Cisco 12000 Single Event Upset Failures Overview and Work Around Summary",
          "URL": "https://www.cisco.com/c/en/us/support/docs/field-notices/200/fn25994.html"
        },
        {
          "ExternalReferenceID": "REF-1090",
          "Authors": [
            "Cypress"
          ],
          "Title": "Different Ways to Mitigate Soft Errors in Asynchronous SRAMs - KBA90939",
          "URL": "https://community.infineon.com/t5/Knowledge-Base-Articles/Different-Ways-to-Mitigate-Soft-Errors-in-Asynchronous-SRAMs-KBA90939/ta-p/257944",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1091",
          "Authors": [
            "Ian Johnston"
          ],
          "Title": "Cosmic particles can change elections and cause plans to fall through the sky, scientists warn",
          "URL": "https://www.independent.co.uk/news/science/subatomic-particles-cosmic-rays-computers-change-elections-planes-autopilot-a7584616.html"
        },
        {
          "ExternalReferenceID": "REF-1101",
          "Authors": [
            "Anders B. Wilhelmsen",
            "Eivind S. Kristiansen",
            "Marie Moe"
          ],
          "Title": "The Hard-coded Key to my Heart - Hacking a Pacemaker Programmer",
          "PublicationYear": "2019",
          "PublicationMonth": "08",
          "PublicationDay": "10",
          "URL": "https://anderbw.github.io/2019-08-10-DC27-Biohacking-pacemaker-programmer.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1262",
      "Name": "Improper Access Control for Register Interface",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.",
      "ExtendedDescription": "\n\nSoftware commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness may be exploited if the register interface design does not adequately protect hardware assets from software."
        },
        {
          "Phase": "Implementation",
          "Note": "Mis-implementation of access control policies may inadvertently allow access to hardware assets through the register interface."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data",
            "Modify Memory",
            "Modify Application Data",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Unexpected State",
            "Alter Execution Logic"
          ],
          "Note": "Confidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "This is applicable in the Architecture phase before implementation started. Make sure access policy is specified for the entire memory map. Manual analysis may not ensure the implementation is correct.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Manual Analysis",
          "Description": "Registers controlling hardware should have access control implemented. This access control may be checked manually for correct implementation. Items to check consist of how are trusted parties set, how are trusted parties verified, how are accesses verified, etc. Effectiveness of a manual analysis will vary depending upon how complicated the interface is constructed.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Simulation / Emulation",
          "Description": "Functional simulation is applicable during the Implementation Phase. Testcases must be created and executed for memory mapped registers to verify adherence to the access control policy. This method can be effective, since functional verification needs to be performed on the design, and verification for this weakness will be included. There can be difficulty covering the entire memory space during the test.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Formal Verification",
          "Description": "Formal verification is applicable during the Implementation phase. Assertions need to be created in order to capture illegal register access scenarios and prove that they cannot occur. Formal methods are exhaustive and can be very effective, but creating the cases for large designs may be complex and difficult.",
          "Effectiveness": "High"
        },
        {
          "Method": "Automated Analysis",
          "Description": "Information flow tracking can be applicable during the Implementation phase. Security sensitive data (assets) - for example, as stored in registers - is automatically tracked over time through the design to verify the data doesn't reach illegal destinations that violate the access policies for the memory map. This method can be very effective when used together with simulation and emulation, since detecting violations doesn't rely on specific scenarios or data values. This method does rely on simulation and emulation, so testcases must exist in order to use this method.",
          "Effectiveness": "High"
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Manual documentation review of the system memory map, register specification, and permissions associated with accessing security-relevant functionality exposed via memory-mapped registers.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Fuzzing",
          "Description": "Perform penetration testing (either manual or semi-automated with fuzzing) to verify that access control mechanisms such as the memory protection units or on-chip bus firewall settings adequately protect critical hardware registers from software access.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Design proper policies for hardware register access from software."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that access control policies for register access are implemented in accordance with the specified design."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The register interface provides software access to hardware functionality. This functionality is an attack surface. This attack surface may be used to run untrusted code on the system through the register interface. As an example, cryptographic accelerators require a mechanism for software to select modes of operation and to provide plaintext or ciphertext data to be encrypted or decrypted as well as other functions. This functionality is commonly provided through registers."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "Cryptographic key material stored in registers inside the cryptographic accelerator can be accessed by software."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Key material stored in registers should never be accessible to software. Even if software can provide a key, all read-back paths to software should be disabled."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the Control/Status Register (CSR) module inside the processor core of the HACK@DAC'19 buggy CVA6 SoC [REF-1340]. In RISC-V ISA [REF-1341], the CSR file contains different sets of registers with different privilege levels, e.g., user mode (U), supervisor mode (S), hypervisor mode (H), machine mode (M), and debug mode (D), with different read-write policies, read-only (RO) and read-write (RW). For example, machine mode, which is the highest privilege mode in a RISC-V system, registers should not be accessible in user, supervisor, or hypervisor modes."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\tif (csr_we || csr_read) begin \n```\nif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl) && !(csr_addr.address==riscv::CSR_MEPC)) begin** \n\t\t\n\t\t```\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end\n\t\t // check access to debug mode only CSRs\n\t\t if (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begin\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end \n\t end \n```"
            },
            {
              "BodyText": "The vulnerable example code allows the machine exception program counter (MEPC) register to be accessed from a user mode program by excluding the MEPC from the access control check. MEPC as per the RISC-V specification can be only written or read by machine mode code. Thus, the attacker in the user mode can run code in machine mode privilege (privilege escalation)."
            },
            {
              "BodyText": "To mitigate the issue, fix the privilege check so that it throws an Illegal Instruction Exception for user mode accesses to the MEPC register. [REF-1345]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\tif (csr_we || csr_read) begin \n```\nif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl)) begin** \n\t\t\n\t\t```\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end\n\t\t // check access to debug mode only CSRs\n\t\t if (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begin\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end \n\t end \n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2014-2915",
          "Description": "virtualization product does not restrict access to debug and other processor registers in the hardware, allowing a crash of the host or guest OS",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-2915"
        },
        {
          "Reference": "CVE-2021-3011",
          "Description": "virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3011"
        },
        {
          "Reference": "CVE-2020-12446",
          "Description": "Driver exposes access to Model Specific Register (MSR) registers, allowing admin privileges.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12446"
        },
        {
          "Reference": "CVE-2015-2150",
          "Description": "Virtualization product does not restrict access to PCI command registers, allowing host crash from the guest.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-2150"
        }
      ],
      "RelatedAttackPatterns": [
        "680"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1340",
          "Title": "Hackatdac19 csr_regfile.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/src/csr_regfile.sv#L854:L857",
          "URLDate": "2023-06-21"
        },
        {
          "ExternalReferenceID": "REF-1341",
          "Authors": [
            "Andrew Waterman",
            "Yunsup Lee",
            "Rimas Avi\u017eienis",
            "David Patterson",
            "Krste Asanovi\u0107"
          ],
          "Title": "The RISC-V Instruction Set Manual",
          "Edition": "Volume II: Privileged Architecture",
          "PublicationYear": "2016",
          "PublicationMonth": "11",
          "PublicationDay": "04",
          "URL": "https://people.eecs.berkeley.edu/~krste/papers/riscv-privileged-v1.9.1.pdf",
          "URLDate": "2023-06-21"
        },
        {
          "ExternalReferenceID": "REF-1345",
          "Authors": [
            "Florian Zaruba",
            "Michael Schaffner",
            "Andreas Traber"
          ],
          "Title": "csr_regfile.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/csr_regfile.sv#L868:L871",
          "URLDate": "2023-06-21"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1263",
      "Name": "Improper Physical Access Control",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.",
      "ExtendedDescription": "Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1191",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness can arise if design decisions are made that do not align with the intended physical protection of the product"
        },
        {
          "Phase": "Manufacturing",
          "Note": "While the architecture and design phase of the product may have accurately met the intended robustness for product physical protections, this phase may introduce the weakness through errors in physically manufacturing the product."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access."
        },
        {
          "Phase": [
            "Manufacturing"
          ],
          "Description": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution."
        }
      ],
      "RelatedAttackPatterns": [
        "401"
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1264",
      "Name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.",
      "ExtendedDescription": "\n\nMany high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "821",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1037",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The weakness can be introduced in the data transfer or bus protocol itself or in the implementation."
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "There are several standard on-chip bus protocols used in modern SoCs to allow communication between components. There are a wide variety of commercially available hardware IP implementing the interconnect logic for these protocols. A bus connects components which initiate/request communications such as processors and DMA controllers (bus masters) with peripherals which respond to requests. In a typical system, the privilege level or security designation of the bus master along with the intended functionality of each peripheral determine the security policy specifying which specific bus masters can access specific peripherals. This security policy (commonly referred to as a bus firewall) can be enforced using separate IP/logic from the actual interconnect responsible for the data routing."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The firewall and data routing logic becomes de-synchronized due to a hardware logic bug allowing components that should not be allowed to communicate to share data. For example, consider an SoC with two processors. One is being used as a root of trust and can access a cryptographic key storage peripheral. The other processor (application cpu) may run potentially untrusted code and should not access the key store. If the application cpu can issue a read request to the key store which is not blocked due to de-synchronization of data routing and the bus firewall, disclosure of cryptographic keys is possible."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "All data is correctly buffered inside the interconnect until the firewall has determined that the endpoint is allowed to receive the data."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-5754",
          "Description": "Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5754"
        }
      ],
      "RelatedAttackPatterns": [
        "233",
        "663"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10."
        }
      ]
    },
    {
      "ID": "1265",
      "Name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",
      "ExtendedDescription": "In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "691",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "663",
          "ViewID": "1000"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "416",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Unexpected State"
          ],
          "Likelihood": [
            "Unknown"
          ],
          "Note": "Exploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The implementation of the Widget class in the following C++ code is an example of code that is not designed to be reentrant. If an invocation of a method of Widget inadvertently produces a second nested invocation of a method of Widget, then data member backgroundImage may unexpectedly change during execution of the outer call."
            },
            {
              "Nature": "Bad",
              "Language": "C++",
              "ExampleCode": "```\n\tclass Widget\n\t{\n\t\tprivate:\n\t\t\tImage* backgroundImage;\n\t\tpublic:\n\t\t\tvoid click()\n\t\t\t{\n\t\t\t\tif (backgroundImage)\n\t\t\t\t{\n\t\t\t\t\tbackgroundImage->click();\n\t\t\t\t}\n\t\t\t}\n\t\t\tvoid changeBackgroundImage(Image* newImage)\n\t\t\t{\n\t\t\t\tif (backgroundImage)\n\t\t\t\t{\n\t\t\t\t\tdelete backgroundImage;\n\t\t\t\t}\n\t\t\t\tbackgroundImage = newImage;\n\t\t\t}\n\t}\n\tclass Image\n\t{\n\t\tpublic:\n\t\t\tvoid click()\n\t\t\t{\n\t\t\t\tscriptEngine->fireOnImageClick();\n\t\t\t\t/* perform some operations using \"this\" pointer */\n\t\t\t}\n\t}\n```"
            },
            {
              "BodyText": "Looking closer at this example, Widget::click() calls backgroundImage->click(), which in turn calls scriptEngine->fireOnImageClick(). The code within fireOnImageClick() invokes the appropriate script handler routine as defined by the document being rendered. In this scenario this script routine is supplied by an adversary and this malicious script makes a call to Widget::changeBackgroundImage(), deleting the Image object pointed to by backgroundImage. When control returns to Image::click, the function's backgroundImage \"this\" pointer (which is the former value of backgroundImage) is a dangling pointer. The root of this weakness is that while one operation on Widget (click) is in the midst of executing, a second operation on the Widget object may be invoked (in this case, the second invocation is a call to different method, namely changeBackgroundImage) that modifies the non-local variable."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "This is another example of C++ code that is not designed to be reentrant."
            },
            {
              "Nature": "Bad",
              "Language": "C++",
              "ExampleCode": "```\n\tclass Request\n\t{\n\t\tprivate:\n\t\t\tstd::string uri;\n\t\t\t/* ... */\n\t\tpublic:\n\t\t\tvoid setup(ScriptObject* _uri)\n\t\t\t{\n\t\t\t\tthis->uri = scriptEngine->coerceToString(_uri);\n\t\t\t\t/* ... */\n\t\t\t}\n\t\t\tvoid send(ScriptObject* _data)\n\t\t\t{\n\t\t\t\tCredentials credentials = GetCredentials(uri);\n\t\t\t\tstd::string data = scriptEngine->coerceToString(_data);\n\t\t\t\tdoSend(uri, credentials, data);\n\t\t\t}\n\t}\n```"
            },
            {
              "BodyText": "The expected order of operations is a call to Request::setup(), followed by a call to Request::send(). Request::send() calls scriptEngine->coerceToString(_data) to coerce a script-provided parameter into a string. This operation may produce script execution. For example, if the script language is ECMAScript, arbitrary script execution may result if _data is an adversary-supplied ECMAScript object having a custom toString method. If the adversary's script makes a new call to Request::setup, then when control returns to Request::send, the field uri and the local variable credentials will no longer be consistent with one another. As a result, credentials for one resource will be shared improperly with a different resource. The root of this weakness is that while one operation on Request (send) is in the midst of executing, a second operation may be invoked (setup)."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2014-1772",
          "Description": "In this vulnerability, by registering a malicious onerror handler, an adversary can produce unexpected re-entrance of a CDOMRange object. [REF-1098]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1772"
        },
        {
          "Reference": "CVE-2018-8174",
          "Description": "This CVE covers several vulnerable scenarios enabled by abuse of the Class_Terminate feature in Microsoft VBScript. In one scenario, Class_Terminate is used to produce an undesirable re-entrance of ScriptingDictionary during execution of that object's destructor. In another scenario, a vulnerable condition results from a recursive entrance of a property setter method. This recursive invocation produces a second, spurious call to the Release method of a reference-counted object, causing a UAF when that object is freed prematurely. This vulnerability pattern has been popularized as \"Double Kill\". [REF-1099]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-8174"
        }
      ],
      "RelatedAttackPatterns": [
        "74"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1098",
          "Authors": [
            "Jack Tang"
          ],
          "Title": "Root Cause Analysis of CVE-2014-1772 - An Internet Explorer Use After Free Vulnerability",
          "PublicationYear": "2014",
          "PublicationMonth": "11",
          "PublicationDay": "05",
          "URL": "https://www.trendmicro.com/en_us/research.html",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1099",
          "Authors": [
            "Simon Zuckerbraun"
          ],
          "Title": "It's Time To Terminate The Terminator",
          "PublicationYear": "2018",
          "PublicationMonth": "05",
          "PublicationDay": "15",
          "URL": "https://www.zerodayinitiative.com/blog/2018/5/15/its-time-to-terminate-the-terminator"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1266",
      "Name": "Improper Scrubbing of Sensitive Data from Decommissioned Device",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.",
      "ExtendedDescription": "\n\nWhen a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. \"scrubbing.\" Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "404",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Policy"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nFunctionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\n"
        },
        {
          "Phase": [
            "Policy"
          ],
          "Description": "\n\nThe manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.\n"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nIf the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system.\n"
        }
      ],
      "RelatedAttackPatterns": [
        "150",
        "37",
        "545",
        "546",
        "675"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1080",
          "Authors": [
            "Christopher Tarnovsky"
          ],
          "Title": "Security Failures in Secure Devices",
          "URL": "https://www.blackhat.com/presentations/bh-europe-08/Tarnovsky/Presentation/bh-eu-08-tarnovsky.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1267",
      "Name": "Policy Uses Obsolete Encoding",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product uses an obsolete encoding mechanism to implement access controls.",
      "ExtendedDescription": "\n\nWithin a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Modify Files or Directories",
            "Read Files or Directories",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Reduce Reliability"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\nSecurity Token Decoders should be reviewed for design inconsistency and common weaknesses.\n\n\nAccess and programming flows should be tested in both pre-silicon and post-silicon testing.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "For example, consider a system that has four bus masters. The table below provides bus masters, their Security Tokens, and trust assumptions.\n\n| Bus Master | Security Token Decoding | Trust Assumptions | \n| --- | --- | --- |\n| Master_0 | \"00\" | Untrusted  |\n| Master_1 | \"01\" | Trusted  |\n| Master_2 | \"10\" | Untrusted  |\n| Master_3 | \"11\" | Untrusted  |\n\n\t\nThe policy encoding is to be defined such that Security Token will be used in implemented access-controls. The bits in the bus transaction that contain Security-Token information are Bus_transaction [15:11]. The assets are the AES-Key registers for encryption or decryption. The key of 128 bits is implemented as a set of four, 32-bit registers.\n\n\t| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption, Default 0x00000000  |\n\n\t\t\nBelow is an example of a policy encoding scheme inherited from a previous project where all \"ODD\" numbered Security Tokens are trusted."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "```\n\tIf (Bus_transaction[14] == \"1\")\n\t\tTrusted = \"1\"\n\tElse\n\t\tTrusted = \"0\"\n\tIf (trusted)\n\t\tAllow access to AES-Key registers\n\tElse\n\t\tDeny access to AES-Key registers\n```"
            },
            {
              "BodyText": "The inherited policy encoding is obsolete and does not work for the new system where an untrusted bus master with an odd Security Token exists in the system, i.e., Master_3 whose Security Token is \"11\". Based on the old policy, the untrusted bus master (Master_3) has access to the AES-Key registers. To resolve this, a register AES_KEY_ACCESS_POLICY can be defined to provide necessary, access controls:"
            },
            {
              "BodyText": "New Policy: \n\n|  | \n|\n| AES_KEY_ACCESS_POLICY | [31:0] Default 0x00000002 - agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers  |\n\n\t\nThe AES_KEY_ACCESS_POLICY register defines which agents with a Security Token in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a Security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent. Thus, any bus master with Security Token \"01\" is allowed access to the AES-Key registers. Below is the Pseudo Code for policy encoding:"
            },
            {
              "Nature": "Good",
              "ExampleCode": "```\n\tSecurity_Token[4:0] = Bus_transaction[15:11]\n\tIf (AES_KEY_ACCESS_POLICY[Security_Token] == \"1\")\n\t\tAllow access to AES-Key registers\n\tElse\n\t\tDeny access to AES-Key registers\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "681"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1093",
          "Authors": [
            "Brandon Hill"
          ],
          "Title": "Huge Intel CPU Bug Allegedly Causes Kernel Memory Vulnerability With Up To 30% Performance Hit In Windows And Linux",
          "PublicationYear": "2018",
          "PublicationMonth": "01",
          "PublicationDay": "02",
          "URL": "https://hothardware.com/news/intel-cpu-bug-kernel-memory-isolation-linux-windows-macos",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1268",
      "Name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\t\t\t   ",
      "ExtendedDescription": "\n\nIntegrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves.\n\n\nResources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness may be introduced during the design of a device when the architect does not comprehensively specify all of the policies required by an agent."
        },
        {
          "Phase": "Implementation",
          "Note": "This weakness may be introduced during implementation if device policy restrictions do not sufficiently constrain less-privileged clients."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Crash, Exit, or Restart",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Read Files or Directories",
            "Reduce Reliability"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system of seven registers for storing and configuring an AES key for encryption or decryption.\n\n\nFour 32-bit registers are used to store a 128-bit AES key. The names of those registers are AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, and AES_ENC_DEC_KEY_3. Collectively these are referred to as the AES Key registers.\n\n| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption  Default 0x00000000 |\n\n\t\nThree 32-bit registers are used to define access control for the AES-key registers. The names of those registers are AES_KEY_CONTROL_POLICY, AES_KEY_READ_POLICY, and AES_KEY_WRITE_POLICY. Collectively these registers are referred to as the Policy registers, and their functions are explained next.\n\n\t\n   - The AES_KEY_CONTROL_POLICY register defines which agents can write to the AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY registers.\n\n   - The AES_KEY_READ_POLICY register defines which agents can read the AES-key registers.\n\n   - The AES_KEY_WRITE_POLICY register defines which agents can write the AES key registers.\n\nThe preceding three policy registers encode access control at the bit level. Therefore a maximum of 32 agents can be defined (1 bit per agent). The value of the bit when set (i.e., \"1\") allows the respective action from an agent whose identity corresponds to the number of the bit. If clear (i.e., \"0\"), it disallows the respective action to that corresponding agent. For example, if bit 0 is set to \"1\" in the AES_KEY_READ_POLICY register, then agent 0 has permission to read the AES-key registers.\n\t\nConsider that there are 4 agents named Agent 1, Agent 2, Agent 3, and Agent 4. For access control purposes Agent 1 is assigned to bit 1, Agent 2 to bit 2, Agent 3 to bit 3, and Agent 4 to bit 4. All agents are trusted except for Agent 3 who is untrusted. Also consider the register values in the below table."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_KEY_CONTROL_POLICY | Controls which agents can write to READ_POLICY and WRITE_POLICY registers  [31:0] Default 0x00000018 |\n| AES_KEY_READ_POLICY | Controls which agents can read the AES-key registers  [31:0] Default 0x00000002 |\n| AES_KEY_WRITE_POLICY | Controls which agents can write to the AES-key registers  [31:0] Default 0x00000004 |"
            },
            {
              "BodyText": "IThe AES_KEY_CONTROL_POLICY register value is 0x00000018. In binary, the lower 8 bits will be 0001 1000, meaning that:\n\n\n  - Bits 3 and 4 are set, thus Agents 3 and 4 will have write access to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.\n\n  - All other bits are clear, hence agents other than 3 and 4 will not have access to write to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.\n\nThe AES_KEY_READ_POLICY register value is 0x00000002. In binary, the lower 8 bits will be 0000 0010, meaning that:\n\n  - Bit 1 is set, thus Agent 1 will be able to read the AES key registers.\n\nThe AES_KEY_WRITE_POLICY register value is 0x00000004. In binary, the lower 8 bits will be 0000 0100, meaning that:\n\n  - Bit 2 is set, thus Agent 2 will be able to write the AES Key registers.\n\nThe configured access control policy for Agents 1,2,3,4 is summarized in table below.\n| Agent | Read | Write | Control | \n| --- | --- | --- | --- |\n| Agent 1 | Allowed | Not Allowed | Not Allowed  |\n| Agent 2 | Not Allowed | Allowed | Not Allowed  |\n| Agent 3 | Not Allowed | Not Allowed | Allowed  |\n| Agent 4 | Not Allowed | Not Allowed | Allowed  |\n\n\t\nAt this point Agents 3 and 4 can only configure which agents can read AES keys and which agents can write AES keys. Agents 3 and 4 cannot read or write AES keys - just configure access control.\n\n\t\nNow, recall Agent 3 is untrusted. As explained above, the value of the AES_KEY_CONTROL_POLICY register gives agent 3 access to write to the AES_KEY_WRITE_POLICY register. Agent 3 can use this write access to add themselves to the AES_KEY_WRITE_POLICY register. This is accomplished by Agent 3 writing the value 0x00000006. In binary, the lower 8 bits are 0000 0110, meaning that bit 3 will be set. Thus, giving Agent 3 having the ability to write to the AES Key registers.\n\n\t\nIf the AES_KEY_CONTROL_POLICY register value is 0x00000010, the lower 8 bits will be 0001 0000. This will give Agent 4, a trusted agent, write access to AES_KEY_WRITE_POLICY, but Agent 3, who is untrusted, will not have write access. The Policy register values should therefore be as follows:"
            },
            {
              "Nature": "Good",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_KEY_CONTROL_POLICY | [31:0] Default 0x00000010  |\n| AES_KEY_READ_POLICY | [31:0] Default 0x00000002  |\n| AES_KEY_WRITE_POLICY | [31:0] Default 0x00000004  |"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "180"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1269",
      "Name": "Product Released in Non-Release Configuration",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product released to market is released in pre-production or manufacturing configuration.",
      "ExtendedDescription": "\n\nProducts in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to:\n\n\n  - Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity)\n\n  - Ability to read/write/modify/dump internal state (including registers and memory)\n\n  - Ability to change system configurations\n\n  - Ability to run hidden or private commands that are not allowed during production (as they expose IP).\n\nThe above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state.\n\nComplexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called \"complete\" and have the \"Manufacturing Complete\" fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Compiled",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Other",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "Integration"
        },
        {
          "Phase": "Manufacturing"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Other"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."
        },
        {
          "Phase": [
            "Manufacturing"
          ],
          "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example shows what happens when a preproduction system is made available for production."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "Suppose the chipmaker has a way of scanning all the internal memory (containing chipmaker-level secrets) during the manufacturing phase, and the way the chipmaker or the Original Equipment Manufacturer (OEM) marks the end of the manufacturing phase is by blowing a Manufacturing Complete fuse. Now, suppose that whoever blows the Manufacturing Complete fuse inadvertently forgets to execute the step to blow the fuse."
            },
            {
              "BodyText": "An attacker will now be able to scan all the internal memory (containing chipmaker-level secrets)."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Blow the Manufacturing Complete fuse."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-13945",
          "Description": "Regarding SSA-686531, a hardware based manufacturing access on S7-1200 and S7-200 SMART has occurred. A vulnerability has been identified in SIMATIC S7-1200 CPU family (incl. SIPLUS variants) (All versions), SIMATIC S7-200 SMART CPU family (All versions). There is an access mode used during manufacturing of S7-1200 CPUs that allows additional diagnostic functionality. The security vulnerability could be exploited by an attacker with physical access to the UART interface during boot process. At the time of advisory publication, no public exploitation of this security vulnerability was known.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-13945"
        },
        {
          "Reference": "CVE-2018-4251",
          "Description": "Laptops with Intel chipsets were found to be running in Manufacturing Mode. After this information was reported to the OEM, the vulnerability (CVE-2018-4251) was patched disallowing access to the interface.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-4251"
        }
      ],
      "RelatedAttackPatterns": [
        "439"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1103",
          "Authors": [
            "Lucian Armasu"
          ],
          "Title": "Intel ME's Undocumented Manufacturing Mode Suggests CPU Hacking Risks",
          "PublicationYear": "2018",
          "PublicationMonth": "10",
          "PublicationDay": "03",
          "URL": "https://www.tomshardware.com/news/intel-me-cpu-undocumented-manufacturing-mode,37883.html"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1270",
      "Name": "Generation of Incorrect Security Tokens",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",
      "ExtendedDescription": "\n\nSystems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1294",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Files or Directories",
            "Execute Unauthorized Code or Commands",
            "Bypass Protection Mechanism",
            "Gain Privileges or Assume Identity",
            "Read Memory",
            "Modify Memory",
            "DoS: Crash, Exit, or Restart"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\n  - Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses.\n\n  - Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.\n\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system with a register for storing an AES key for encryption or decryption. The key is 128 bits long implemented as a set of four 32-bit registers. The key registers are assets, and register, AES_KEY_ACCESS_POLICY, is defined to provide necessary access controls. The access-policy register defines which agents, using a Security Token, may access the AES-key registers. Each bit in this 32-bit register is used to define a Security Token. There could be a maximum of 32 Security Tokens that are allowed access to the AES-key registers. When set (bit = \"1\") bit number allows action from an agent whose identity matches that bit number. If Clear (bit = \"0\") the action is disallowed for the corresponding agent."
            },
            {
              "BodyText": "Assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". \n| Register | Description | Default | \n| --- | --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption | 0x00000000  |\n| AES_KEY_ACCESS_POLICY | AES key access register [31:0] | 0x00000002  |"
            },
            {
              "BodyText": "An agent with a Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\"."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The SoC incorrectly generates Security Token \"1\" for every agent. In other words, both Main-controller and Aux-controller are assigned Security Token \"1\"."
            },
            {
              "BodyText": "Both agents have access to the AES-key registers."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The SoC should correctly generate Security Tokens, assigning \"1\" to the Main-controller and \"2\" to the Aux-controller"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "633",
        "681"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1271",
      "Name": "Uninitialized Value on Reset for Registers Holding Security Settings",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Security-critical logic is not set to a known value on reset.",
      "ExtendedDescription": "\n\nWhen the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "909",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control",
            "Authentication",
            "Authorization"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "All registers holding security-critical information should be set to a specific value on reset."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Shown below is a positive clock edge triggered flip-flop used to implement a lock bit for test and debug interface. When the circuit is first brought out of reset, the state of the flip-flop will be unknown until the enable input and D-input signals update the flip-flop state. In this example, an attacker can reset the device until the test and debug interface is unlocked and access the test interface until the lock signal is driven to a known state by the logic."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "always @(posedge clk) begin\n\n```\n\t if (en) lock_jtag <= d;\n end\n```"
            },
            {
              "BodyText": "The flip-flop can be set to a known value (0 or 1) on reset, but requires that the logic explicitly update the output of the flip-flop if the reset signal is active."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "always @(posedge clk) begin\n\n```\n\t if (~reset) lock_jtag <= 0;\n\t else if (en) lock_jtag <= d;\n end\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "74"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1272",
      "Name": "Sensitive Information Uncleared Before Debug/Power State Transition",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",
      "ExtendedDescription": "\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "200",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Hardware Description Language",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Sensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could be used to compromise device security."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "During state transitions, information not needed in the next state should be removed before the transition to the next state."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-147",
          "Entries": [
            {
              "IntroText": "This example shows how an attacker can take advantage of an incorrect state transition."
            },
            {
              "BodyText": "Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "During the transition from A to B, the device does not scrub the memory."
            },
            {
              "BodyText": "After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys."
            },
            {
              "Nature": "Good",
              "ExampleCode": "For transition from state A to state B, remove information which should not be available once the transition is complete."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-12926",
          "Description": "Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12926"
        }
      ],
      "FunctionalAreas": [
        "Power"
      ],
      "RelatedAttackPatterns": [
        "150",
        "37",
        "545",
        "546"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1220",
          "Authors": [
            "Zhenyu Ning",
            "Fengwei Zhang"
          ],
          "Title": "Understanding the Security of ARM Debugging Features",
          "Publication": "2019 IEEE Symposium on Security and Privacy (SP)",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "PublicationDay": "22",
          "URL": "https://www.computer.org/csdl/proceedings-article/sp/2019/666000b156/19skgcwSgsE",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1273",
      "Name": "Device Unlock Credential Sharing",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.",
      "ExtendedDescription": "\n\n\"Unlocking a device\" often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is \"locked\" in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "200",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Compiled",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Other",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Integration"
        },
        {
          "Phase": "Manufacturing"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Modify Files or Directories",
            "Read Files or Directories",
            "Modify Application Data",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism"
          ],
          "Note": "Once unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."
        },
        {
          "Phase": [
            "Manufacturing"
          ],
          "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example shows how an attacker can take advantage of compromised credentials."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "Suppose a semiconductor chipmaker, \"C\", uses the foundry \"F\" for fabricating its chips. Now, F has many other customers in addition to C, and some of the other customers are much smaller companies. F has dedicated teams for each of its customers, but somehow it mixes up the unlock credentials and sends the unlock credentials of C to the wrong team. This other team does not take adequate precautions to protect the credentials that have nothing to do with them, and eventually the unlock credentials of C get leaked."
            },
            {
              "BodyText": "When the credentials of multiple organizations are stored together, exposure to third parties occurs frequently."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Vertical integration of a production company is one effective method of protecting sensitive credentials. Where vertical integration is not possible, strict access control and need-to-know are methods which can be implemented to reduce these risks."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "560"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1274",
      "Name": "Improper Access Control for Volatile Memory Containing Boot Code",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.",
      "ExtendedDescription": "\n\nAdversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code.\n\n\nAs a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code.\n\n\nIf the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness can be introduced during hardware architecture or design but can be identified later during testing."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control",
            "Integrity"
          ],
          "Impact": [
            "Modify Memory",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Ensure the volatile memory is lockable or has locks. Ensure the volatile memory is locked for writes from untrusted agents or adversaries. Try modifying the volatile memory from an untrusted agent, and ensure these writes are dropped.",
          "Effectiveness": "High"
        },
        {
          "Method": "Manual Analysis",
          "Description": "\n\nAnalyze the device using the following steps:\n\n\n  1. Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory.\n\n  1. Identify the volatile memory regions that are used for storing loaded system executable program.\n\n  1. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1.\n\nOnly trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A typical SoC secure boot's flow includes fetching the next piece of code (i.e., the boot loader) from NVM (e.g., serial, peripheral interface (SPI) flash), and transferring it to DRAM/SRAM volatile, internal memory, which is more efficient."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "The volatile-memory protections or access controls are insufficient."
            },
            {
              "BodyText": "The memory from where the boot loader executes can be modified by an adversary."
            },
            {
              "Nature": "Good",
              "ExampleCode": "A good architecture should define appropriate protections or access controls to prevent modification by an adversary or untrusted agent, once the bootloader is authenticated."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-2267",
          "Description": "Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-2267"
        }
      ],
      "RelatedAttackPatterns": [
        "456",
        "679"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1275",
      "Name": "Sensitive Cookie with Improper SameSite Attribute",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",
      "ExtendedDescription": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).",
      "LikelihoodOfExploit": "Medium",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "923",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "352",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Web Based",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "This weakness occurs during implementation when the coder does not properly set the SameSite attribute."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Non-Repudiation",
            "Access Control"
          ],
          "Impact": [
            "Modify Application Data"
          ],
          "Likelihood": [
            "Low"
          ],
          "Note": "If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a \"simple\" \"Content-Type\" header in the HTTP request and many more."
        }
      ],
      "DetectionMethods": [
        {
          "DetectionMethodID": "DM-14",
          "Method": "Automated Static Analysis",
          "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.",
          "Effectiveness": "High",
          "EffectivenessNotes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID."
            },
            {
              "Nature": "Bad",
              "Language": "JavaScript",
              "ExampleCode": "let sessionId = generateSessionId()\n let cookieOptions = { domain: 'example.com' }\n response.cookie('sessionid', sessionId, cookieOptions)"
            },
            {
              "BodyText": "Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker can potentially perform a CSRF attack by using the following malicious page:"
            },
            {
              "Nature": "Attack",
              "Language": "HTML",
              "ExampleCode": "<html>\n\n```\n\t <form id=evil action=\"http://local:3002/setEmail\" method=\"POST\">\n\t\t <input type=\"hidden\" name=\"newEmail\" value=\"abc@example.com\" />\n\t </form>\n <script>evil.submit()</script>\n </html>\n```"
            },
            {
              "BodyText": "When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client."
            },
            {
              "BodyText": "To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'."
            },
            {
              "Nature": "Good",
              "Language": "JavaScript",
              "ExampleCode": "let sessionId = generateSessionId()\n let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }\n response.cookie('sessionid', sessionId, cookieOptions)"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-24045",
          "Description": "Web application for a room automation system has client-side JavaScript that sets a sensitive cookie without the SameSite security attribute, allowing the cookie to be sniffed",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24045"
        }
      ],
      "RelatedAttackPatterns": [
        "62"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1104",
          "Authors": [
            "M. West",
            "M. Goodwin"
          ],
          "Title": "SameSite attribute specification draft",
          "PublicationYear": "2016",
          "PublicationMonth": "04",
          "PublicationDay": "06",
          "URL": "https://datatracker.ietf.org/doc/html/draft-west-first-party-cookies-07",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1105",
          "Authors": [
            "Mozilla"
          ],
          "Title": "SameSite attribute description on MDN Web Docs",
          "PublicationYear": "2020",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"
        },
        {
          "ExternalReferenceID": "REF-1106",
          "Authors": [
            "The Chromium Projects"
          ],
          "Title": "Chromium support for SameSite attribute",
          "PublicationYear": "2019",
          "PublicationMonth": "09",
          "PublicationDay": "26",
          "URL": "https://www.chromium.org/updates/same-site/",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1276",
      "Name": "Hardware Child Block Incorrectly Connected to Parent System",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.",
      "ExtendedDescription": "\n\nIndividual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "This weakness is introduced when integrating IP into a parent design."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Testing"
          ],
          "Description": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Many SoCs use hardware to partition system resources between trusted and un-trusted entities. One example of this concept is the Arm TrustZone, in which the processor and all security-aware IP attempt to isolate resources based on the status of a privilege bit. This privilege bit is part of the input interface in all TrustZone-aware IP. If this privilege bit is accidentally grounded or left unconnected when the IP is instantiated, privilege escalation of all input data may occur."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "// IP definition\n module tz_peripheral(clk, reset, data_in, data_in_security_level, ...);\n\n```\n\t input clk, reset;\n\t input [31:0] data_in;\n\t input data_in_security_level;\n\t ...\n endmodule\n // Instantiation of IP in a parent system\n module soc(...)\n\t ...\n\t tz_peripheral u_tz_peripheral(\n\t\t .clk(clk),\n\t\t .rst(rst),\n\t\t .data_in(rdata),\n\t\t //Copy-and-paste error or typo grounds data_in_security_level (in this example 0=secure, 1=non-secure) effectively promoting all data to \"secure\")\n\t\t .data_in_security_level(1'b0),\n\t );\n\t ...\n endmodule\n```"
            },
            {
              "BodyText": "In the Verilog code below, the security level input to the TrustZone aware peripheral is correctly driven by an appropriate signal instead of being grounded."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "// Instantiation of IP in a parent system\n module soc(...)\n\n```\n\t ...\n\t tz_peripheral u_tz_peripheral(\n\t\t .clk(clk),\n\t\t .rst(rst),\n\t\t .data_in(rdata),\n\t\t // This port is no longer grounded, but instead driven by the appropriate signal\n\t\t .data_in_security_level(rdata_security_level),\n\t );\n\t ...\n endmodule\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Here is a code snippet from the Ariane core module in the HACK@DAC'21 Openpiton SoC [REF-1362]. To ensure full functional correctness, developers connect the ports with names. However, in some cases developers forget to connect some of these ports to the desired signals in the parent module. These mistakes by developers can lead to incorrect functional behavior or, in some cases, introduce security vulnerabilities."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n csr_regfile #(\n\n```\n\t ...\n ) csr_regfile_i (\n\t .flush_o ( flush_csr_ctrl ),\n\t .halt_csr_o ( halt_csr_ctrl ),\n\t ...\n```\n.irq_i(),** \n\t\n\t **.time_irq_i(),** \n\t .*\n\t );\n ..."
            },
            {
              "BodyText": "In the above example from HACK@DAC'21, since interrupt signals are not properly connected, the CSR module will fail to send notifications in the event of interrupts. Consequently, critical information in CSR registers that should be flushed or modified in response to an interrupt won't be updated. These vulnerabilities can potentially result in information leakage across various privilege levels."
            },
            {
              "BodyText": "To address the aforementioned vulnerability, developers must follow a two-step approach. First, they should ensure that all module signals are properly connected. This can often be facilitated using automated tools, and many simulators and sanitizer tools issue warnings when a signal remains unconnected or floats. Second, it is imperative to validate that the signals connected to a module align with the specifications. In the provided example, the developer should establish the correct connection of interrupt signals from the parent module (Ariane core) to the child module (csr_regfile) [REF-1363]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n csr_regfile #(\n\n```\n\t ...\n ) csr_regfile_i (\n\t .flush_o ( flush_csr_ctrl ),\n\t .halt_csr_o ( halt_csr_ctrl ),\n\t ...\n```\n.irq_i (irq_i),** \n\t\n\t **.time_irq_i (time_irq_i),** \n\t .*\n\t );\n ..."
            }
          ]
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1362",
          "Title": "ariane.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/ariane.sv#L539:L540",
          "URLDate": "2023-07-15"
        },
        {
          "ExternalReferenceID": "REF-1363",
          "Title": "Fix CWE-1276",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/9a796ee83e21f59476d4b0a68ec3d8e8d5148214/piton/design/chip/tile/ariane/src/ariane.sv#L539:L540",
          "URLDate": "2023-09-01"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1277",
      "Name": "Firmware Not Updateable",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product does not provide its\n\t\t\tusers with the ability to update or patch its\n\t\t\tfirmware to address any vulnerabilities or\n\t\t\tweaknesses that may be present.",
      "ExtendedDescription": "Without the ability to patch or update firmware, consumers will be left vulnerable to exploitation of any known vulnerabilities, or any vulnerabilities that are discovered in the future. This can expose consumers to permanent risk throughout the entire lifetime of the device, which could be years or decades. Some external protective measures and mitigations might be employed to aid in preventing or reducing the risk of malicious attack, but the root weakness cannot be corrected.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1329",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Requirements",
          "Note": "Requirements development might not consider the importance of updates over the lifetime of the product, or might not choose the ability due to concerns such as expense or speed to market."
        },
        {
          "Phase": "Architecture and Design",
          "Note": "Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update."
        },
        {
          "Phase": "Implementation",
          "Note": "The weakness can appear through oversight during implementation."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Authentication",
            "Authorization"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands",
            "DoS: Crash, Exit, or Restart"
          ],
          "Likelihood": [
            "Medium"
          ],
          "Note": "If an attacker can identify an exploitable vulnerability in one device that has no means of patching, the attack may be used against an entire class of devices."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Create a new installable boot image of the current build with a minor version number change. Use the standard installation method to update the boot image. Verify that the minor version number has changed. Create a fake image. Verify that the boot updater will not install the fake image and generates an \"invalid image\" error message or equivalent.",
          "Effectiveness": "High"
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Manual Dynamic Analysis",
          "Description": "Determine if there is a lack of a capability to update read-only memory (ROM) structure. This could manifest as a difference between the latest firmware version and the current version within the device.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Implement the necessary functionality to allow the firmware to be updated."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-145",
          "Entries": [
            {
              "IntroText": "A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The refrigerator has no means of patching and is hacked becoming a spewer of email spam."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The device automatically patches itself and provides considerable more protection against being hacked."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-9054",
          "Description": "Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are \"end-of-support\" and cannot be patched (CWE-1277). [REF-1097]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054"
        },
        {
          "Reference": "[REF-1095]",
          "Description": "A hardware \"smart lock\" has weak key generation that allows attackers to steal the key by BLE sniffing, but the device's firmware cannot be upgraded and hence remains vulnerable [REF-1095].",
          "Link": "https://www.theregister.com/2019/12/11/f_secure_keywe/"
        }
      ],
      "RelatedAttackPatterns": [
        "682"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1095",
          "Authors": [
            "Matthew Hughes"
          ],
          "Title": "Bad news: KeyWe Smart Lock is easily bypassed and can't be fixed",
          "PublicationYear": "2019",
          "PublicationMonth": "12",
          "PublicationDay": "11",
          "URL": "https://www.theregister.com/2019/12/11/f_secure_keywe/",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1096",
          "Authors": [
            "Alex Scroxton"
          ],
          "Title": "Alarm bells ring, the IoT is listening",
          "URL": "https://www.computerweekly.com/news/252475324/Alarm-bells-ring-the-IoT-is-listening"
        },
        {
          "ExternalReferenceID": "REF-1097",
          "Authors": [
            "Brian Krebs"
          ],
          "Title": "Zyxel Flaw Powers New Mirai IoT Botnet Strain",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "20",
          "URL": "https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Terminology",
          "Note": "The \"firmware\" term does not have a single commonly-shared definition, so there may be variations in how this CWE entry is interpreted during mapping."
        }
      ]
    },
    {
      "ID": "1278",
      "Name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.",
      "ExtendedDescription": "\n\nThe physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope.\n\n\nThe goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "A common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider an SoC design that embeds a secret key in read-only memory (ROM). The key is baked into the design logic and may not be modified after fabrication causing the key to be identical for all devices. An attacker in possession of the IC can decapsulate and delayer the device. After imaging the layers, computer vision algorithms or manual inspection of the circuit features locate the ROM and reveal the value of the key bits as encoded in the visible circuit structure of the ROM."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "188",
        "37",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1092",
          "Authors": [
            "Shahed E. Quadir",
            "Junlin Chen",
            "Domenic Forte",
            "Navid Asadizanjani",
            "Sina Shahbazmohamadi",
            "Lei Wang",
            "John Chandy",
            "Mark Tehranipoor"
          ],
          "Title": "A Survey on Chip to System Reverse Engineering",
          "URL": "https://dl.acm.org/doi/pdf/10.1145/2755563",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1129",
          "Authors": [
            "Christopher Tarnovsky"
          ],
          "Title": "Security Failures In Secure Devices",
          "PublicationYear": "2008",
          "PublicationMonth": "02",
          "PublicationDay": "21",
          "URL": "https://www.blackhat.com/presentations/bh-dc-08/Tarnovsky/Presentation/bh-dc-08-tarnovsky.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements. It is more attack-oriented, so it might be more suited for CAPEC."
        }
      ]
    },
    {
      "ID": "1279",
      "Name": "Cryptographic Operations are run Before Supporting Units are Ready",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.",
      "ExtendedDescription": "Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "691",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "665",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "The decision to continue using a cryptographic unit even though the input units to it are not producing valid data will compromise the encrypted result."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control",
            "Confidentiality",
            "Integrity",
            "Availability",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Best practices should be used to design cryptographic systems."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following pseudocode illustrates the weak encryption resulting from the use of a pseudo-random-number generator output."
            },
            {
              "Nature": "Bad",
              "Language": "Pseudocode",
              "ExampleCode": "If random_number_generator_self_test_passed() == TRUE\n then Seed = get_random_number_from_RNG()\n else Seed = hardcoded_number"
            },
            {
              "BodyText": "In the example above, first a check of RNG ready is performed. If the check fails, the RNG is ignored and a hard coded value is used instead. The hard coded value severely weakens the encrypted output."
            },
            {
              "Nature": "Good",
              "Language": "Pseudocode",
              "ExampleCode": "If random_number_generator_self_test_passed() == TRUE\n then Seed = get_random_number_from_RNG()\n else enter_error_state()"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "97"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1280",
      "Name": "Access Control Check Implemented After Asset is Accessed",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "A product's hardware-based access control check occurs after the asset has been accessed.",
      "ExtendedDescription": "\n\nThe product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "696",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control",
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Modify Application Data",
            "Read Application Data",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Implement the access control check first. Access should only be given to asset if agent is authorized."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-187",
          "Entries": [
            {
              "IntroText": "Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module foo_bar(data_out, usr_id, data_in, clk, rst_n);\n output reg [7:0] data_out;\n input wire [2:0] usr_id;\n input wire [7:0] data_in; \n input wire clk, rst_n;\n wire grant_access;\n always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0; \n\t else \n\t\t data_out = (grant_access) ? data_in : data_out;\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n end\n endmodule\n```"
            },
            {
              "BodyText": "This code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1."
            },
            {
              "BodyText": "Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0;\n\t else\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n\t\t data_out = (grant_access) ? data_in : data_out;\n end\n endmodule\n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "180"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1281",
      "Name": "Sequence of Processor Instructions Leads to Unexpected Behavior",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.",
      "ExtendedDescription": "\n\nIf the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "691",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Unexpected behavior from certain instruction combinations can arise from bugs in the ISA"
        },
        {
          "Phase": "Implementation",
          "Note": "Unexpected behavior from certain instruction combinations can arise because of implementation details such as speculative execution, caching etc."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Testing"
          ],
          "Description": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences."
        },
        {
          "Phase": [
            "Patching and Maintenance"
          ],
          "Description": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior. See [REF-1108]."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The Pentium F00F bug is a real-world example of how a sequence of instructions can lock a processor. The \"cmpxchg8b\" instruction compares contents of registers with a memory location. The operand is expected to be a memory location, but in the bad code snippet it is the eax register. Because the specified operand is illegal, an exception is generated, which is the correct behavior and not a security issue in itself. However, when prefixed with the \"lock\" instruction, the processor deadlocks because locked memory transactions require a read and write pair of transactions to occur before the lock on the memory bus is released. The exception causes a read to occur but there is no corresponding write, as there would have been if a legal operand had been supplied to the cmpxchg8b instruction. [REF-1331]"
            },
            {
              "Nature": "Bad",
              "Language": "x86 Assembly",
              "ExampleCode": "lock cmpxchg8b eax"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The Cyrix Coma bug was capable of trapping a Cyrix 6x86, 6x86L, or 6x86MX processor in an infinite loop. An infinite loop on a processor is not necessarily an issue on its own, as interrupts could stop the loop. However, on select Cyrix processors, the x86 Assembly 'xchg' instruction was designed to prevent interrupts. On these processors, if the loop was such that a new 'xchg' instruction entered the instruction pipeline before the previous one exited, the processor would become deadlocked. [REF-1323]"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The Motorola MC6800 microprocessor contained the first documented instance of a Halt and Catch Fire instruction - an instruction that causes the normal function of a processor to stop. If the MC6800 was given the opcode 0x9D or 0xDD, the processor would begin to read all memory very quickly, in sequence, and without executing any other instructions. This will cause the processor to become unresponsive to anything but a hard reset. [REF-1324]"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the commit stage inside the processor core of the HACK@DAC'19 buggy CVA6 SoC [REF-1342]. To ensure the correct execution of atomic instructions, the CPU must guarantee atomicity: no other device overwrites the memory location between the atomic read starts and the atomic write finishes. Another device may overwrite the memory location only before the read operation or after the write operation, but never between them, and finally, the content will still be consistent."
            },
            {
              "BodyText": "Atomicity is especially critical when the variable to be modified is a mutex, counting semaphore, or similar piece of data that controls access to shared resources. Failure to ensure atomicity may result in two processors accessing a shared resource simultaneously, permanent lock-up, or similar disastrous behavior."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n```\nif (csr_exception_i.valid && csr_exception_i.cause[63] && commit_instr_i[0].fu != CSR) begin** \n\t```\n\t\t exception_o = csr_exception_i;\n\t\t exception_o.tval = commit_instr_i[0].ex.tval;\n\t end\n```"
            },
            {
              "BodyText": "The above vulnerable code checks for CSR interrupts and gives them precedence over any other exception. However, the interrupts should not occur when the processor runs a series of atomic instructions. In the above vulnerable code, the required check must be included to ensure the processor is not in the middle of a series of atomic instructions."
            },
            {
              "BodyText": "Refrain from interrupting if the intention is to commit an atomic instruction that should not be interrupted. This can be done by adding a condition to check whether the current committing instruction is atomic. [REF-1343]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n```\nif (csr_exception_i.valid && csr_exception_i.cause[63] && !amo_valid_commit_o && commit_instr_i[0].fu != CSR) begin** \n\t```\n\t\t exception_o = csr_exception_i;\n\t\t exception_o.tval = commit_instr_i[0].ex.tval;\n\t end\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-26339",
          "Description": "A bug in AMD CPU's core logic allows a potential DoS by using a specific x86 instruction sequence to hang the processor",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-26339"
        },
        {
          "Reference": "CVE-1999-1476",
          "Description": "A bug in some Intel Pentium processors allow DoS (hang) via an invalid \"CMPXCHG8B\" instruction, causing a deadlock",
          "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1476"
        }
      ],
      "RelatedAttackPatterns": [
        "212"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1094",
          "Authors": [
            "Christopher Domas"
          ],
          "Title": "Breaking the x86 ISA",
          "URL": "https://github.com/xoreaxeaxeax/sandsifter/blob/master/references/domas_breaking_the_x86_isa_wp.pdf"
        },
        {
          "ExternalReferenceID": "REF-1108",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Deep Dive: Retpoline: A Branch Target Injection Mitigation",
          "URL": "https://www.intel.com/content/www/us/en/developer/topic-technology/software-security-guidance/overview.html",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1323",
          "Title": "Cyrix coma bug",
          "PublicationYear": "2006",
          "PublicationMonth": "03",
          "PublicationDay": "22",
          "Publisher": "Wikipedia",
          "URL": "https://en.wikipedia.org/wiki/Cyrix_coma_bug"
        },
        {
          "ExternalReferenceID": "REF-1324",
          "Authors": [
            "Gary Wheeler"
          ],
          "Title": "Undocumented M6800 Instructions",
          "PublicationYear": "1977",
          "PublicationMonth": "12",
          "URL": "https://spivey.oriel.ox.ac.uk/wiki/images-corner/1/1a/Undoc6800.pdf",
          "URLDate": "2023-04-20"
        },
        {
          "ExternalReferenceID": "REF-1331",
          "Authors": [
            "Robert R. Collins"
          ],
          "Title": "The Pentium F00F Bug",
          "PublicationYear": "1998",
          "PublicationMonth": "05",
          "PublicationDay": "01",
          "URL": "https://www.drdobbs.com/embedded-systems/the-pentium-f00f-bug/184410555",
          "URLDate": "2023-04-25"
        },
        {
          "ExternalReferenceID": "REF-1342",
          "Title": "Hackatdac19 commit_stage.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/src/commit_stage.sv#L287:L290",
          "URLDate": "2023-06-21"
        },
        {
          "ExternalReferenceID": "REF-1343",
          "Authors": [
            "Florian Zaruba",
            "Michael Schaffner",
            "Stefan Mach",
            "Andreas Traber"
          ],
          "Title": "commit_stage.sv",
          "PublicationYear": "2018",
          "URL": "https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/commit_stage.sv#L296:L301",
          "URLDate": "2023-06-21"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1282",
      "Name": "Assumed-Immutable Data is Stored in Writable Memory",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.",
      "ExtendedDescription": "\n\nSecurity services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "668",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "471",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "Keys, code, configuration settings, and other data should be programmed in write-once or read-only memory instead of writable memory."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "All immutable code or data should be programmed into ROM or write-once memory."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Cryptographic hash functions are commonly used to create unique fixed-length digests used to ensure the integrity of code and keys. A golden digest is stored on the device and compared to the digest computed from the data to be verified. If the digests match, the data has not been maliciously modified. If an attacker can modify the golden digest they then have the ability to store arbitrary data that passes the verification check. Hash digests used to verify public keys and early stage boot code should be immutable, with the strongest protection offered by hardware immutability."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "458",
        "679"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        },
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.3, CWE-1282 and CWE-1233 are being investigated for potential duplication or overlap."
        }
      ]
    },
    {
      "ID": "1283",
      "Name": "Mutable Attestation or Measurement Reporting Data",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.",
      "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues can be introduced during hardware architecture or design and can be identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "If the access-controls which protecting the reporting registers are misconfigured during implementation, this weakness can arise."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nMeasurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The SoC extends the hash and stores the results in registers. Without protection, an adversary can write their chosen hash values to these registers. Thus, the attacker controls the reported results."
            },
            {
              "BodyText": "To prevent the above scenario, the registers should have one or more of the following properties:\n\n\n  - Should be Read-Only with respect to an adversary\n\n  - Cannot be extended or modifiable either directly or indirectly (using a trusted agent as proxy) by an adversary\n\n  - Should have appropriate access controls or protections"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "680"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1107",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "PCIe Device Measurement Requirements",
          "PublicationYear": "2018",
          "PublicationMonth": "09",
          "URL": "https://www.intel.com/content/dam/www/public/us/en/documents/reference-guides/pcie-device-security-enhancements.pdf"
        },
        {
          "ExternalReferenceID": "REF-1131",
          "Authors": [
            "John Butterworth",
            "Cory Kallenberg",
            "Xeno Kovah"
          ],
          "Title": "BIOS Chronomancy: Fixing the Core Root of Trust for Measurement",
          "PublicationYear": "2013",
          "PublicationMonth": "07",
          "PublicationDay": "31",
          "URL": "https://media.blackhat.com/us-13/US-13-Butterworth-BIOS-Security-Slides.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still in development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1284",
      "Name": "Improper Validation of Specified Quantity in Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
      "ExtendedDescription": "\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1003",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "789",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "Since quantities are used so often to affect resource allocation or process financial data, they are often present in many places in the code."
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-135",
          "Entries": [
            {
              "IntroText": "This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated."
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "```\n\t...\n\tpublic static final double price = 20.00;\n\tint quantity = currentUser.getAttribute(\"quantity\");\n\tdouble total = price * quantity;\n\tchargeUser(total);\n\t...\n```"
            },
            {
              "BodyText": "The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited."
            }
          ]
        },
        {
          "ID": "DX-136",
          "Entries": [
            {
              "IntroText": "This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\t...\n\t#define MAX_DIM 100\n\t...\n```\n/* board dimensions */* \n\t\n\tint m,n, error;\n\tboard_square_t *board;\n\tprintf(\"Please specify the board height: \\n\");\n\terror = scanf(\"%d\", &m);\n\tif ( EOF == error ){\n\t```\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tprintf(\"Please specify the board width: \\n\");\n\terror = scanf(\"%d\", &n);\n\tif ( EOF == error ){\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tif ( m > MAX_DIM || n > MAX_DIM ) {\n\t\tdie(\"Value too large: Die evil hacker!\\n\");\n\t}\n\tboard = (board_square_t*) malloc( m * n * sizeof(board_square_t));\n\t...\n```"
            },
            {
              "BodyText": "While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-21668",
          "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"
        },
        {
          "Reference": "CVE-2008-1440",
          "Description": "lack of validation of length field leads to infinite loop",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1440"
        },
        {
          "Reference": "CVE-2008-2374",
          "Description": "lack of validation of string length fields allows memory consumption or buffer over-read",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2374"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1285",
      "Name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
      "ExtendedDescription": "\n\nOften, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-134",
          "Entries": [
            {
              "IntroText": "The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", &num, &size) == 2)\n\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t}\n\t\t\t\t...\n\t}\n```"
            },
            {
              "BodyText": "In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", &num, &size) == 2) {\n\t\t\t\t\t\t\tif (num > 0 && num <= (unsigned)count)\n\t\t\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t\t\t\t\telse\n```\n/* warn about possible attempt to induce buffer overflow */* \n\t\t\t\t\t\t\t\t\treport(stderr, \"Warning: ignoring bogus data for message sizes returned by server.\\n\");}}\n\t\t\t```\n\t\t\t\t...\n\t}\n```"
            }
          ]
        },
        {
          "ID": "DX-133",
          "Entries": [
            {
              "IntroText": "In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index."
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\treturn products[index];\n\t}\n```"
            },
            {
              "BodyText": "In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."
            },
            {
              "Nature": "Good",
              "Language": "Java",
              "ExampleCode": "```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\t\tString productSummary = \"\";\n\t\t\tif ((index >= 0) && (index < MAX_PRODUCTS)) {\n\t\t\t\tproductSummary = products[index];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.err.println(\"index is out of bounds\");\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\treturn productSummary;\n\t}\n```"
            },
            {
              "BodyText": "An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds."
            },
            {
              "Nature": "Good",
              "Language": "Java",
              "ExampleCode": "```\n\tArrayList productArray = new ArrayList(MAX_PRODUCTS);\n\t...\n\ttry {\n\t\tproductSummary = (String) productArray.get(index);\n\t} catch (IndexOutOfBoundsException ex) {...}\n```"
            }
          ]
        },
        {
          "ID": "DX-90",
          "Entries": [
            {
              "IntroText": "The following example asks a user for an offset into an array to select an item."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tint main (int argc, char **argv) {\n\t\tchar *items[] = {\"boat\", \"car\", \"truck\", \"train\"};\n\t\tint index = GetUntrustedOffset();\n\t\tprintf(\"User selected %s\\n\", items[index-1]);\n\t}\n```"
            },
            {
              "BodyText": "The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126)."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2005-0369",
          "Description": "large ID in packet used as array index",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0369"
        },
        {
          "Reference": "CVE-2001-1009",
          "Description": "negative array index as argument to POP LIST command",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1009"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1286",
      "Name": "Improper Validation of Syntactic Correctness of Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
      "ExtendedDescription": "\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following code loads and parses an XML file."
            },
            {
              "Nature": "Bad",
              "Language": "Java",
              "ExampleCode": "```\n```\n// Read DOM* \n\ttry {\n\t```\n\t\t...\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tfactory.setValidating( false );\n\t\t....\n\t\tc_dom = factory.newDocumentBuilder().parse( xmlFile );\n\t} catch(Exception ex) {\n\t\t...\n\t}\n```"
            },
            {
              "BodyText": "The XML file is loaded without validating it against a known XML Schema or DTD."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2016-4029",
          "Description": "Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2016-4029"
        },
        {
          "Reference": "CVE-2007-5893",
          "Description": "HTTP request with missing protocol version number leads to crash",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5893"
        }
      ],
      "RelatedAttackPatterns": [
        "66",
        "676"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1287",
      "Name": "Improper Validation of Specified Type of Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
      "ExtendedDescription": "\n\nWhen input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type.\n\n\nThis weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "843",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2024-37032",
          "Description": "Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2024-37032"
        },
        {
          "Reference": "CVE-2008-2223",
          "Description": "SQL injection through an ID that was supposed to be numeric.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2223"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1288",
      "Name": "Improper Validation of Consistency within Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.",
      "ExtendedDescription": "\n\nSome input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2018-16733",
          "Description": "product does not validate that the start block appears before the end block",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-16733"
        },
        {
          "Reference": "CVE-2006-3790",
          "Description": "size field that is inconsistent with packet size leads to buffer over-read",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3790"
        },
        {
          "Reference": "CVE-2008-4114",
          "Description": "system crash with offset value that is inconsistent with packet size",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4114"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1289",
      "Name": "Improper Validation of Unsafe Equivalence in Input",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.",
      "ExtendedDescription": "\n\nAttackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no \"<script>\" tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could inject \"<ScrIpT>\" and trigger XSS.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "20",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "41",
          "ViewID": "1000"
        },
        {
          "Nature": "PeerOf",
          "CweID": "178",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Often"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "MitigationID": "MIT-5",
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n",
          "Effectiveness": "High"
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-39155",
          "Description": "Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-39155"
        },
        {
          "Reference": "CVE-2020-11053",
          "Description": "Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11053"
        },
        {
          "Reference": "CVE-2005-0269",
          "Description": "File extension check in forum software only verifies extensions that contain all lowercase letters, which allows remote attackers to upload arbitrary files via file extensions that include uppercase letters.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0269"
        },
        {
          "Reference": "CVE-2001-1238",
          "Description": "Task Manager does not allow local users to end processes with uppercase letters named (1) winlogon.exe, (2) csrss.exe, (3) smss.exe and (4) services.exe via the Process tab which could allow local users to install Trojan horses that cannot be stopped.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1238"
        },
        {
          "Reference": "CVE-2004-2214",
          "Description": "HTTP server allows bypass of access restrictions using URIs with mixed case.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2214"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1290",
      "Name": "Incorrect Decoding of Security Identifiers ",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",
      "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections.\n\n\nA common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1294",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Bus/Interface Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Quality Degradation"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Security identifier decoders must be reviewed for design consistency and common weaknesses."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system that has four bus masters and a decoder. The decoder is supposed to decode every bus transaction and assign a corresponding security identifier. The security identifier is used to determine accesses to the assets. The bus transaction that contains the security information is Bus_transaction [15:14], and the bits 15 through 14 contain the security identifier information. The table below provides bus masters as well as their security identifiers and trust assumptions: \n\n| Bus Master | Security Identifier Decoding | Trust Assumptions | \n| --- | --- | --- |\n| Master_0 | \"00\" | Untrusted  |\n| Master_1 | \"01\" | Trusted  |\n| Master_2 | \"10\" | Untrusted  |\n| Master_3 | \"11\" | Untrusted  |\n\n\t\n The assets are the AES-Key registers for encryption or decryption. The key is 128 bits implemented as a set of four 32-bit registers. The AES_KEY_ACCESS_POLICY is used to define which agents with a security identifier in the transaction can access the AES-key registers. The size of the security identifier is 4 bits (i.e., bit 3 through 0). Each bit in these 4 bits defines a security identifier. There are only 4 security identifiers that are allowed accesses to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit. If clear (i.e., \"0\"), disallows the respective action to that corresponding agent. \n\n\t| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption  Default 0x00000000 |\n| AES_KEY_ACCESS_POLCY | [31:4] Default 0x00000000  [3:0]-0x01 agent with Security Identified \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers |"
            },
            {
              "BodyText": "The following Pseudo code outlines the process of checking the value of the Security Identifier within the AES_KEY_ACCESS_POLICY register:"
            },
            {
              "Nature": "Informative",
              "Language": "Other",
              "ExampleCode": "```\n\t If (AES_KEY_ACCESS_POLICY[Security_Identifier] == \"1\") \n\t\t Allow access to AES-Key registers \n\t Else \n\t\t Deny access to AES-Key registers \n```"
            },
            {
              "BodyText": "Below is a decoder's Pseudo code that only checks for bit [14] of the bus transaction to determine what Security Identifier it must assign."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\t If (Bus_transaction[14] == \"1\") \n\t\t Security_Identifier == \"1\" \n\t Else \n\t\t Security_Identifier == \"0\" \n```"
            },
            {
              "BodyText": "The security identifier is two bits, but the decoder code above only checks the value of one bit. Two Masters have their bit 0 set to \"1\" - Master_1 and Master_3. Master_1 is trusted, while Master_3 is not. The code above would therefore allow an untrusted agent, Master_3, access to the AES-Key registers in addition to intended trusted Master_1. \n The decoder should check for the entire size of the security identifier in the bus-transaction signal to assign a corresponding security identifier. The following is good Pseudo code:"
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "```\n\t If (Bus_transaction[15:14] == \"00\") \n\t\t Security_Identifier == \"0\" \n\t If (Bus_transaction[15:14] == \"01\") \n\t\t Security_Identifier == \"1\" \n\t If (Bus_transaction[15:14] == \"10\") \n\t\t Security_Identifier == \"2\" \n\t If (Bus_transaction[15:14] == \"11\") \n\t\t Security_Identifier == \"3\" \n```"
            }
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1291",
      "Name": "Public Key Re-Use for Signing both Debug and Production Code",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The same public key is used for signing both debug and production code.",
      "ExtendedDescription": "\n\nA common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly.\n\n\nDuring the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware's capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system.\n\n\nOnce the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker.\n\n\nIf a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "321",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation",
            "Other"
          ],
          "Impact": [
            "Read Memory",
            "Modify Memory",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Varies by Context"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "\n\nCompare the debug key with the production key to make sure that they are not the same.\n",
          "Effectiveness": "High"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "\n\nCompare the debug key with the production key to make sure that they are not the same.\n",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use different keys for Production and Debug"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example illustrates the danger of using the same public key for debug and production."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "Suppose the product design requires frugality of silicon real estate. Assume that originally the architecture allows just enough storage for two 2048-bit RSA keys in the fuse: one to be used for debug and the other for production. However, in the meantime, a business decision is taken to make the security future-proof beyond 2030, which means the architecture needs to use the NIST-recommended 3072-bit keys instead of the originally-planned 2048-bit keys. This means that, at most, one key can be fully stored in the fuses, not two. So the product design team decides to use the same public key for debug and production."
            },
            {
              "Nature": "Informative",
              "Language": "Other",
              "ExampleCode": "Increase the storage so that two different keys of the required size can be stored."
            }
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1292",
      "Name": "Incorrect Conversion of Security Identifiers",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.",
      "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes).\n\n\nA typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other.\n\n\nA common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1294",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Bus/Interface Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Quality Degradation"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system that supports AHB. Let us assume we have a follower agent that only understands OCP. To connect this follower to the leader, a bridge is introduced, i.e., AHB to OCP. \n\n\n The follower has assets to protect accesses from untrusted leaders, and it employs access controls based on policy, (e.g., AES-Key registers for encryption or decryption). The key is 128 bits implemented as a set of four 32-bit registers. The key registers are assets, and register AES_KEY_ACCESS_POLICY is defined to provide the necessary access controls. \n\n\n The AES_KEY_ACCESS_POLICY access-policy register defines which agents with a security identifier in the transaction can access the AES-key registers. The implemented AES_KEY_ACCESS_POLICY has 4 bits where each bit when \"Set\" allows access to the AES-Key registers to the corresponding agent that has the security identifier. The other bits from 31 through 4 are reserved and not used. \n\n|  | \n|\n|  Register  |  Field Description   |\n|  AES_ENC_DEC_KEY_0  |  AES key [0:31] for encryption or decryption Default 0x00000000   |\n|  AES_ENC_DEC_KEY_1  |  AES key [32:63] for encryption or decryption Default 0x00000000   |\n|  AES_ENC_DEC_KEY_2  |  AES key [64:95] for encryption or decryption Default 0x00000000   |\n|  AES_ENC_DEC_KEY_3  |  AES key [96:127] for encryption or decryption Default 0x00000000   |\n|  AES_KEY_ACCESS_POLICY  |  [31:4] Default 0x000000 [3:0] - 0x02 agent with Security Identifier \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers   |\n\n\t\n During conversion of the AHB-to-OCP transaction, the security identifier information must be preserved and passed on to the follower correctly."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "In AHB-to-OCP bridge, the security identifier information conversion is done incorrectly."
            },
            {
              "BodyText": "Because of the incorrect conversion, the security identifier information is either lost or could be modified in such a way that an untrusted leader can access the AES-Key registers."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The conversion of the signals from one protocol (AHB) to another (OCP) must be done while preserving the security identifier correctly."
            }
          ]
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1293",
      "Name": "Missing Source Correlation of Multiple Independent Data",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.",
      "ExtendedDescription": "\n\nTo operate successfully, a product sometimes has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "345",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "654",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This flaw could be introduced during the design of the application or misconfiguration at run time by only specifying a single point of validation."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Operation",
          "Note": "This weakness could be introduced by intentionally failing all but one of the devices used to retrieve the data or by failing the devices that validate the data."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "Read Application Data",
            "Modify Application Data",
            "Gain Privileges or Assume Identity"
          ],
          "Note": "An attacker that may be able to execute a single Person-in-the-Middle attack can subvert a check of an external oracle (e.g. the ACME protocol check for a file on a website), and thus inject an arbitrary reply to the single perspective request to the external oracle."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures."
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1125",
          "Authors": [
            "moparisthebest"
          ],
          "Title": "Validation Vulnerabilities",
          "PublicationYear": "2015",
          "PublicationMonth": "06",
          "PublicationDay": "05",
          "URL": "https://mailarchive.ietf.org/arch/msg/acme/s6Q5PdJP48LEUwgzrVuw_XPKCsM/"
        },
        {
          "ExternalReferenceID": "REF-1126",
          "Authors": [
            "Josh Aas",
            "Daniel McCarney",
            "Roland Shoemaker"
          ],
          "Title": "Multi-Perspective Validation Improves Domain Validation Security",
          "PublicationYear": "2020",
          "PublicationMonth": "02",
          "PublicationDay": "19",
          "URL": "https://letsencrypt.org/2020/02/19/multi-perspective-validation.html"
        },
        {
          "ExternalReferenceID": "REF-1127",
          "Authors": [
            "Miguel Castro",
            "Barbara Liskov"
          ],
          "Title": "Practical Byzantine Fault Tolerance and Proactive Recovery",
          "PublicationYear": "2002",
          "PublicationMonth": "11",
          "PublicationDay": "04",
          "URL": "https://dl.acm.org/doi/pdf/10.1145/571637.571640",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1294",
      "Name": "Insecure Security Identifier Mechanism",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.",
      "ExtendedDescription": "\n\nSystems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges.\n\n\nA broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Bus/Interface Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Quality Degradation"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing."
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "681"
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1295",
      "Name": "Debug Messages Revealing Unnecessary Information",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.",
      "ExtendedDescription": "\n\nDebug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the \"security by obscurity\" factor. While \"security by obscurity\" alone is insufficient, it can help as a part of \"Defense-in-depth\". \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "200",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "209",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control",
            "Accountability",
            "Authentication",
            "Authorization",
            "Non-Repudiation"
          ],
          "Impact": [
            "Read Memory",
            "Bypass Protection Mechanism",
            "Gain Privileges or Assume Identity",
            "Varies by Context"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example here shows how an attacker can take advantage of unnecessary information in debug messages."
            },
            {
              "BodyText": "Example 1: Suppose in response to a Test Access Port (TAP) chaining request the debug message also reveals the current TAP hierarchy (the full topology) in addition to the success/failure message."
            },
            {
              "BodyText": "Example 2: In response to a password-filling request, the debug message, instead of a simple Granted/Denied response, prints an elaborate message, \"The user-entered password does not match the actual password stored in <directory name>.\""
            },
            {
              "BodyText": "The result of the above examples is that the user is able to gather additional unauthorized information about the system from the debug messages."
            },
            {
              "BodyText": "The solution is to ensure that Debug messages do not reveal additional details."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-25476",
          "Description": "Digital Rights Management (DRM) capability for mobile platform leaks pointer information, simplifying ASLR bypass",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-25476"
        },
        {
          "Reference": "CVE-2020-24491",
          "Description": "Processor generates debug message that contains sensitive information (\"addresses of memory transactions\").",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-24491"
        },
        {
          "Reference": "CVE-2017-18326",
          "Description": "modem debug messages include cryptographic keys",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-18326"
        }
      ],
      "RelatedAttackPatterns": [
        "121"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1112",
          "Title": "Android Security Bulletin - December 2018",
          "URL": "https://source.android.com/security/bulletin/2018-12-01.html",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1296",
      "Name": "Incorrect Chaining or Granularity of Debug Components",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product's debug components contain incorrect chaining or granularity of debug components.",
      "ExtendedDescription": "\n\nFor debugging and troubleshooting a chip, several hardware design elements are often implemented, including:\n\n\n  - Various Test Access Ports (TAPs) allow boundary scan commands to be executed.\n\n  - For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a \"stimulus and response\" mechanism.\n\n  - Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs.\n\nLogic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Authentication",
            "Authorization",
            "Availability",
            "Accountability"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands",
            "Modify Memory",
            "Modify Files or Directories"
          ],
          "Likelihood": [
            "Medium"
          ],
          "Note": "Depending on the access to debug component(s) erroneously granted, an attacker could use the debug component to gain additional understanding about the system to further an attack and/or execute other commands. This could compromise any security property, including the ones listed above."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
          "Effectiveness": "High"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following example shows how an attacker can take advantage of incorrect chaining or missing granularity of debug components."
            },
            {
              "BodyText": "In a System-on-Chip (SoC), the user might be able to access the SoC-level TAP with a certain level of authorization. However, this access should not also grant access to all of the internal TAPs (e.g., Core). Separately, if any of the internal TAPs is also stitched to the TAP chain when it should not be because of a logic error, then an attacker can access the internal TAPs as well and execute commands there."
            },
            {
              "BodyText": "As a related example, suppose there is a hierarchy of TAPs (TAP_A is connected to TAP_B and TAP_C, then TAP_B is connected to TAP_D and TAP_E, then TAP_C is connected to TAP_F and TAP_G, etc.). Architecture mandates that the user have one set of credentials for just accessing TAP_A, another set of credentials for accessing TAP_B and TAP_C, etc. However, if, during implementation, the designer mistakenly implements a daisy-chained TAP where all the TAPs are connected in a single TAP chain without the hierarchical structure, the correct granularity of debug components is not implemented and the attacker can gain unauthorized access."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-18347",
          "Description": "Incorrect access control in RDP Level 1 on STMicroelectronics STM32F0 series devices allows physically present attackers to extract the device's protected firmware via a special sequence of Serial Wire Debug (SWD) commands because there is a race condition between full initialization of the SWD interface and the setup of flash protection.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-18347"
        },
        {
          "Reference": "CVE-2020-1791",
          "Description": "There is an improper authorization vulnerability in several smartphones. The system has a logic-judging error, and, under certain scenarios, a successful exploit could allow the attacker to switch to third desktop after a series of operations in ADB mode. (Vulnerability ID: HWPSIRT-2019-10114).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-1791"
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "702"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1297",
      "Name": "Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.",
      "ExtendedDescription": "\n\nIn contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor.\n\n\nLogic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "285",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Authentication",
            "Authorization",
            "Availability",
            "Accountability",
            "Non-Repudiation"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands",
            "Modify Memory",
            "Modify Files or Directories"
          ],
          "Likelihood": [
            "Medium"
          ],
          "Note": "The impact depends on the confidential information itself and who is inadvertently granted access. For example, if the confidential information is a key that can unlock all the parts of a generation, the impact could be severe."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
          "Effectiveness": "High"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\n  - Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an \"unlock device\" request comes, it only unlocks that specific part and not all the parts for that product line.\n\n  - Ensure that the product's non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT.\n\n  - Arrange to secure all communication between an OSAT facility and the chipmaker.\n\n",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following example shows how an attacker can take advantage of a piece of confidential information that has not been protected from the OSAT."
            },
            {
              "BodyText": "Suppose the preproduction device contains NVM (a storage medium that by definition/design can retain its data without power), and this NVM contains a key that can unlock all the parts for that generation. An OSAT facility accidentally leaks the key."
            },
            {
              "BodyText": "Compromising a key that can unlock all the parts of a generation can be devastating to a chipmaker."
            },
            {
              "BodyText": "The likelihood of such a compromise can be reduced by ensuring all memories on the preproduction device are properly scrubbed."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1113",
          "Authors": [
            "Muhammad Yasin",
            "Abhrajit  Sengupta",
            "Mohammed Thari Nabeel",
            "Mohammed  Ashraf",
            "Jeyavijayan (JV) Rajendran",
            "Ozgur  Sinanoglu"
          ],
          "Title": "Provably-Secure Logic Locking: From Theory To Practice",
          "URL": "https://dl.acm.org/doi/10.1145/3133956.3133985",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1114",
          "Authors": [
            "Muhammad Yasin",
            "Jeyavijayan (JV) Rajendran",
            "Ozgur  Sinanoglu"
          ],
          "Title": "Trustworthy Hardware Design: Combinational Logic Locking Techniques",
          "URL": "https://link.springer.com/book/10.1007/978-3-030-15334-2",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry might be subject to CWE Scope Exclusion SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear); SCOPE.HUMANPROC (Human/organizational process; and/or SCOPE.CUSTREL (Not customer-relevant)."
        },
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1298",
      "Name": "Hardware Logic Contains Race Conditions",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "A race condition in the hardware logic results in undermining security guarantees of the system.",
      "ExtendedDescription": "\n\nA race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "362",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Gain Privileges or Assume Identity",
            "Alter Execution Logic"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The code below shows a 2x1 multiplexor using logic gates. Though the code shown below results in the minimum gate solution, it is disjoint and causes glitches."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "// 2x1 Multiplexor using logic-gates\n\n module glitchEx(\n\n```\n\t input wire in0, in1, sel,\n\t output wire z\n );\n wire not_sel;\n wire and_out1, and_out2;\n assign not_sel = ~sel;\n assign and_out1 = not_sel & in0;\n assign and_out2 = sel & in1;\n // Buggy line of code:\n assign z = and_out1 | and_out2; // glitch in signal z\n endmodule\n```"
            },
            {
              "BodyText": "The buggy line of code, commented above, results in signal 'z' periodically changing to an unwanted state. Thus, any logic that references signal 'z' may access it at a time when it is in this unwanted state. This line should be replaced with the line shown below in the Good Code Snippet which results in signal 'z' remaining in a continuous, known, state. Reference for the above code, along with waveforms for simulation can be found in the references below."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "assign z <= and_out1 or and_out2 or (in0 and in1);"
            },
            {
              "BodyText": "This line of code removes the glitch in signal z."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the DMA (Direct Memory Access) module of the buggy OpenPiton SoC of HACK@DAC'21. The DMA contains a finite-state machine (FSM) for accessing the permissions using the physical memory protection (PMP) unit.\n\n\nPMP provides secure regions of physical memory against unauthorized access. It allows an operating system or a hypervisor to define a series of physical memory regions and then set permissions for those regions, such as read, write, and execute permissions. When a user tries to access a protected memory area (e.g., through DMA), PMP checks the access of a PMP address (e.g., pmpaddr_i) against its configuration (pmpcfg_i). If the access violates the defined permissions (e.g., CTRL_ABORT), the PMP can trigger a fault or an interrupt. This access check is implemented in the pmp parametrized module in the below code snippet. The below code assumes that the state of the pmpaddr_i and pmpcfg_i signals will not change during the different DMA states (i.e., CTRL_IDLE to CTRL_DONE) while processing a DMA request (via dma_ctrl_reg). The DMA state machine is implemented using a case statement (not shown in the code snippet)."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module dma # (...)(...);\n ...\n\n```\n\t input [7:0] [16-1:0] pmpcfg_i;\n\t input logic [16-1:0][53:0] pmpaddr_i;\n\t ...\n\t //// Save the input command\n\t always @ (posedge clk_i or negedge rst_ni)\n\t\t begin: save_inputs\n\t\t if (!rst_ni)\n\t\t\t begin\n\t\t\t ...\n\t\t\t end\n\t\t else\n\t\t\t begin\n\t\t\t\t if (dma_ctrl_reg == CTRL_IDLE || dma_ctrl_reg == CTRL_DONE)\n\t\t\t\t begin\n\t\t\t\t ...\n\t\t\t\t end\n\t\t\t end\n\t\t end // save_inputs\n\t\t ...\n\t\t // Load/store PMP check\n\t\t pmp #(\n\t\t\t .XLEN ( 64 ),\n\t\t\t .PMP_LEN ( 54 ),\n\t\t\t .NR_ENTRIES ( 16 )\n\t\t ) i_pmp_data (\n\t\t\t .addr_i ( pmp_addr_reg ),\n\t\t\t .priv_lvl_i ( riscv::PRIV_LVL_U ),\n\t\t\t .access_type_i ( pmp_access_type_reg ),\n\t\t\t // Configuration\n\t\t\t .conf_addr_i ( \n```\npmpaddr_i**  ),\n\t\t\t .conf_i ( \n\t\t\t **pmpcfg_i**  ),\n\t\t\t .allow_o ( pmp_data_allow )\n\t\t\t );\n\t\t endmodule"
            },
            {
              "BodyText": "However, the above code [REF-1394] allows the values of pmpaddr_i and pmpcfg_i to be changed through DMA's input ports. This causes a race condition and will enable attackers to access sensitive addresses that the configuration is not associated with.\n\n\nAttackers can initialize the DMA access process (CTRL_IDLE) using pmpcfg_i for a non-privileged PMP address (pmpaddr_i). Then during the loading state (CTRL_LOAD), attackers can replace the non-privileged address in pmpaddr_i with a privileged address without the requisite authorized access configuration.\n\n\nTo fix this issue (see [REF-1395]), the value of the pmpaddr_i and pmpcfg_i signals should be stored in local registers (pmpaddr_reg and pmpcfg_reg at the start of the DMA access process and the pmp module should reference those registers instead of the signals directly. The values of the registers can only be updated at the start (CTRL_IDLE) or the end (CTRL_DONE) of the DMA access process, which prevents attackers from changing the PMP address in the middle of the DMA access process."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module dma # (...)(...);\n ...\n\n```\n\t input [7:0] [16-1:0] pmpcfg_i; \n\t input logic [16-1:0][53:0] pmpaddr_i;\n\t ...\n```\nreg [7:0] [16-1:0] pmpcfg_reg;** \n\t\n\t **reg [16-1:0][53:0] pmpaddr_reg;** \n\t ...\n\t //// Save the input command\n\t always @ (posedge clk_i or negedge rst_ni)\n\t\n\t```\n\t\t begin: save_inputs\n\t\t if (!rst_ni)\n\t\t\t begin\n\t\t\t ...\n```\npmpaddr_reg <= 'b0 ;** \n\t\t\t\n\t\t\t **pmpcfg_reg <= 'b0 ;** \n\t\t\t end\n\t\t\t else \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t if (dma_ctrl_reg == CTRL_IDLE || dma_ctrl_reg == CTRL_DONE) \n\t\t\t\t begin\n\t\t\t\t ...\n```\npmpaddr_reg <= pmpaddr_i;** \n\t\t\t\t\n\t\t\t\t **pmpcfg_reg <= pmpcfg_i;** \n\t\t\t\t end\n\t\t\t\t end \n\t\t\t end // save_inputs\n\t\t ...\n\t\t // Load/store PMP check\n\t\t pmp #(\n\t\t\n\t\t```\n\t\t\t .XLEN ( 64 ),\n\t\t\t .PMP_LEN ( 54 ),\n\t\t\t .NR_ENTRIES ( 16 )\n\t\t ) i_pmp_data (\n\t\t\t .addr_i ( pmp_addr_reg ),\n\t\t\t .priv_lvl_i ( riscv::PRIV_LVL_U ), // we intend to apply filter on\n\t\t\t // DMA always, so choose the least privilege .access_type_i ( pmp_access_type_reg ),\n\t\t\t // Configuration\n\t\t\t .conf_addr_i ( \n```\npmpaddr_reg**  ),\n\t\t\t .conf_i ( \n\t\t\t **pmpcfg_reg**  ),\n\t\t\t .allow_o ( pmp_data_allow )\n\t\t\t );\n\t\t endmodule"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "26"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1115",
          "Authors": [
            "Meher Krishna Patel"
          ],
          "Title": "FPGA designs with Verilog (section 7.4 Glitches)",
          "URL": "https://verilogguide.readthedocs.io/en/latest/verilog/fsm.html"
        },
        {
          "ExternalReferenceID": "REF-1116",
          "Authors": [
            "Clifford E. Cummings"
          ],
          "Title": "Non-Blocking Assignments in Verilog Synthesis, Coding Styles that Kill!",
          "PublicationYear": "2000",
          "URL": "http://www.sunburst-design.com/papers/CummingsSNUG2000SJ_NBA.pdf"
        },
        {
          "ExternalReferenceID": "REF-1394",
          "Title": "dma.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/dma/dma.sv",
          "URLDate": "2024-02-09"
        },
        {
          "ExternalReferenceID": "REF-1395",
          "Title": "Fix for dma.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/cwe_1298_in_dma/piton/design/chip/tile/ariane/src/dma/dma.sv",
          "URLDate": "2024-02-09"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1299",
      "Name": "Missing Protection Mechanism for Alternate Hardware Interface",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.",
      "ExtendedDescription": "\n\nAn asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.\n\n\nConsider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. \n\n\nAlternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "PeerOf",
          "CweID": "1191",
          "ViewID": "1194",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "420",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "288",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Bus/Interface Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Alter Execution Logic",
            "Bypass Protection Mechanism",
            "Quality Degradation"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
          "Effectiveness": "Defense in Depth"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
          "Effectiveness": "Defense in Depth"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
          "Effectiveness": "Defense in Depth"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-176",
          "Entries": [
            {
              "IntroText": "Register SECURE_ME is located at address 0xF00. A mirror of this register called COPY_OF_SECURE_ME is at location 0x800F00. The register SECURE_ME is protected from malicious agents and only allows access to select, while COPY_OF_SECURE_ME is not. \n\n\n Access control is implemented using an allowlist (as indicated by acl_oh_allowlist). The identity of the initiator of the transaction is indicated by the one hot input, incoming_id. This is checked against the acl_oh_allowlist (which contains a list of initiators that are allowed to access the asset). \n\n\n Though this example is shown in Verilog, it will apply to VHDL as well."
            },
            {
              "Nature": "Informative",
              "Language": "Verilog",
              "ExampleCode": "module foo_bar(data_out, data_in, incoming_id, address, clk, rst_n);\n output [31:0] data_out;\n input [31:0] data_in, incoming_id, address;\n input clk, rst_n;\n wire write_auth, addr_auth;\n reg [31:0] data_out, acl_oh_allowlist, q;\n assign write_auth = | (incoming_id & acl_oh_allowlist) ? 1 : 0; \n always @*\n\n```\n\t acl_oh_allowlist <= 32'h8312; \n assign addr_auth = (address == 32'hF00) ? 1: 0;\n always @ (posedge clk or negedge rst_n)\n\t if (!rst_n)\n\t\t begin\n\t\t\t q <= 32'h0;\n\t\t\t data_out <= 32'h0;\n\t\t end\n\t else\n\t\t begin\n\t\t\t q <= (addr_auth & write_auth) ? data_in: q;\n\t\t\t data_out <= q;\n\t\t end\n\t end\n endmodule\n```"
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "assign addr_auth = (address == 32'hF00) ? 1: 0;"
            },
            {
              "BodyText": "The bugged line of code is repeated in the Bad example above. The weakness arises from the fact that the SECURE_ME register can be modified by writing to the shadow register COPY_OF_SECURE_ME. The address of COPY_OF_SECURE_ME should also be included in the check. That buggy line of code should instead be replaced as shown in the Good Code Snippet below."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "assign addr_auth = (address == 32'hF00 || address == 32'h800F00) ? 1: 0;"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-38399",
          "Description": "Missing protection mechanism on serial connection allows for arbitrary OS command execution.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-38399"
        },
        {
          "Reference": "CVE-2020-9285",
          "Description": "Mini-PCI Express slot does not restrict direct memory access.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9285"
        },
        {
          "Reference": "CVE-2020-8004",
          "Description": "When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8004"
        },
        {
          "Reference": "CVE-2017-18293",
          "Description": "When GPIO is protected by blocking access to corresponding GPIO resource registers, protection can be bypassed by writing to the corresponding banked GPIO registers instead.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-18293"
        },
        {
          "Reference": "CVE-2020-15483",
          "Description": "monitor device allows access to physical UART debug port without authentication",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-15483"
        }
      ],
      "RelatedAttackPatterns": [
        "457",
        "554"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1300",
      "Name": "Improper Protection of Physical Side Channels",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.",
      "ExtendedDescription": "\n\nAn adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain.\n\n\nPhysical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "203",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "203",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        },
        {
          "Ordinality": "Resultant"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Perform a set of leakage detection tests such as the procedure outlined in the Test Vector Leakage Assessment (TVLA) test requirements for AES [REF-1230]. TVLA is the basis for the ISO standard 17825 [REF-1229]. A separate methodology is provided by [REF-1228]. Note that sole reliance on this method might not yield expected results [REF-1239] [REF-1240].",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Manual Analysis",
          "Description": "\n\nPost-silicon, perform full side-channel attacks (penetration testing) covering as many known leakage models as possible against test code.\n",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Manual Analysis",
          "Description": "\n\nPre-silicon - while the aforementioned TVLA methods can be performed post-silicon, models of device power consumption or other physical emanations can be built from information present at various stages of the hardware design process before fabrication. TVLA or known side-channel attacks can be applied to these simulated traces and countermeasures applied before tape-out. Academic research in this field includes [REF-1231] [REF-1232] [REF-1233].\n",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a device that checks a passcode to unlock the screen."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "As each character of the PIN number is entered, a correct character exhibits one current pulse shape while an incorrect character exhibits a different current pulse shape."
            },
            {
              "BodyText": "PIN numbers used to unlock a cell phone should not exhibit any characteristics about themselves. This creates a side channel. An attacker could monitor the pulses using an oscilloscope or other method. Once the first character is correctly guessed (based on the oscilloscope readings), they can then move to the next character, which is much more efficient than the brute force method of guessing every possible sequence of characters."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Rather than comparing each character to the correct PIN value as it is entered, the device could accumulate the PIN in a register, and do the comparison all at once at the end. Alternatively, the components for the comparison could be modified so that the current pulse shape is the same regardless of the correctness of the entered character."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Consider the device vulnerability CVE-2021-3011, which affects certain microcontrollers [REF-1221]. The Google Titan Security Key is used for two-factor authentication using cryptographic algorithms. The device uses an internal secret key for this purpose and exchanges information based on this key for the authentication. If this internal secret key and the encryption algorithm were known to an adversary, the key function could be duplicated, allowing the adversary to masquerade as the legitimate user."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "The local method of extracting the secret key consists of plugging the key into a USB port and using electromagnetic (EM) sniffing tools and computers."
            },
            {
              "Nature": "Good",
              "ExampleCode": "Several solutions could have been considered by the manufacturer. For example, the manufacturer could shield the circuitry in the key or add randomized delays, indirect calculations with random values involved, or randomly ordered calculations to make extraction much more difficult or a combination of these techniques."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The code snippet provided here is part of the modular exponentiation module found in the HACK@DAC'21 Openpiton System-on-Chip (SoC), specifically within the RSA peripheral [REF-1368]. Modular exponentiation, denoted as \"a^b mod n,\" is a crucial operation in the RSA public/private key encryption. In RSA encryption, where 'c' represents ciphertext, 'm' stands for a message, and 'd' corresponds to the private key, the decryption process is carried out using this modular exponentiation as follows: m = c^d mod n, where 'n' is the result of multiplying two large prime numbers."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n module mod_exp\n\n```\n\t ...\n\t `UPDATE: begin\n\t\t if (exponent_reg != 'd0) begin\n```\nif (exponent_reg[0])** \n\t\t\t\n\t\t\t```\n```\nresult_reg <= result_next;** \n\t\t\t\t base_reg <= base_next;\n\t\t\t exponent_reg <= exponent_next;\n\t\t\t state <= `UPDATE;\n\t\t\t ...\n\t endmodule"
            },
            {
              "BodyText": "The vulnerable code shows a buggy implementation of binary exponentiation where it updates the result register (result_reg) only when the corresponding exponent bit (exponent_reg[0]) is set to 1. However, when this exponent bit is 0, the output register is not updated. It's important to note that this implementation introduces a physical power side-channel vulnerability within the RSA core. This vulnerability could expose the private exponent to a determined physical attacker. Such exposure of the private exponent could lead to a complete compromise of the private key."
            },
            {
              "BodyText": "To address mitigation requirements, the developer can develop the module by minimizing dependency on conditions, particularly those reliant on secret keys. In situations where branching is unavoidable, developers can implement masking mechanisms to obfuscate the power consumption patterns exhibited by the module (see good code example). Additionally, certain algorithms, such as the Karatsuba algorithm, can be implemented as illustrative examples of side-channel resistant algorithms, as they necessitate only a limited number of branch conditions [REF-1369]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n module mod_exp\n\n```\n\t ...\n\t `UPDATE: begin\n\t\t if (exponent_reg != 'd0) begin\n```\nif (exponent_reg[0]) begin** \n\t\t\t\n\t\t\t```\n```\nresult_reg <= result_next;** \n\t\t\t\t\n\t\t\t **end else begin** \n\t\t\t\n\t\t\t```\n```\nmask_reg <= result_next;** \n\t\t\t\t\n\t\t\t **end** \n\t\t\t base_reg <= base_next;\n\t\t\t exponent_reg <= exponent_next;\n\t\t\t state <= `UPDATE;\n\t\t\t ...\n\t endmodule"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-35888",
          "Description": "Power side-channels leak secret information from processor",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-35888"
        },
        {
          "Reference": "CVE-2021-3011",
          "Description": "electromagnetic-wave side-channel in security-related microcontrollers allows extraction of private key",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3011"
        },
        {
          "Reference": "CVE-2019-14353",
          "Description": "Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-14353"
        },
        {
          "Reference": "CVE-2020-27211",
          "Description": "Chain: microcontroller system-on-chip contains uses a register value stored in flash to set product protection state on the memory bus but does not contain protection against fault injection (CWE-1319), which leads to an incorrect initialization of the memory bus (CWE-1419) leading the product to be in an unprotected state.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27211"
        },
        {
          "Reference": "CVE-2013-4576",
          "Description": "message encryption software uses certain instruction sequences that allows RSA key extraction using a chosen-ciphertext attack and acoustic cryptanalysis",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2013-4576"
        },
        {
          "Reference": "CVE-2020-28368",
          "Description": "virtualization product allows recovery of AES keys from the guest OS using a side channel attack against a power/energy monitoring interface.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-28368"
        },
        {
          "Reference": "CVE-2019-18673",
          "Description": "power consumption varies based on number of pixels being illuminated in a display, allowing reading of secrets such as the PIN by using the USB interface to measure power consumption",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18673"
        }
      ],
      "FunctionalAreas": [
        "Power"
      ],
      "RelatedAttackPatterns": [
        "189",
        "699"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1117",
          "Authors": [
            "Paul Kocher",
            "Joshua Jaffe",
            "Benjamin Jun"
          ],
          "Title": "Introduction to differential power analysis and related attacks",
          "PublicationYear": "1998",
          "URL": "https://www.rambus.com/wp-content/uploads/2015/08/DPATechInfo.pdf"
        },
        {
          "ExternalReferenceID": "REF-1118",
          "Authors": [
            "Dakshi Agrawal",
            "Bruce Archambeault",
            "Josyula R. Rao",
            "Pankaj Rohatgi"
          ],
          "Title": "The EM Side-Channel(s)",
          "PublicationYear": "2007",
          "PublicationMonth": "08",
          "PublicationDay": "24",
          "URL": "https://link.springer.com/content/pdf/10.1007/3-540-36400-5_4.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1119",
          "Authors": [
            "Daniel Genkin",
            "Adi Shamir",
            "Eran Tromer"
          ],
          "Title": "RSA key extraction via low-bandwidth acoustic cryptanalysis",
          "PublicationYear": "2014",
          "PublicationMonth": "06",
          "PublicationDay": "13",
          "URL": "https://www.iacr.org/archive/crypto2014/86160149/86160149.pdf"
        },
        {
          "ExternalReferenceID": "REF-1120",
          "Authors": [
            "Colin O'Flynn"
          ],
          "Title": "Power Analysis for Cheapskates",
          "PublicationYear": "2013",
          "PublicationMonth": "01",
          "PublicationDay": "24",
          "URL": "https://media.blackhat.com/eu-13/briefings/OFlynn/bh-eu-13-for-cheapstakes-oflynn-wp.pdf"
        },
        {
          "ExternalReferenceID": "REF-1055",
          "Authors": [
            "Peter Gutmann"
          ],
          "Title": "Data Remanence in Semiconductor Devices",
          "Publication": "10th USENIX Security Symposium",
          "PublicationYear": "2001",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/legacy/events/sec01/full_papers/gutmann/gutmann.pdf"
        },
        {
          "ExternalReferenceID": "REF-1218",
          "Authors": [
            "Graham Cluley"
          ],
          "Title": "This Black Box Can Brute Force Crack iPhone PIN Passcodes",
          "Publication": "The Mac Security Blog",
          "PublicationYear": "2015",
          "PublicationMonth": "03",
          "PublicationDay": "16",
          "URL": "https://www.intego.com/mac-security-blog/iphone-pin-pass-code/"
        },
        {
          "ExternalReferenceID": "REF-1221",
          "Authors": [
            "Victor Lomne",
            "Thomas Roche"
          ],
          "Title": "A Side Journey to Titan",
          "PublicationYear": "2021",
          "PublicationMonth": "01",
          "PublicationDay": "07",
          "URL": "https://web.archive.org/web/20210107182441/https://ninjalab.io/wp-content/uploads/2021/01/a_side_journey_to_titan.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1228",
          "Authors": [
            "Gilbert Goodwill",
            "Benjamin Jun",
            "Josh Jaffe",
            "Pankaj Rohatgi"
          ],
          "Title": "A testing methodology for side-channel resistance validation",
          "PublicationYear": "2011",
          "URL": "https://csrc.nist.gov/csrc/media/events/non-invasive-attack-testing-workshop/documents/08_goodwill.pdf"
        },
        {
          "ExternalReferenceID": "REF-1229",
          "Authors": [
            "ISO/IEC"
          ],
          "Title": "ISO/IEC 17825:2016: Testing methods for the mitigation of non-invasive attack classes against cryptographic modules",
          "PublicationYear": "2016",
          "URL": "https://www.iso.org/standard/60612.html"
        },
        {
          "ExternalReferenceID": "REF-1230",
          "Authors": [
            "Cryptography Research Inc."
          ],
          "Title": "Test Vector Leakage Assessment (TVLA) Derived Test Requirements (DTR) with AES",
          "PublicationYear": "2015",
          "PublicationMonth": "08",
          "URL": "https://www.rambus.com/wp-content/uploads/2015/08/TVLA-DTR-with-AES.pdf"
        },
        {
          "ExternalReferenceID": "REF-1231",
          "Section": "pp. 305-319",
          "Authors": [
            "Danilo \u0160ija\u02c7ci\u00b4",
            "Josep Balasch",
            "Bohan Yang",
            "Santosh Ghosh",
            "Ingrid Verbauwhede"
          ],
          "Title": "Towards efficient and automated side-channel evaluations at design time",
          "Publication": "Journal of Cryptographic Engineering, 10(4)",
          "PublicationYear": "2020",
          "URL": "https://www.esat.kuleuven.be/cosic/publications/article-3204.pdf"
        },
        {
          "ExternalReferenceID": "REF-1232",
          "Section": "pp. 123-130",
          "Authors": [
            "Amit Kumar",
            "Cody Scarborough",
            "Ali Yilmaz",
            "Michael Orshansky"
          ],
          "Title": "Efficient simulation of EM side-channel attack resilience",
          "Publication": "IEEE/ACM International Conference on Computer-Aided Design (ICCAD)",
          "PublicationYear": "2017",
          "URL": "https://dl.acm.org/doi/pdf/10.5555/3199700.3199717",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1233",
          "Authors": [
            "Yuan Yao",
            "Tuna Tufan",
            "Tarun Kathuria",
            "Baris Ege",
            "Ulkuhan Guler",
            "Patrick Schaumont"
          ],
          "Title": "Pre-silicon Architecture Correlation Analysis (PACA): Identifying and Mitigating the Source of Side-channel Leakage at Gate-level",
          "PublicationYear": "2021",
          "PublicationMonth": "04",
          "PublicationDay": "21",
          "Publisher": "IACR Cryptology ePrint Archive",
          "URL": "https://eprint.iacr.org/2021/530.pdf"
        },
        {
          "ExternalReferenceID": "REF-1234",
          "Authors": [
            "Elisabeth Oswald",
            "Thomas Popp",
            "Stefan Mangard"
          ],
          "Title": "Power Analysis Attacks - Revealing the Secrets of Smart Cards",
          "PublicationYear": "2007",
          "URL": "https://link.springer.com/book/10.1007/978-0-387-38162-6",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1235",
          "Authors": [
            "David Oswald",
            "Bastian Richter",
            "Christof Paar"
          ],
          "Title": "Side-Channel Attacks on the Yubikey 2 One-Time Password Generator",
          "PublicationYear": "2013",
          "PublicationMonth": "06",
          "PublicationDay": "14",
          "URL": "https://www.emsec.ruhr-uni-bochum.de/media/crypto/veroeffentlichungen/2014/02/04/paper_yubikey_sca.pdf"
        },
        {
          "ExternalReferenceID": "REF-1239",
          "Authors": [
            "Fran\u00e7ois-Xavier Standaert"
          ],
          "Title": "How (not) to Use Welch's T-test in Side-Channel Security Evaluations",
          "PublicationYear": "2017",
          "PublicationMonth": "02",
          "PublicationDay": "15",
          "Publisher": "IACR Cryptology ePrint Archive",
          "URL": "https://eprint.iacr.org/2017/138.pdf"
        },
        {
          "ExternalReferenceID": "REF-1240",
          "Authors": [
            "Carolyn Whitnall",
            "Elisabeth Oswald"
          ],
          "Title": "A Critical Analysis of ISO 17825 ('Testing methods for the mitigation of non-invasive attack classes against cryptographic modules')",
          "PublicationYear": "2019",
          "PublicationMonth": "09",
          "PublicationDay": "10",
          "Publisher": "IACR Cryptology ePrint Archive",
          "URL": "https://eprint.iacr.org/2019/1013.pdf"
        },
        {
          "ExternalReferenceID": "REF-1285",
          "Authors": [
            "Texas Instruments"
          ],
          "Title": "Physical Security Attacks Against Silicon Devices",
          "PublicationYear": "2022",
          "PublicationMonth": "01",
          "PublicationDay": "31",
          "URL": "https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420"
        },
        {
          "ExternalReferenceID": "REF-1286",
          "Section": "1.2 / 5",
          "Authors": [
            "Lennert Wouters",
            "Benedikt Gierlichs",
            "Bart Preneel"
          ],
          "Title": "On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "14",
          "URL": "https://eprint.iacr.org/2022/328.pdf"
        },
        {
          "ExternalReferenceID": "REF-1368",
          "Title": "mod_exp.v",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/rsa/mod_exp.v#L46:L47",
          "URLDate": "2023-07-15"
        },
        {
          "ExternalReferenceID": "REF-1369",
          "Title": "Fix CWE-1300",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/37e42f724c14b8e4cc8f6e13462c12a492778219/piton/design/chip/tile/ariane/src/rsa/mod_exp.v#L47:L51",
          "URLDate": "2023-09-29"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1301",
      "Name": "Insufficient or Incomplete Data Removal within Hardware Component",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.",
      "ExtendedDescription": "\n\nPhysical properties of hardware devices, such as remanence of magnetic media, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed.\n\n\nRecovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Alter the method of erasure, add protection of media, or destroy the media to protect the data."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-8575",
          "Description": "Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been \"factory-default reset\" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-8575"
        }
      ],
      "RelatedAttackPatterns": [
        "37"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1117",
          "Authors": [
            "Paul Kocher",
            "Joshua Jaffe",
            "Benjamin Jun"
          ],
          "Title": "Introduction to differential power analysis and related attacks",
          "PublicationYear": "1998",
          "URL": "https://www.rambus.com/wp-content/uploads/2015/08/DPATechInfo.pdf"
        },
        {
          "ExternalReferenceID": "REF-1118",
          "Authors": [
            "Dakshi Agrawal",
            "Bruce Archambeault",
            "Josyula R. Rao",
            "Pankaj Rohatgi"
          ],
          "Title": "The EM Side-Channel(s)",
          "PublicationYear": "2007",
          "PublicationMonth": "08",
          "PublicationDay": "24",
          "URL": "https://link.springer.com/content/pdf/10.1007/3-540-36400-5_4.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1119",
          "Authors": [
            "Daniel Genkin",
            "Adi Shamir",
            "Eran Tromer"
          ],
          "Title": "RSA key extraction via low-bandwidth acoustic cryptanalysis",
          "PublicationYear": "2014",
          "PublicationMonth": "06",
          "PublicationDay": "13",
          "URL": "https://www.iacr.org/archive/crypto2014/86160149/86160149.pdf"
        },
        {
          "ExternalReferenceID": "REF-1120",
          "Authors": [
            "Colin O'Flynn"
          ],
          "Title": "Power Analysis for Cheapskates",
          "PublicationYear": "2013",
          "PublicationMonth": "01",
          "PublicationDay": "24",
          "URL": "https://media.blackhat.com/eu-13/briefings/OFlynn/bh-eu-13-for-cheapstakes-oflynn-wp.pdf"
        },
        {
          "ExternalReferenceID": "REF-1055",
          "Authors": [
            "Peter Gutmann"
          ],
          "Title": "Data Remanence in Semiconductor Devices",
          "Publication": "10th USENIX Security Symposium",
          "PublicationYear": "2001",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/legacy/events/sec01/full_papers/gutmann/gutmann.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1302",
      "Name": "Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.",
      "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions.\n\n\nA weakness that can exist in such transaction schemes is that the source agent does not consistently include the necessary Security Identifier with the transaction. If the Security Identifier is missing, the destination agent might drop the message (resulting in an inadvertent Denial-of-Service (DoS)) or take inappropriate action by default in its attempt to execute the transaction, resulting in privilege escalation or provision of unintended access.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1294",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Crash, Exit, or Restart",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Transaction details must be reviewed for design inconsistency and common weaknesses."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a system with a register for storing AES key for encryption or decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key registers are assets, and the register AES_KEY_ACCESS_POLICY is defined to provide the necessary access controls.\n\n\nThe access-policy register defines which agents with a security identifier in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a security identifier. There could be a maximum of 32 security identifiers that are allowed accesses to the AES-key registers. The number of the bit when set (i.e., \"1\") allows for a respective action from an agent whose identity matches the number of the bit; if set to \"0\" (i.e., Clear), it disallows the respective action to that corresponding agent."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption, Default 0x00000000  |\n| AES_KEY_ACCESS_POLICY | [31:0] Default 0x00000004 - agent with Security Identifier \"2\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers  |"
            },
            {
              "BodyText": "The originator sends a transaction with no security identifier, i.e., meaning the value is \"0\" or NULL. The AES-Key-access register does not allow the necessary action and drops the transaction because the originator failed to include the required security identifier."
            },
            {
              "Nature": "Good",
              "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption, Default 0x00000000  |\n| AES_KEY_ACCESS_POLICY | [31:0] Default 0x00000002 - agent with security identifier \"2\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers  |"
            },
            {
              "BodyText": "The originator should send a transaction with Security Identifier \"2\" which will allow access to the AES-Key-access register and allow encryption and decryption operations."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "121",
        "681"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1303",
      "Name": "Non-Transparent Sharing of Microarchitectural Resources",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",
      "ExtendedDescription": "\n\nModern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context.\n\n\nSome examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel.\n\n\nIf the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1189",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "203",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data",
            "Read Memory"
          ],
          "Note": "Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers."
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "On some processors the hardware indirect branch predictor is shared between execution contexts, for example, between sibling SMT threads. When SMT thread A executes an indirect branch to a target address X, this target may be temporarily stored by the indirect branch predictor. A subsequent indirect branch mis-prediction for SMT thread B could speculatively execute instructions at X (or at a location in B's address space that partially aliases X). Even though the processor rolls back the architectural effects of the mis-predicted indirect branch, the memory accesses alter data cache state, which is not rolled back after the indirect branch is resolved."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "663"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1121",
          "Authors": [
            "Moritz Lipp",
            "Michael Schwarz",
            "Daniel Gruss",
            "Thomas Prescher",
            "Werner Haas",
            "Anders Fogh",
            "Jann Horn",
            "Stegfan Mangard",
            "Paul Kocher",
            "Daniel Genkin",
            "Yuval Yarom",
            "Mike Hamberg"
          ],
          "Title": "Meltdown: Reading Kernel Memory from User Space",
          "PublicationYear": "2018",
          "PublicationMonth": "01",
          "PublicationDay": "03",
          "URL": "https://meltdownattack.com/meltdown.pdf"
        },
        {
          "ExternalReferenceID": "REF-1122",
          "Authors": [
            "Moritz Lipp",
            "Michael Schwarz",
            "Daniel Gruss",
            "Thomas Prescher",
            "Werner Haas",
            "Anders Fogh",
            "Jann Horn",
            "Stegfan Mangard",
            "Paul Kocher",
            "Daniel Genkin",
            "Yuval Yarom",
            "Mike Hamberg"
          ],
          "Title": "Spectre Attacks: Exploiting Speculative Execution",
          "PublicationYear": "2018",
          "PublicationMonth": "01",
          "PublicationDay": "03",
          "URL": "https://spectreattack.com/spectre.pdf"
        },
        {
          "ExternalReferenceID": "REF-1123",
          "Authors": [
            "Dmitry Evtyushkin",
            "Dmitry Ponomarev",
            "Nael Abu-Ghazaleh"
          ],
          "Title": "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR",
          "PublicationYear": "2016",
          "PublicationMonth": "10",
          "PublicationDay": "19",
          "URL": "https://ieeexplore.ieee.org/abstract/document/7783743/"
        },
        {
          "ExternalReferenceID": "REF-1124",
          "Authors": [
            "Qian Ge",
            "Yuval Yarom",
            "David Cock",
            "Gernot Heiser"
          ],
          "Title": "A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware",
          "PublicationYear": "2016",
          "PublicationMonth": "10",
          "PublicationDay": "24",
          "URL": "https://eprint.iacr.org/2016/613.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. Finally, this entry's demonstrative example might not be appropriate. As a result, this entry might change significantly in CWE 4.10."
        }
      ]
    },
    {
      "ID": "1304",
      "Name": "Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product performs a power save/restore\n            operation, but it does not ensure that the integrity of\n            the configuration state is maintained and/or verified between\n\t    the beginning and ending of the operation.",
      "ExtendedDescription": "\n\nBefore powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "345",
          "ViewID": "1000"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1271",
          "ViewID": "1194"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Weakness introduced via missing internal integrity guarantees during power save/restore"
        },
        {
          "Phase": "Integration",
          "Note": "Weakness introduced via missing external integrity verification during power save/restore"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "DoS: Instability",
            "DoS: Crash, Exit, or Restart",
            "DoS: Resource Consumption (Other)",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Alter Execution Logic",
            "Quality Degradation",
            "Unexpected State",
            "Reduce Maintainability",
            "Reduce Performance",
            "Reduce Reliability"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP's configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following pseudo code demonstrates the power save/restore workflow which may lead to weakness through a lack of validation of the config state after restore."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "void save_config_state()\n {\n\n```\n\t void* cfg;\n\t cfg = get_config_state();\n\t save_config_state(cfg);\n\t go_to_sleep();\n }\n void restore_config_state()\n {\n\t void* cfg;\n\t cfg = get_config_file();\n\t load_config_file(cfg);\n }\n```"
            },
            {
              "BodyText": "The following pseudo-code is the proper workflow for the integrity checking mitigation:"
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "void save_config_state()\n {\n\n```\n\t void* cfg;\n\t void* sha;\n\t cfg = get_config_state();\n\t save_config_state(cfg);\n\t // save hash(cfg) to trusted location\n\t sha = get_hash_of_config_state(cfg);\n\t save_hash(sha); \n\t go_to_sleep();\n }\n void restore_config_state()\n {\n\t void* cfg;\n\t void* sha_1, sha_2;\n\t cfg = get_config_file();\n\t // restore hash of config from trusted memory\n\t sha_1 = get_persisted_sha_value();\n\t sha_2 = get_hash_of_config_state(cfg);\n\t if (sha_1 != sha_2)\n\t\t assert_error_and_halt();\n\t load_config_file(cfg);\n }\n```"
            },
            {
              "BodyText": "It must be noted that in the previous example of good pseudo code, the memory (where the hash of the config state is stored) must be trustworthy while the hardware is between the power save and restore states."
            }
          ]
        }
      ],
      "FunctionalAreas": [
        "Power"
      ],
      "RelatedAttackPatterns": [
        "176"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1310",
      "Name": "Missing Ability to Patch ROM Code",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.",
      "ExtendedDescription": "\n\nA System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use.\n\n\nA common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1329",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This issue could be introduced during hardware architecture and design and can be identified later during Testing."
        },
        {
          "Phase": "Implementation",
          "Note": "This issue could be introduced during implementation and can be identified later during Testing."
        },
        {
          "Phase": "Integration",
          "Note": "This issue could be introduced during integration and can be identified later during Testing."
        },
        {
          "Phase": "Manufacturing",
          "Note": "This issue could be introduced during manufacturing and can be identified later during Testing."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context",
            "Reduce Maintainability"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "When the system is unable to be patched, it can be left in a vulnerable state."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Secure patch support to allow ROM code to be patched on the next boot.",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-146",
          "Entries": [
            {
              "IntroText": "A System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch."
            },
            {
              "BodyText": "ROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the SoC peripheral wrapper inside the buggy OpenPiton SoC of HACK@DAC'21. The wrapper is used for connecting the communications between SoC peripherals, such as crypto-engines, direct memory access (DMA), reset controllers, JTAG, etc. The secure implementation of the SoC wrapper should allow users to boot from a ROM for Linux (i_bootrom_linux) or from a patchable ROM (i_bootrom_patch) if the Linux bootrom has security or functional issues.The example code is taken from the SoC peripheral wrapper inside the buggy OpenPiton SoC of HACK@DAC'21. The wrapper is used for connecting the communications between SoC peripherals, such as crypto-engines, direct memory access (DMA), reset controllers, JTAG, etc. The secure implementation of the SoC wrapper should allow users to boot from a ROM for Linux (i_bootrom_linux) or from a patchable ROM (i_bootrom_patch) if the Linux bootrom has security or functional issues."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n\n```\n\t bootrom i_bootrom_patch (\n\t\t .clk_i ,\n\t\t .req_i ( rom_req ),\n\t\t .addr_i ( rom_addr ),\n\t\t .rdata_o ( rom_rdata_patch )\n\t );\n\t bootrom_linux i_bootrom_linux (\n\t\t .clk_i ,\n\t\t .req_i ( rom_req ),\n\t\t .addr_i ( rom_addr ),\n\t\t .rdata_o ( rom_rdata_linux )\n\t );\n```\nassign rom_rdata = (ariane_boot_sel_i) ? rom_rdata_linux : rom_rdata_linux;** \n ..."
            },
            {
              "BodyText": "The above implementation causes the ROM data to be hardcoded for the linux system (rom_rdata_linux) regardless of the value of ariane_boot_sel_i. Therefore, the data (rom_rdata_patch) from the patchable ROM code is never used [REF-1396].\n\n\nThis weakness disables the ROM's ability to be patched. If attackers uncover security vulnerabilities in the ROM, the users must replace the entire device. Otherwise, the weakness exposes the system to a vulnerable state forever.\n\n\nA fix to this issue is to enable rom_rdata to be selected from the patchable rom (rom_rdata_patch) [REF-1397]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "...\n\n```\n\t bootrom i_bootrom_patch (\n\t\t .clk_i ,\n\t\t .req_i ( rom_req ),\n\t\t .addr_i ( rom_addr ),\n\t\t .rdata_o ( rom_rdata_patch )\n\t );\n\t bootrom_linux i_bootrom_linux (\n\t\t .clk_i ,\n\t\t .req_i ( rom_req ),\n\t\t .addr_i ( rom_addr ),\n\t\t .rdata_o ( rom_rdata_linux )\n\t );\n```\nassign rom_rdata = (ariane_boot_sel_i) ? rom_rdata_patch : rom_rdata_linux;** \n ..."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "682"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1396",
          "Title": "riscv_peripherals.sv line 534",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/75e5c0700b5a02e744f006fe8a09ff3c2ccdd32d/piton/design/chip/tile/ariane/openpiton/riscv_peripherals.sv#L534",
          "URLDate": "2024-02-12"
        },
        {
          "ExternalReferenceID": "REF-1397",
          "Title": "Fix for riscv_peripherals.sv line 534",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/cwe_1310_riscv_peripheral/piton/design/chip/tile/ariane/openpiton/riscv_peripherals.sv#L534",
          "URLDate": "2024-02-12"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1311",
      "Name": "Improper Translation of Security Attributes by Fabric Bridge",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.",
      "ExtendedDescription": "\n\nA bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP.\n\n\nThe values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted).\n\n\nA weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Verilog",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "VHDL",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The bridge interfaces between OCP and AHB end points. OCP uses MReqInfo signal to indicate security attributes, whereas AHB uses HPROT signal to indicate the security attributes. The width of MReqInfo can be customized as needed. In this example, MReqInfo is 5-bits wide and carries the privilege level of the OCP controller.\n\n\nThe values 5'h11, 5'h10, 5'h0F, 5'h0D, 5'h0C, 5'h0B, 5'h09, 5'h08, 5'h04, and 5'h02 in MReqInfo indicate that the request is coming from a privileged state of the OCP bus controller. Values 5'h1F, 5'h0E, and 5'h00 indicate untrusted, privilege state.\n\n\nThough HPROT is a 5-bit signal, we only consider the lower, two bits in this example. HPROT values 2'b00 and 2'b10 are considered trusted, and 2'b01 and 2'b11 are considered untrusted.\n\n\nThe OCP2AHB bridge is expected to translate trusted identities on the controller side to trusted identities on the responder side. Similarly, it is expected to translate untrusted identities on the controller side to untrusted identities on the responder side."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module ocp2ahb\n ( \n\n```\n\t ahb_hprot, \n\t ocp_mreqinfo \n ); \n output [1:0] ahb_hprot; // output is 2 bit signal for AHB HPROT\n input [4:0] ocp_mreqinfo; // input is 5 bit signal from OCP MReqInfo\n wire [6:0] p0_mreqinfo_o_temp; // OCP signal that transmits hardware identity of bus controller\n wire y;\n reg [1:0] ahb_hprot;\n // hardware identity of bus controller is in bits 5:1 of p0_mreqinfo_o_temp signal\n assign p0_mreqinfo_o_temp[6:0] = {1'b0, ocp_mreqinfo[4:0], y};\n always @*\n begin\n\t case (p0_mreqinfo_o_temp[4:2])\n\t\t 000: ahb_hprot = 2'b11; // OCP MReqInfo to AHB HPROT mapping\n\t\t 001: ahb_hprot = 2'b00;\n\t\t 010: ahb_hprot = 2'b00;\n\t\t 011: ahb_hprot = 2'b01;\n\t\t 100: ahb_hprot = 2'b00;\n\t\t 101: ahb_hprot = 2'b00;\n\t\t 110: ahb_hprot = 2'b10;\n\t\t 111: ahb_hprot = 2'b00;\n\t endcase\n end\n endmodule\n```"
            },
            {
              "BodyText": "Logic in the case statement only checks for MReqInfo bits 4:2, i.e., hardware-identity bits 3:1. When ocp_mreqinfo is 5'h1F or 5'h0E, p0_mreqinfo_o_temp[2] will be 1. As a result, untrusted IDs from OCP 5'h1F and 5'h0E get translated to trusted ahb_hprot values 2'b00."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180",
        "233"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1312",
      "Name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.",
      "ExtendedDescription": "\n\nFew fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1251",
          "ViewID": "1194"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Dynamic Analysis",
          "Description": "Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The fabric firewall should apply the same protections as the original region to the mirrored regions."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "The fabric firewall should apply the same protections as the original region to the mirrored regions."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A memory-controller IP block is connected to the on-chip fabric in a System on Chip (SoC). The memory controller is configured to divide the memory into four parts: one original and three mirrored regions inside the memory. The upper two bits of the address indicate which region is being addressed. 00 indicates the original region and 01, 10, and 11 are used to address the mirrored regions. All four regions operate in a lock-step manner and are always synchronized. The firewall in the on-chip fabric is programmed to protect the assets in the memory."
            },
            {
              "BodyText": "The firewall only protects the original range but not the mirrored regions."
            },
            {
              "BodyText": "The attacker (as an unprivileged user) sends a write transaction to the mirrored region. The mirrored region has an address with the upper two bits set to \"10\" and the remaining bits of the address pointing to an asset. The firewall does not block this write transaction. Once the write is successful, contents in the protected-memory region are also updated. Thus, the attacker can bypass existing, memory protections."
            },
            {
              "BodyText": "Firewall should protect mirrored regions."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "456",
        "679"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1134",
          "Authors": [
            "Taku Izumi, Fujitsu Limited"
          ],
          "Title": "Address Range Memory Mirroring",
          "PublicationYear": "2016",
          "URL": "https://www.fujitsu.com/jp/documents/products/software/os/linux/catalog/LinuxConJapan2016-Izumi.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1313",
      "Name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.",
      "ExtendedDescription": "\n\nAn adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Integration",
          "Note": "Such issues could be introduced during integration and identified later during Testing or System configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "DoS: Crash, Exit, or Restart",
            "DoS: Instability",
            "DoS: Resource Consumption (CPU)",
            "DoS: Resource Consumption (Memory)",
            "DoS: Resource Consumption (Other)",
            "Execute Unauthorized Code or Commands",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Alter Execution Logic",
            "Quality Degradation",
            "Unexpected State",
            "Reduce Performance",
            "Reduce Reliability"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-33150",
          "Description": "Hardware processor allows activation of test or debug logic at runtime.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33150"
        },
        {
          "Reference": "CVE-2021-0146",
          "Description": "Processor allows the activation of test or debug logic at runtime, allowing escalation of privileges",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-0146"
        }
      ],
      "RelatedAttackPatterns": [
        "121"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1314",
      "Name": "Missing Write Protection for Parametric Data Values",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.",
      "ExtendedDescription": "\n\nVarious sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software.\n\n\nThe limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits.\n\n\nWhile the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "862",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1299",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Sensor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The lack of a requirement to protect parametric values may contribute to this weakness."
        },
        {
          "Phase": "Implementation",
          "Note": "The lack of parametric value protection may be a cause of this weakness."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "Quality Degradation",
            "DoS: Resource Consumption (Other)"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Sensor value manipulation, particularly thermal or power, may allow physical damage to occur or disabling of the device by a false fault shutdown causing a Denial-Of-Service."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Malicious software executes instructions to increase power consumption to the highest possible level while causing the clock frequency to increase to its maximum value. Such a program executing for an extended period of time would likely overheat the device, possibly resulting in permanent damage to the device. \n\n\nA ring, oscillator-based temperature sensor will generally report the sensed value as oscillator frequency rather than degrees centigrade. The temperature sensor will have calibration values that are used to convert the detected frequency into the corresponding temperature in degrees centigrade. \n\n\nConsider a SoC design where the critical maximum temperature limit is set in fuse values to 100C and is not modifiable by software. If the scaled thermal sensor output equals or exceeds this limit, the system is commanded to shut itself down. \n\n\nThe thermal sensor calibration values are programmable through registers that are exposed to system software. These registers allow software to affect the converted temperature output such that the output will never exceed the maximum temperature limit."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The sensor frequency value is scaled by applying the function:\n\n```\n\tSensed Temp = a + b * Sensor Freq\n```\nwhere a and b are the programmable calibration data coefficients. Software sets a and b to zero ensuring the sensed temperature is always zero."
            },
            {
              "BodyText": "This weakness may be addressed by preventing access to a and b."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The sensor frequency value is scaled by applying the function:\n\n```\n\tSensed Temp = a + b * Sensor Freq\n```\nwhere a and b are the programmable calibration data coefficients. Untrusted software is prevented from changing the values of either a or b, preventing this method of manipulating the temperature."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-8252",
          "Description": "Kernel can inject faults in computations during the execution of TrustZone leading to information disclosure in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice and Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-8252"
        }
      ],
      "RelatedAttackPatterns": [
        "1"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1082",
          "Authors": [
            "Adrian Tang",
            "Simha Sethumadhavan",
            "Salvatore Stolfo"
          ],
          "Title": "CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management",
          "URL": "https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1315",
      "Name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.",
      "ExtendedDescription": "\n\nTo support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "System Configuration"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Access Control"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Bypass Protection Mechanism"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability."
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A typical, phone platform consists of the main, compute core or CPU, a DRAM-memory chip, an audio codec, a baseband modem, a power-management-integrated circuit (\"PMIC\"), a connectivity (WiFi and Bluetooth) modem, and several other analog/RF components. The main CPU is the only component that can control transactions, and all the other components are responder-only devices. All the components implement a PCIe end-point to interface with the rest of the platform. The responder devices should have the bus-control-enable bit in the PCIe-end-point register set to 0 in hardware to prevent the devices from controlling transactions to the CPU or other peripherals."
            },
            {
              "BodyText": "The audio-codec chip does not have the bus-controller-enable-register bit hardcoded to 0. There is no platform-firmware flow to verify that the bus-controller-enable bit is set to 0 in all responders."
            },
            {
              "BodyText": "Audio codec can now master transactions to the CPU and other platform components. Potentially, it can modify assets in other platform components to subvert system security."
            },
            {
              "BodyText": "Platform firmware includes a flow to check the configuration of bus-controller-enable bit in all responder devices. If this register bit is set on any of the responders, platform firmware sets it to 0. Ideally, the default value of this register bit should be hardcoded to 0 in RTL. It should also have access control to prevent untrusted entities from setting this bit to become bus controllers."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1135",
          "Authors": [
            "Benoit Morgan, Eric Alata, Vincent Nicomette, Mohamed Kaaniche"
          ],
          "Title": "Bypassing IOMMU Protection against I/O Attacks",
          "PublicationYear": "2016",
          "URL": "https://hal.archives-ouvertes.fr/hal-01419962/document"
        },
        {
          "ExternalReferenceID": "REF-1136",
          "Authors": [
            "Colin L. Rothwell"
          ],
          "Title": "Exploitation from malicious PCI Express peripherals",
          "PublicationYear": "2019",
          "URL": "https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-934.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1316",
      "Name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.",
      "ExtendedDescription": "\n\nVarious ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected.\n\n\nOccasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Bus/Interface Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Authorization"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Read Memory",
            "Modify Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "Review address map in specification to see if there are any overlapping ranges.",
          "Effectiveness": "High"
        },
        {
          "Method": "Manual Static Analysis",
          "Description": "Negative testing of access control on overlapped ranges.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion."
        },
        {
          "Phase": [
            "Testing"
          ],
          "Description": "Validate mitigation actions with robust testing."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "An on-chip fabric supports a 64KB address space that is memory-mapped. The fabric has two range registers that support creation of two protected ranges with specific size constraints--4KB, 8KB, 16KB or 32KB. Assets that belong to user A require 4KB, and those of user B require 20KB. Registers and other assets that are not security-sensitive require 40KB. One range register is configured to program 4KB to protect user A's assets. Since a 20KB range cannot be created with the given size constraints, the range register for user B's assets is configured as 32KB. The rest of the address space is left as open. As a result, some part of untrusted and open-address space overlaps with user B range."
            },
            {
              "BodyText": "The fabric does not support least privilege, and an attacker can send a transaction to the overlapping region to tamper with user B data."
            },
            {
              "BodyText": "Since range B only requires 20KB but is allotted 32KB, there is 12KB of reserved space. Overlapping this region of user B data, where there are no assets, with the untrusted space will prevent an attacker from tampering with user B data."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2009-4419",
          "Description": "Attacker can modify MCHBAR register to overlap with an attacker-controlled region, which modification prevents the SENTER instruction from properly applying VT-d protection while a Measured Launch Environment is being launched.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4419"
        }
      ],
      "RelatedAttackPatterns": [
        "456",
        "679"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1137",
          "Authors": [
            "Yuriy Bulygin, Oleksandr Bazhaniuk, Andrew Furtak, John Loucaides, Mikhail Gorobets"
          ],
          "Title": "BARing the System - New vulnerabilities in Coreboot & UEFI-based Systems",
          "PublicationYear": "2017",
          "URL": "https://www.c7zero.info/stuff/REConBrussels2017_BARing_the_system.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted."
        }
      ]
    },
    {
      "ID": "1317",
      "Name": "Improper Access Control in Fabric Bridge",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",
      "ExtendedDescription": "\n\nIn hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect.\n\n\nFor overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart",
            "Bypass Protection Mechanism",
            "Read Memory",
            "Modify Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Simulation / Emulation",
          "Description": "RTL simulation to ensure that bridge-access controls are implemented properly.",
          "Effectiveness": "High"
        },
        {
          "Method": "Formal Verification",
          "Description": "Formal verification of bridge RTL to ensure that access control cannot be bypassed.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Implement access-control checks in the bridge for both upstream and downstream transactions."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example is from CVE-2019-6260 [REF-1138]. The iLPC2AHB bridge connects a CPU (with multiple, privilege levels, such as user, super user, debug, etc.) over AHB interface to an LPC bus. Several peripherals are connected to the LPC bus. The bridge is expected to check the privilege level of the transactions initiated in the core before forwarding them to the peripherals on the LPC bus."
            },
            {
              "BodyText": "The bridge does not implement the checks and allows reads and writes from all privilege levels."
            },
            {
              "BodyText": "To address this, designers should implement hardware-based checks that are either hardcoded to block untrusted agents from accessing secure peripherals or implement firmware flows that configure the bridge to block untrusted agents from making arbitrary reads or writes."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is taken from the AES and core local interrupt (CLINT) peripherals of the HACK@DAC'21 buggy OpenPiton SoC. The access to all the peripherals for a given privilege level of the processor is controlled by an access control module in the SoC. This ensures that malicious users with insufficient privileges do not get access to sensitive data, such as the AES keys used by the operating system to encrypt and decrypt information. The security of the entire system will be compromised if the access controls are incorrectly enforced. The access controls are enforced through the interconnect-bus fabrics, where access requests with insufficient access control permissions will be rejected."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "...\n module aes0_wrapper #(...)(...);\n ...\n\n```\n\t input logic acct_ctrl_i;\n ...\n\t axi_lite_interface #(...\n\t ) axi_lite_interface_i (\n\t ...\n```\n.en_o ( en_acct ),** \n\t\t ...\n ..);\n\n```\n```\nassign en = en_acct && acct_ctrl_i;** \n\t ...\n endmodule\n ...\n module clint #(...)(...);\n ...\n\n```\n\t axi_lite_interface #(...\n\t ) axi_lite_interface_i (\n\t ...\n```\n.en_o ( en ),** \n\t\t ...\n );\n ...\n endmodule"
            },
            {
              "BodyText": "The previous code snippet [REF-1382] illustrates an instance of a vulnerable implementation of access control for the CLINT peripheral (see module clint). It also shows a correct implementation of access control for the AES peripheral (see module aes0_wrapper) [REF-1381]. An enable signal (en_o) from the fabric's AXI interface (present in both modules) is used to determine if an access request is made to the peripheral. In the case of the AES peripheral, this en_o signal is first received in a temporary signal en_acct. Then, the access request is enabled (by asserting the en signal) only if the request has sufficient access permissions (i.e., acct_ctrl_i signal should be enabled). However, in the case of the CLINT peripheral, the enable signal, en_o, from the AXI interface, is directly used to enable accesses. As a result, users with insufficient access permissions also get full access to the CLINT peripheral."
            },
            {
              "BodyText": "To fix this, enable access requests to CLINT [REF-1383] only if the user has sufficient access as indicated by the acct_ctrl_i signal in the boolean && with en_acct."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module clint #(...\n ) (\n ... \n\n```\n```\ninput logic acct_ctrl_i,** \n\t ...\n );\n\n```\n\t logic en\n```\n, en_acct** ;\n\t ...\n\n```\n\t axi_lite_interface #(...\n\t ) axi_lite_interface_i (\n ...\n\t .en_o ( \n```\nen_acct**  ),\n\t ...\n\n```\n\t );\n```\nassign en = en_acct && acct_ctrl_i;** \n\t ...\n endmodule"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-6260",
          "Description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"
        }
      ],
      "RelatedAttackPatterns": [
        "122"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1138",
          "Authors": [
            "Stewart Smith"
          ],
          "Title": "CVE-2019-6260: Gaining control of BMC from the host processor",
          "PublicationYear": "2019",
          "URL": "https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/"
        },
        {
          "ExternalReferenceID": "REF-1381",
          "Title": "aes0_wrapper.sv lines 72 - 78",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/aes0/aes0_wrapper.sv#L72-L78",
          "URLDate": "2024-01-16"
        },
        {
          "ExternalReferenceID": "REF-1382",
          "Title": "clint.sv line 71",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/clint/clint.sv#L71C2-L71C36",
          "URLDate": "2024-01-16"
        },
        {
          "ExternalReferenceID": "REF-1383",
          "Title": "Fix for clint.sv line 78",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/45a004368b5a31857008834d9780536f0764f055/piton/design/chip/tile/ariane/src/clint/clint.sv#L78",
          "URLDate": "2024-01-16"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1318",
      "Name": "Missing Support for Security Features in On-chip Fabrics or Buses",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": " On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. ",
      "ExtendedDescription": "\n\nCertain on-chip fabrics and buses, especially simple and low-power buses, do not support security features. Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master. Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions. Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa. However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric. Such fabrics or buses should not be used to transport any security attribute coming from the bus master. In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart",
            "Read Memory",
            "Modify Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "Review the fabric specification and ensure that it contains signals to transfer security-sensitive signals.",
          "Effectiveness": "High"
        },
        {
          "Method": "Manual Static Analysis - Source Code",
          "Description": "Lack of security features can also be confirmed through manual RTL review of the fabric RTL.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric. Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Several systems on chips (SoCs) use the Advanced-Microcontroller Bus Architecture (AMBA) Advanced-Peripheral Bus (APB) protocol. APB is a simple, low-power bus and uses the PPROT[2:0] bits to indicate the security state of the bus masters ;PPROT[0] indicates privilege, PPROT[1] indicates secure/non-secure transaction, and PPROT[2] indicates instruction/data. Assume that there is no fabric bridge in the SoC. One of the slaves, the power-management unit, contains registers that store the thermal-shutdown limits."
            },
            {
              "BodyText": "The APB bus is used to connect several bus masters, each with a unique and immutable hardware identity, to several slaves. For a CPU supporting 8 potential identities (each with varying privilege levels), 16 types of outgoing transactions can be made--8 read transactions with each supported privilege level and 8 write transactions with each supported privilege level."
            },
            {
              "BodyText": "Since APB PPROT can only support up to 8 transaction types, access-control checks cannot be performed on transactions going to the slaves at the right granularity for all possible transaction types. Thus, potentially, user code running on the CPU could maliciously corrupt the thermal-shutdown-configuration registers to burn the device, resulting in permanent denial of service."
            },
            {
              "BodyText": "In this scenario, only peripherals that need access protection from 8 of the 16 possible transaction types can be connected to the APB bus. Peripherals that require protection from the remaining 8 transaction types can be connected to a different APB bus. Alternatively, a bridge could be implemented to handle such complex scenarios before forwarding traffic to the APB bus."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The Open-Core-Protocol (OCP) fabric supports two configurable, width-optional signals for transporting security attributes: MReqInfo and SRespInfo. MReqInfo is used to transport security attributes from bus master to slave, and SRespInfo is used to transport security attributes from slave to bus master. An SoC uses OCP to connect several bus masters, each with a unique and immutable hardware identity, to several slaves. One of the bus masters, the CPU, reports the privilege level (user or super user) in addition to the unique identity. One of the slaves, the power-management unit, contains registers that store the thermal-shutdown limits."
            },
            {
              "BodyText": "Since MReqInfo and SRespInfo are not mandatory, these signals are not configured when autogenerating RTL for the OCP fabric. Thus, the fabric cannot be used to transport security attributes from bus masters to slave."
            },
            {
              "BodyText": "Code running at user-privilege level on the CPU could maliciously corrupt the thermal-shutdown-configuration registers to burn the device and cause permanent denial of service."
            },
            {
              "BodyText": "To address this, configure the fabric to include MReqInfo and SRespInfo signals and use these to transport security identity and privilege level to perform access-control checks at the slave interface."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1139",
          "Authors": [
            "ARM"
          ],
          "Title": "AMBA APB Protocol Specification, Version 2.0",
          "PublicationYear": "2010",
          "URL": "https://www.eecs.umich.edu/courses/eecs373/readings/IHI0024C_amba_apb_protocol_spec.pdf"
        },
        {
          "ExternalReferenceID": "REF-1140",
          "Authors": [
            "OCP-IP"
          ],
          "Title": "Open Core Protocol Specification, Release 2.2",
          "PublicationYear": "2006",
          "URL": "http://read.pudn.com/downloads95/doc/388103/OCPSpecification%202.2.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1319",
      "Name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.",
      "ExtendedDescription": "\n\nElectromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to:\n\n\n  - Bypassing security mechanisms such as secure JTAG or Secure Boot\n\n  - Leaking device information\n\n  - Modifying program flow\n\n  - Perturbing secure hardware modules (e.g. random number generators)\n\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Power Management Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Test/Debug Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Sensor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Availability"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "\n\n  - 1. Redundancy - By replicating critical operations and comparing the two outputs can help indicate whether a fault has been injected.\n\n  - 2. Error detection and correction codes - Gay, Mael, et al. proposed a new scheme that not only detects faults injected by a malicious adversary but also automatically corrects single nibble/byte errors introduced by low-multiplicity faults.\n\n  - 3. Fail by default coding - When checking conditions (switch or if) check all possible cases and fail by default because the default case in a switch (or the else part of a cascaded if-else-if construct) is used for dealing with the last possible (and valid) value without checking. This is prone to fault injection because this alternative is easily selected as a result of potential data manipulation [REF-1141].\n\n  - 4. Random Behavior - adding random delays before critical operations, so that timing is not predictable.\n\n  - 5. Program Flow Integrity Protection - The program flow can be secured by integrating run-time checking aiming at detecting control flow inconsistencies. One such example is tagging the source code to indicate the points not to be bypassed [REF-1147].\n\n  - 6. Sensors - Usage of sensors can detect variations in voltage and current.\n\n  - 7. Shields - physical barriers to protect the chips from malicious manipulation.\n\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "In many devices, security related information is stored in fuses. These fuses are loaded into shadow registers at boot time. Disturbing this transfer phase with EM-FI can lead to the shadow registers storing erroneous values potentially resulting in reduced security."
            },
            {
              "BodyText": "Colin O'Flynn has demonstrated an attack scenario which uses electro-magnetic glitching during booting to bypass security and gain read access to flash, read and erase access to shadow memory area (where the private password is stored). Most devices in the MPC55xx and MPC56xx series that include the Boot Assist Module (BAM) (a serial or CAN bootloader mode) are susceptible to this attack. In this paper, a GM ECU was used as a real life target. While the success rate appears low (less than 2 percent), in practice a success can be found within 1-5 minutes once the EMFI tool is setup. In a practical scenario, the author showed that success can be achieved within 30-60 minutes from a cold start."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-27211",
          "Description": "Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27211"
        }
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1141",
          "Authors": [
            "Marc Witteman"
          ],
          "Title": "Secure Application Programming in the presence of Side Channel Attacks",
          "PublicationYear": "2017",
          "URL": "https://riscureprodstorage.blob.core.windows.net/production/2017/08/Riscure_Whitepaper_Side_Channel_Patterns.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1142",
          "Authors": [
            "A. Dehbaoui, J. M. Dutertre, B. Robisson, P. Orsatelli, P. Maurine, A. Tria"
          ],
          "Title": "Injection of transient faults using electromagnetic pulses. Practical results on a cryptographic system",
          "PublicationYear": "2012",
          "URL": "https://eprint.iacr.org/2012/123.pdf"
        },
        {
          "ExternalReferenceID": "REF-1143",
          "Authors": [
            "A. Menu, S. Bhasin, J. M. Dutertre, J. B. Rigaud, J. Danger"
          ],
          "Title": "Precise Spatio-Temporal Electromagnetic Fault Injections on Data Transfers",
          "PublicationYear": "2019",
          "URL": "https://hal.telecom-paris.fr/hal-02338456/document"
        },
        {
          "ExternalReferenceID": "REF-1144",
          "Authors": [
            "Colin O'Flynn"
          ],
          "Title": "BAM BAM!! On Reliability of EMFI for in-situ Automotive ECU Attacks",
          "URL": "https://eprint.iacr.org/2020/937.pdf"
        },
        {
          "ExternalReferenceID": "REF-1145",
          "Authors": [
            "J. Balasch, D. Arum\u00ed, S. Manich"
          ],
          "Title": "Design and Validation of a Platform for Electromagnetic Fault Injection",
          "URL": "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8311630"
        },
        {
          "ExternalReferenceID": "REF-1146",
          "Authors": [
            "M. Gay, B. Karp, O. Keren, I. Polian"
          ],
          "Title": "Error control scheme for malicious and natural faults in cryptographic modules",
          "PublicationYear": "2019",
          "URL": "https://link.springer.com/content/pdf/10.1007/s13389-020-00234-7.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1147",
          "Authors": [
            "M. L. Akkar, L. Goubin, O. Ly"
          ],
          "Title": "Automatic Integration of Counter-Measures Against Fault Injection Attacks",
          "URL": "https://www.labri.fr/perso/ly/publications/cfed.pdf"
        },
        {
          "ExternalReferenceID": "REF-1285",
          "Authors": [
            "Texas Instruments"
          ],
          "Title": "Physical Security Attacks Against Silicon Devices",
          "PublicationYear": "2022",
          "PublicationMonth": "01",
          "PublicationDay": "31",
          "URL": "https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "This entry is attack-oriented and may require significant modification in future versions, or even deprecation. It is not clear whether there is really a design \"mistake\" that enables such attacks, so this is not necessarily a weakness and may be more appropriate for CAPEC."
        }
      ]
    },
    {
      "ID": "1320",
      "Name": "Improper Protection for Outbound Error Messages and Alert Signals",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\t\t\t",
      "ExtendedDescription": "\n\nHardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms.\n\n\nWhen device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling.\n\n\nWarning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Power Management Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Test/Debug Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Sensor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Instability",
            "DoS: Crash, Exit, or Restart",
            "Reduce Reliability",
            "Unexpected State"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a platform design where a Digital-Thermal Sensor (DTS) is used to monitor temperature and compare that output against a threshold value. If the temperature output equals or exceeds the threshold value, the DTS unit sends an alert signal to the processor.\n\n\nThe processor, upon getting the alert, input triggers system shutdown. The alert signal is handled as a General-Purpose-I/O (GPIO) pin in input mode."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "The processor-GPIO controller exposes software-programmable controls that allow untrusted software to reprogram the state of the GPIO pin."
            },
            {
              "BodyText": "Reprogramming the state of the GPIO pin allows malicious software to trigger spurious alerts or to set the alert pin to a zero value so that thermal sensor alerts are not received by the processor."
            },
            {
              "Nature": "Good",
              "ExampleCode": "The GPIO alert-signal pin is blocked from untrusted software access and is controlled only by trusted software, such as the System BIOS."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1321",
      "Name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
      "ExtendedDescription": "\n\nBy adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the product depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf).\n\n\nThis weakness is usually exploited by using a special attribute of objects called proto, constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "915",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "913",
          "ViewID": "1003",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "471",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "JavaScript",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Application Data"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "An attacker can inject attributes that are used in other components."
        },
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.",
          "Effectiveness": "High",
          "EffectivenessNotes": "While this can mitigate this weakness completely, other methods are recommended when possible, especially in components used by upstream software (\"libraries\")."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "When handling untrusted objects, validating using a schema can be used.",
          "Effectiveness": "Limited"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-206",
          "Entries": [
            {
              "IntroText": "This function sets object attributes based on a dot-separated path."
            },
            {
              "Nature": "Bad",
              "Language": "JavaScript",
              "ExampleCode": "```\n\tfunction setValueByPath (object, path, value) {\n\t\t const pathArray = path.split(\".\");\n\t\t const attributeToSet = pathArray.pop();\n\t\t let objectToModify = object;\n\t\t for (const attr of pathArray) {\n\t\t\tif (typeof objectToModify[attr] !== 'object') {\n\t\t\t\tobjectToModify[attr] = {};\n\t\t\t\t }\n\t\t\t objectToModify = objectToModify[attr];\n\t\t\t }\n\t\t objectToModify[attributeToSet] = value;\n\t\t return object;\n\t\t }\n```"
            },
            {
              "BodyText": "This function does not check if the attribute resolves to the object prototype. These codes can be used to add \"isAdmin: true\" to the object prototype."
            },
            {
              "Nature": "Bad",
              "Language": "JavaScript",
              "ExampleCode": "```\n\t setValueByPath({}, \"__proto__.isAdmin\", true)\n\t setValueByPath({}, \"constructor.prototype.isAdmin\", true)\n```"
            },
            {
              "BodyText": "By using a denylist of dangerous attributes, this weakness can be eliminated."
            },
            {
              "Nature": "Good",
              "Language": "JavaScript",
              "ExampleCode": "```\n\t function setValueByPath (object, path, value) {\n\t\t const pathArray = path.split(\".\");\n\t\t const attributeToSet = pathArray.pop();\n\t\t let objectToModify = object;\n\t\t for (const attr of pathArray) {\n```\n// Ignore attributes which resolve to object prototype* \n\t\t\t if (attr === \"__proto__\" || attr === \"constructor\" || attr === \"prototype\") {\n\t\t\t\n\t\t\t```\n\t\t\t\t continue;\n\t\t\t\t }\n\t\t\t if (typeof objectToModify[attr] !== \"object\") {\n\t\t\t\t objectToModify[attr] = {};\n\t\t\t\t }\n\t\t\t objectToModify = objectToModify[attr];\n\t\t\t }\n\t\t objectToModify[attributeToSet] = value;\n\t\t return object;\n\t\t }\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2018-3721",
          "Description": "Prototype pollution by merging objects.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-3721"
        },
        {
          "Reference": "CVE-2019-10744",
          "Description": "Prototype pollution by setting default values to object attributes recursively.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10744"
        },
        {
          "Reference": "CVE-2019-11358",
          "Description": "Prototype pollution by merging objects recursively.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-11358"
        },
        {
          "Reference": "CVE-2020-8203",
          "Description": "Prototype pollution by setting object attributes based on dot-separated path.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8203"
        }
      ],
      "RelatedAttackPatterns": [
        "1",
        "180",
        "77"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1148",
          "Authors": [
            "Olivier Arteau"
          ],
          "Title": "Prototype pollution attack in NodeJS application",
          "PublicationYear": "2018",
          "PublicationMonth": "05",
          "PublicationDay": "15",
          "URL": "https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"
        },
        {
          "ExternalReferenceID": "REF-1149",
          "Authors": [
            "Changhui Xu"
          ],
          "Title": "What is Prototype Pollution?",
          "PublicationYear": "2019",
          "PublicationMonth": "07",
          "PublicationDay": "30",
          "URL": "https://codeburst.io/what-is-prototype-pollution-49482fc4b638"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1322",
      "Name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.",
      "ExtendedDescription": "\n\nWhen an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation.\n\n\nDue to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "834",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "835",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (CPU)"
          ],
          "Note": "An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Generally speaking, blocking calls should be replaced with non-blocking alternatives that can be used asynchronously. Expensive computations should be passed off to worker threads, although the correct approach depends on the framework being used."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance."
        }
      ],
      "RelatedAttackPatterns": [
        "25"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1323",
      "Name": "Improper Management of Sensitive Trace Data",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Trace data collected from several sources on the\n                System-on-Chip (SoC) is stored in unprotected locations or\n                transported to untrusted agents.",
      "ExtendedDescription": "\n\nTo facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers.\n\n\nSince these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Note": "An adversary can read secret values if they are captured in debug traces and stored unsafely."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "In a SoC, traces generated from sources include security-sensitive IP blocks such as CPU (with tracing information such as instructions executed and memory operands), on-chip fabric (e.g., memory-transfer signals, transaction type and destination, and on-chip-firewall-error signals), power-management IP blocks (e.g., clock- and power-gating signals), and cryptographic coprocessors (e.g., cryptographic keys and intermediate values of crypto operations), among other non-security-sensitive IP blocks including timers and other functional blocks. The collected traces are then forwarded to the debug and trace interface used by the external hardware debugger."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The traces do not have any privilege level attached to them. All collected traces can be viewed by any debugger (i.e., SoC designer, OEM debugger, or end user)."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "Some of the traces are SoC-design-house secrets, while some are OEM secrets. Few are end-user secrets and the rest are not security-sensitive. Tag all traces with the appropriate, privilege level at the source. The bits indicating the privilege level must be immutable in their transit from trace source to the final, trace sink. Debugger privilege level must be checked before providing access to traces."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "150",
        "167",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1150",
          "Authors": [
            "Jerry Backer",
            "David Hely",
            "Ramesh Karri"
          ],
          "Title": "Secure design-for-debug for Systems-on-Chip",
          "PublicationYear": "2015",
          "PublicationMonth": "10",
          "PublicationDay": "06",
          "URL": "https://ieeexplore.ieee.org/document/7342418"
        },
        {
          "ExternalReferenceID": "REF-1151",
          "Authors": [
            "Jerry Backer",
            "David Hely",
            "Ramesh Karri"
          ],
          "Title": "Secure and Flexible Trace-Based Debugging of Systems-on-Chip",
          "PublicationYear": "2016",
          "PublicationMonth": "12",
          "URL": "https://dl.acm.org/doi/pdf/10.1145/2994601",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1324",
      "Name": "DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Deprecated",
      "Description": "This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.",
      "MappingNotes": {
        "Usage": "Prohibited",
        "Rationale": "This CWE has been deprecated.",
        "Comments": "See description and name for possible suggestions of other CWEs to consider.",
        "Reasons": [
          "Deprecated"
        ]
      }
    },
    {
      "ID": "1325",
      "Name": "Improperly Controlled Sequential Memory Allocation",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
      "ExtendedDescription": "\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "770",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "789",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "476",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "C",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C++",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "Stack Exhaustion",
          "Description": "When a weakness allocates excessive memory on the stack, it is often described as \"stack exhaustion,\" which is a technical impact of the weakness. This technical impact is often encountered as a consequence of CWE-789 and/or CWE-1325."
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (Memory)"
          ],
          "Note": "Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary."
        },
        {
          "Phase": [
            "Operation"
          ],
          "Description": "Run the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example contains a small allocation of stack memory. When the program was first constructed, the number of times this memory was allocated was probably inconsequential and presented no problem. Over time, as the number of objects in the database grow, the number of allocations will grow - eventually consuming the available stack, i.e. \"stack exhaustion.\" An attacker who is able to add elements to the database could cause stack exhaustion more rapidly than assumed by the developer."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n```\n// Gets the size from the number of objects in a database, which over time can conceivably get very large* \n\t int end_limit = get_nmbr_obj_from_db();\n\t int i;\n\t int *base = NULL;\n\t int *p =base;\n\t for (i = 0; i < end_limit; i++)\n\t {\n\t\n\t```\n\t\t *p = alloca(sizeof(int *)); \n```\n// Allocate memory on the stack* \n\t\t p = *p; \n\t\t *// // Point to the next location to be saved* \n\t\t }"
            },
            {
              "BodyText": "Since this uses alloca(), it allocates memory directly on the stack. If end_limit is large enough, then the stack can be entirely consumed."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-36049",
          "Description": "JavaScript-based packet decoder uses concatenation of many small strings, causing out-of-memory (OOM) condition",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-36049"
        },
        {
          "Reference": "CVE-2019-20176",
          "Description": "Product allocates a new buffer on the stack for each file in a directory, allowing stack exhaustion",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-20176"
        },
        {
          "Reference": "CVE-2013-1591",
          "Description": "Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2013-1591"
        }
      ],
      "RelatedAttackPatterns": [
        "130"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1326",
      "Name": "Missing Immutable Root of Trust in Hardware",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.",
      "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts. Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether \"Secure Boot is enabled\". These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows.\n\n\nOne of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot.\n\n\nNote that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Security Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during policy definition, hardware architecture, design, manufacturing, and/or provisioning. They can be identified later during testing or system configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Authentication",
            "Authorization"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Execute Unauthorized Code or Commands",
            "Modify Memory"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "Automated testing can verify that RoT components are immutable.",
          "Effectiveness": "High"
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Root of trust elements and memory should be part of architecture and design reviews.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The RoT is stored in memory. This memory can be modified by an adversary. For example, if an SoC implements \"Secure Boot\" by storing the boot code in an off-chip/on-chip flash, the contents of the flash can be modified by using a flash programmer. Similarly, if the boot code is stored in ROM (Read-Only Memory) but the public key or the hash of the public key (used to enable \"Secure Boot\") is stored in Flash or a memory that is susceptible to modifications or writes, the implementation is vulnerable."
            },
            {
              "BodyText": "In general, if the boot code, key materials and data that enable \"Secure Boot\" are all mutable, the implementation is vulnerable."
            },
            {
              "BodyText": "Good architecture defines RoT as immutable in hardware. One of the best ways to achieve immutability is to store boot code, public key or hash of the public key and other relevant data in Read-Only Memory (ROM) or One-Time Programmable (OTP) memory that prevents further programming or writes."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code below is a snippet from the bootrom of the HACK@DAC'19 buggy OpenPiton SoC [REF-1348]. The contents of the bootrom are critical in implementing the hardware root of trust."
            },
            {
              "BodyText": "It performs security-critical functions such as defining the system's device tree, validating the hardware cryptographic accelerators in the system, etc. Hence, write access to bootrom should be strictly limited to authorized users or removed completely so that bootrom is immutable. In this example (see the vulnerable code source), the boot instructions are stored in bootrom memory, mem. This memory can be read using the read address, addr_i, but write access should be restricted or removed."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t\talways_ff @(posedge clk_i) begin\n\t\t\tif (req_i) begin\n\t\t\t\tif (!we_i) begin\n\t\t\t\t\traddr_q <= addr_i[$clog2(RomSize)-1+3:3];\n\t\t\t\t end else begin \n```\nmem[addr_i[$clog2(RomSize)-1+3:3]] <= wdata_i;**  end end end ...\n\n```\n\t // this prevents spurious Xes from propagating into the speculative fetch stage of the core \n\tassign rdata_o = (raddr_q < RomSize) ? mem[raddr_q] : '0;\n\t ... \n```"
            },
            {
              "BodyText": "The vulnerable code shows an insecure implementation of the bootrom where bootrom can be written directly by enabling write enable, we_i, and using write address, addr_i, and write data, wdata_i."
            },
            {
              "BodyText": "To mitigate this issue, remove the write access to bootrom memory. [REF-1349]"
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "```\n\t...\n\t\talways_ff @(posedge clk_i) begin\n```\nif (req_i) begin** \n\t\t\t\n\t\t\t```\n\t\t\t\traddr_q <= addr_i[$clog2(RomSize)-1+3:3];\n\t\t\t end\n\t\t end\n\t ...\n\t // this prevents spurious Xes from propagating into the speculative fetch stage of the core \n\tassign rdata_o = (raddr_q < RomSize) ? mem[raddr_q] : '0;\n\t ... \n```"
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "679",
        "68"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1152",
          "Authors": [
            "Trusted Computing Group"
          ],
          "Title": "TCG Roots of Trust Specification",
          "PublicationYear": "2018",
          "PublicationMonth": "07",
          "URL": "https://trustedcomputinggroup.org/wp-content/uploads/TCG_Roots_of_Trust_Specification_v0p20_PUBLIC_REVIEW.pdf"
        },
        {
          "ExternalReferenceID": "REF-1153",
          "Authors": [
            "GlobalPlatform Security Task Force"
          ],
          "Title": "Root of Trust Definitions and Requirements",
          "PublicationYear": "2017",
          "PublicationMonth": "03",
          "URL": "https://globalplatform.org/wp-content/uploads/2018/06/GP_RoT_Definitions_and_Requirements_v1.0.1_PublicRelease_CC.pdf"
        },
        {
          "ExternalReferenceID": "REF-1348",
          "Title": "bootrom.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/bootrom/bootrom.sv#L263C19-L263C19",
          "URLDate": "2023-09-18"
        },
        {
          "ExternalReferenceID": "REF-1349",
          "Title": "bootrom.sv",
          "PublicationYear": "2019",
          "URL": "https://github.com/HACK-EVENT/hackatdac19/blob/ba6abf58586b2bf4401e9f4d46e3f084c664ff88/bootrom/bootrom.sv#L259C9-L259C9",
          "URLDate": "2023-09-18"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1327",
      "Name": "Binding to an Unrestricted IP Address",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.",
      "ExtendedDescription": "\n\nWhen a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "668",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Other",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Web Server",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Client Server",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Cloud Computing",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "System Configuration"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Amplification"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "Assign IP addresses that are not 0.0.0.0.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Strategy": "Firewall",
          "Description": "Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The following code snippet uses 0.0.0.0 in a Puppet script."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "signingserver::instance {\n\n```\n\t \"nightly-key-signing-server\": \n\t\t listenaddr => \"0.0.0.0\",\n\t\t port => \"9100\",\n\t\t code_tag => \"SIGNING_SERVER\",\n\t }\n```"
            },
            {
              "BodyText": "The Puppet code snippet is used to provision a signing server that will use 0.0.0.0 to accept traffic. However, as 0.0.0.0 is unrestricted, malicious users may use this IP address to launch frequent requests and cause denial of service attacks."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "signingserver::instance {\n\n```\n\t \"nightly-key-signing-server\": \n\t\t listenaddr => \"127.0.0.1\",\n\t\t port => \"9100\",\n\t\t code_tag => \"SIGNING_SERVER\",\n\t }\n```"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-21947",
          "Description": "Desktop manager for Kubernetes and container management binds a service to 0.0.0.0, allowing users on the network to make requests to a dashboard API.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21947"
        }
      ],
      "RelatedAttackPatterns": [
        "1"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1158",
          "Authors": [
            "Akond Rahman",
            "Md Rayhanur Rahman",
            "Chris Parnin",
            "Laurie Williams"
          ],
          "Title": "Security Smells in Ansible and Chef Scripts: A Replication Study",
          "PublicationYear": "2020",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://arxiv.org/pdf/1907.07159.pdf"
        },
        {
          "ExternalReferenceID": "REF-1159",
          "Authors": [
            "Akond Rahman",
            "Chris Parnin",
            "Laurie Williams"
          ],
          "Title": "The Seven Sins: Security Smells in Infrastructure as Code Scripts",
          "Publication": "ICSE '19: Proceedings of the 41st International Conference on Software Engineering",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://dl.acm.org/doi/10.1109/ICSE.2019.00033",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1328",
      "Name": "Security Version Number Mutable to Older Versions",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.",
      "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks.\n\n\nThe security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "285",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "757",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Security Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware architecture and design, and can be identified later during testing or system configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Authentication",
            "Authorization"
          ],
          "Impact": [
            "Other"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Impact includes roll-back or downgrade to a vulnerable version of the firmware or DoS (prevent upgrades)."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
          "Effectiveness": "High"
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Anti-roll-back features should be reviewed as part of Architecture or Design review.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A new version of firmware is signed with a security version number higher than the previous version. During the firmware update process the SoC checks for the security version number and upgrades the SoC firmware with the latest version. This security version number is stored in persistent memory upon successful upgrade for use across power-on resets."
            },
            {
              "BodyText": "In general, if the security version number is mutable, the implementation is vulnerable. A mutable security version number allows an adversary to change the security version to a lower value to allow roll-back or to a higher value to prevent future upgrades."
            },
            {
              "BodyText": "The security version number should be stored in immutable hardware such as fuses, and the writes to these fuses should be highly access-controlled with appropriate authentication and authorization protections."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "176"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1329",
      "Name": "Reliance on Component That is Not Updateable",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.",
      "ExtendedDescription": "\n\n If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue. The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner. As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities. \n\n\n In industries such as healthcare, \"legacy\" devices can be operated for decades. As a US task force report [REF-1197] notes, \"the inability to update or replace equipment has both large and small health care delivery organizations struggle with numerous unsupported legacy systems that cannot easily be replaced (hardware, software, and operating systems) with large numbers of vulnerabilities and few modern countermeasures.\" \n\n\n While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1357",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "664",
          "ViewID": "1000"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Requirements",
          "Note": "Requirements development might not consider the importance of updates over the lifetime of the product or might intentionally exclude this capability due to concerns such as expense or speed to market."
        },
        {
          "Phase": "Architecture and Design",
          "Note": "Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update."
        },
        {
          "Phase": "Architecture and Design",
          "Note": "Designers might omit capabilities for updating a component due to time pressures to release the product or assumptions about the stability of the component."
        },
        {
          "Phase": "Implementation",
          "Note": "The weakness can appear through oversight during implementation."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Access Control",
            "Authentication",
            "Authorization",
            "Other"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Execute Unauthorized Code or Commands",
            "DoS: Crash, Exit, or Restart",
            "Quality Degradation",
            "Reduce Maintainability"
          ],
          "Note": "If an attacker can identify an exploitable vulnerability in one product that has no means of patching, the attack may be used against all affected versions of that product."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Specify requirements that each component should be updateable, including ROM, firmware, etc."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\" Hardware-fuse-based patches will also have limitations in terms of size and the number of patches that can be supported."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Implement the necessary functionality to allow each component to be updated."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-145",
          "Entries": [
            {
              "IntroText": "A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes."
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "The refrigerator has no means of patching and is hacked becoming a spewer of email spam."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "The device automatically patches itself and provides considerable more protection against being hacked."
            }
          ]
        },
        {
          "ID": "DX-146",
          "Entries": [
            {
              "IntroText": "A System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch."
            },
            {
              "BodyText": "ROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "The example code is taken from the JTAG module of the buggy OpenPiton SoC of HACK@DAC'21. JTAG is protected with a password checker. Access to JTAG operations will be denied unless the correct password is provided by the user. This user-provided password is first sent to the HMAC module where it is hashed with a secret crypto key. This user password hash (pass_hash) is then compared with the hash of the correct password (exp_hash). If they match, JTAG will then be unlocked."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module dmi_jtag(...)(...);\n ...\n\n```\n\t\t\t PassChkValid: begin\n\t\t\t if(hashValid) begin\n\t\t\t\t\t if(exp_hash == pass_hash) begin\n\t\t\t\t\t\t pass_check = 1'b1;\n\t\t\t\t\t end else begin\n\t\t\t\t\t\t pass_check = 1'b0;\n\t\t\t\t\t end\n\t\t\t\t\t state_d = Idle;\n\t\t\t\t end else begin\n\t\t\t\t state_d = PassChkValid;\n\t\t\t\t end\n\t\t\t end\n ...\n\t hmac hmac(\n ...\n```\n.key_i(256'h24e6fa2254c2ff632a41b...),** \n\t\t ...\n\n```\n\t );\n ...\n endmodule\n```"
            },
            {
              "BodyText": "However, the SoC's crypto key is hardcoded into the design and cannot be updated [REF-1387]. Therefore, if the key is leaked somehow, there is no way to reprovision the key without having the device replaced."
            },
            {
              "BodyText": "To fix this issue, a local register should be used (hmac_key_reg) to store the crypto key. If designers need to update the key, they can upload the new key through an input port (hmac_key_i) to the local register by enabling the patching signal (hmac_patch_en) [REF-1388]."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module dmi_jtag(...\n ) (\n\n```\n```\ninput logic [255:0] hmac_key_i,** \n\t\n\t **input logic hmac_patch_en,** \n\t ... \n\t\n\t **reg [255:0] hmac_key_reg;** \n\t ...\n\t );\n ...\n\n```\n\t always_ff @(posedge tck_i or negedge trst_ni) begin\n\t ...\n```\nif (hmac_patch_en)** \n\t\n\t```\n```\nhmac_key_reg <= hmac_key_i;** \n\t\t ...\n\t end\n\t ...\n\n```\n\t hmac hmac(\n\t ...\n```\n.key_i(hmac_key_reg),** \n\t ...\n\t );\n\t ...\n endmodule"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-9054",
          "Description": "Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are \"end-of-support\" and cannot be patched (CWE-1277). [REF-1097]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1197",
          "Section": "Executive Summary",
          "Authors": [
            "Health Care Industry Cybersecurity Task Force"
          ],
          "Title": "Report on Improving Cybersecurity in the\n\t\t\tHealth Care Industry",
          "PublicationYear": "2017",
          "PublicationMonth": "06",
          "URL": "https://www.phe.gov/Preparedness/planning/CyberTF/Documents/report2017.pdf"
        },
        {
          "ExternalReferenceID": "REF-1097",
          "Authors": [
            "Brian Krebs"
          ],
          "Title": "Zyxel Flaw Powers New Mirai IoT Botnet Strain",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "20",
          "URL": "https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/"
        },
        {
          "ExternalReferenceID": "REF-1387",
          "Title": "dmi_jtag.sv line 324",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L324C9-L324C87",
          "URLDate": "2024-01-16"
        },
        {
          "ExternalReferenceID": "REF-1388",
          "Title": "Fix for dmi_jtag.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/commit/c94ce5f9487a41c77ede0bbc8daf4da66c39f42a",
          "URLDate": "2024-01-16"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1330",
      "Name": "Remanent Data Readable after Memory Erase",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.",
      "ExtendedDescription": "\n\nData remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware.\n\n\nData remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase.\n\n\nData remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature.\n\n\nOther than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1301",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1301",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Security Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory"
          ],
          "Note": "Confidential data are readable to untrusted agent."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Architecture or Design Review",
          "Description": "\n\n  - Testing of memory-device contents after clearing or erase commands.\n\n  - Dynamic analysis of memory contents during device operation to detect specific, confidential assets.\n\n  - Architecture and design analysis of memory clear and erase operations.\n\n"
        },
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "\n\n  - Testing of memory-device contents after clearing or erase commands.\n\n  - Dynamic analysis of memory contents during device operation to detect specific, confidential assets.\n\n  - Architecture and design analysis of memory clear and erase operations.\n\n"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\n  - Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content.\n\n  - Support for cryptographic erase in self-encrypting, memory devices.\n\n  - External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM).\n\n  - Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\n\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a device that uses flash memory for non-volatile-data storage. To optimize flash-access performance or reliable-flash lifetime, the device might limit the number of flash writes/erases by maintaining some state in internal SRAM and only committing changes to flash memory periodically."
            },
            {
              "BodyText": "The device also supports user reset to factory defaults with the expectation that all personal information is erased from the device after this operation. On factory reset, user files are erased using explicit, erase commands supported by the flash device."
            },
            {
              "BodyText": "In the given, system design, the flash-file system can support performance-optimized erase such that only the file metadata are erased and not the content. If this optimized erase is used for files containing user data during factory-reset flow, then device, flash memory can contain remanent data from these files."
            },
            {
              "BodyText": "On device-factory reset, the implementation might not erase these copies, since the file organization has changed and the flash file system does not have the metadata to track all previous copies."
            },
            {
              "BodyText": "A flash-memory region that is used by a flash-file system should be fully erased as part of the factory-reset flow. This should include secure-erase flow for the flash media such as overwriting patterns multiple times followed by erase."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-8575",
          "Description": "Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been \"factory-default reset\" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-8575"
        }
      ],
      "RelatedAttackPatterns": [
        "150",
        "37",
        "545"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1154",
          "Authors": [
            "National Institute of Standards and Technology"
          ],
          "Title": "NIST Special Publication 800-88 Revision 1: Guidelines for Media Sanitization",
          "PublicationYear": "2014",
          "PublicationMonth": "12",
          "URL": "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-88r1.pdf",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1331",
      "Name": "Improper Isolation of Shared Resources in Network On Chip (NoC)",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",
      "ExtendedDescription": "\n\nTypically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "653",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "668",
          "ViewID": "1000"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1189",
          "ViewID": "1194"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Security Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "BackgroundDetails": [
        "\n\n\"Network-on-chip\" (NoC) is a commonly-used term used for hardware interconnect fabrics used by multicore Systems-on-Chip (SoC). Communication between modules on the chip uses packet-based methods, with improved efficiency and scalability compared to bus architectures [REF-1241].\n"
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (Other)",
            "Varies by Context",
            "Other"
          ],
          "Likelihood": [
            "Medium"
          ],
          "Note": "Attackers may infer data that belongs to a trusted agent. The methods used to perform this attack may result in noticeably increased resource consumption."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "Providing marker flags to send through the interfaces coupled with examination of which users are able to read or manipulate the flags will help verify that the proper isolation has been achieved and is effective.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Consider a NoC that implements a one-dimensional mesh network with four nodes. This supports two flows: Flow A from node 0 to node 3 (via node 1 and node 2) and Flow B from node 1 to node 2. Flows A and B share a common link between Node 1 and Node 2. Only one flow can use the link in each cycle."
            },
            {
              "BodyText": "One of the masters to this NoC implements a cryptographic algorithm (RSA), and another master to the NoC is a core that can be exercised by an attacker. The RSA algorithm performs a modulo multiplication of two large numbers and depends on each bit of the secret key. The algorithm examines each bit in the secret key and only performs multiplication if the bit is 1. This algorithm is known to be prone to timing attacks. Whenever RSA performs multiplication, there is additional network traffic to the memory controller. One of the reasons for this is cache conflicts."
            },
            {
              "BodyText": "Since this is a one-dimensional mesh, only one flow can use the link in each cycle. Also, packets from the attack program and the RSA program share the output port of the network-on-chip. This contention results in network interference, and the throughput and latency of one flow can be affected by the other flow's demand."
            },
            {
              "Nature": "Attack",
              "ExampleCode": "The attacker runs a loop program on the core they control, and this causes a cache miss in every iteration for the RSA algorithm. Thus, by observing network-traffic bandwidth and timing, the attack program can determine when the RSA algorithm is doing a multiply operation (i.e., when the secret key bit is 1) and eventually extract the entire, secret key."
            },
            {
              "BodyText": "There may be different ways to fix this particular weakness."
            },
            {
              "Nature": "Good",
              "Language": "Other",
              "ExampleCode": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-33096",
          "Description": "Improper isolation of shared resource in a network-on-chip leads to denial of service",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33096"
        }
      ],
      "RelatedAttackPatterns": [
        "124"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1155",
          "Authors": [
            "Hassan M. G. Wassel, Ying Gao, Jason K. Oberg, Tedd Huffmire, Ryan Kastner, Frederic T. Chong, Timothy Sherwood"
          ],
          "Title": "SurfNoC: A Low Latency and Provably Non-Interfering Approach to Secure Networks-On-Chip",
          "PublicationYear": "2013",
          "URL": "http://cseweb.ucsd.edu/~kastner/papers/isca13-surfNOC.pdf"
        },
        {
          "ExternalReferenceID": "REF-1241",
          "Authors": [
            "Wikipedia"
          ],
          "Title": "Network on a chip",
          "URL": "https://en.wikipedia.org/wiki/Network_on_a_chip",
          "URLDate": "2021-10-24"
        },
        {
          "ExternalReferenceID": "REF-1242",
          "Authors": [
            "Subodha Charles",
            "Prabhat Mishra"
          ],
          "Title": "A Survey of Network-on-Chip Security Attacks and Countermeasures",
          "Publication": "ACM Computing Surveys",
          "PublicationYear": "2021",
          "PublicationMonth": "05",
          "URL": "https://dl.acm.org/doi/fullHtml/10.1145/3450964",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1245",
          "Authors": [
            "Subodha Charles"
          ],
          "Title": "Design of Secure and Trustworthy Network-on-chip Architectures",
          "PublicationYear": "2020",
          "URL": "https://www.cise.ufl.edu/research/cad/Publications/charlesThesis.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1332",
      "Name": "Improper Handling of Faults that Lead to Instruction Skips",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Stable",
      "Description": "The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.",
      "ExtendedDescription": "\n\nThe operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.\n\n\nIn practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.\n\n\nAttackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a \"natural\" setting.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1384",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "1247",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Failure to design appropriate countermeasures to common fault injection techniques can manifest this weakness."
        },
        {
          "Phase": "Implementation",
          "Note": "This weakness can arise if the hardware design incorrectly implements countermeasures to prevent fault injection."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Authentication"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Alter Execution Logic",
            "Unexpected State"
          ],
          "Likelihood": [
            "High"
          ],
          "Note": "Depending on the context, instruction skipping can have a broad range of consequences related to the generic bypassing of security critical code."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Static Analysis",
          "Description": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Simulation / Emulation",
          "Description": "This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.",
          "Effectiveness": "Moderate"
        },
        {
          "Method": "Manual Analysis",
          "Description": "This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.",
          "Effectiveness": "Moderate"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Design strategies for ensuring safe behavior if instructions attempt to be skipped."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use redundant operations or canaries to detect and respond to faults."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A smart card contains authentication credentials that are used as authorization to enter a building. The credentials are only accessible when a correct PIN is presented to the card."
            },
            {
              "Nature": "Bad",
              "ExampleCode": "The card emits the credentials when a voltage anomaly is injected into the power line to the device at a particular time after providing an incorrect PIN to the card, causing the internal program to accept the incorrect PIN."
            },
            {
              "BodyText": "There are several ways this weakness could be fixed."
            },
            {
              "Nature": "Good",
              "ExampleCode": "- add an internal filter or internal power supply in series with the power supply pin on the device\n\n  - add sensing circuitry to reset the device if out of tolerance conditions are detected\n\n  - add additional execution sensing circuits to monitor the execution order for anomalies and abort the action or reset the device under fault conditions"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-15894",
          "Description": "fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-15894"
        }
      ],
      "FunctionalAreas": [
        "Power"
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1161",
          "Authors": [
            "Josep Balasch",
            "Benedikt Gierlichs",
            "Ingrid Verbauwhede"
          ],
          "Title": "An In-depth and Black-box Characterization of the Effects of Clock Glitches on 8-bit MCUs",
          "Publication": "2011 Workshop on Fault Diagnosis and Tolerance in Cryptography (IEEE)",
          "PublicationYear": "2011",
          "PublicationMonth": "09",
          "URL": "https://ieeexplore.ieee.org/document/6076473"
        },
        {
          "ExternalReferenceID": "REF-1222",
          "Authors": [
            "Alexandre Menu",
            "Jean-Max Dutertre",
            "Olivier Potin",
            "Jean-Baptiste Rigaud"
          ],
          "Title": "Experimental Analysis of the Electromagnetic Instruction Skip Fault Model",
          "Publication": "IEEE Xplore",
          "PublicationYear": "2020",
          "PublicationMonth": "04",
          "PublicationDay": "30",
          "URL": "https://ieeexplore.ieee.org/document/9081261"
        },
        {
          "ExternalReferenceID": "REF-1223",
          "Authors": [
            "Niek Timmers",
            "Albert Spruyt",
            "Marc Witteman"
          ],
          "Title": "Controlling PC on ARM using Fault Injection",
          "PublicationYear": "2016",
          "PublicationMonth": "06",
          "PublicationDay": "11",
          "URL": "https://fdtc.deib.polimi.it/FDTC16/shared/FDTC-2016-session_2_1.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1224",
          "Authors": [
            "Colin O'Flynn"
          ],
          "Title": "Attacking USB Gear with EMFI",
          "Publication": "Circuit Cellar",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://www.totalphase.com/media/pdf/whitepapers/Circuit_Cellar_TP.pdf"
        },
        {
          "ExternalReferenceID": "REF-1286",
          "Section": "4.3",
          "Authors": [
            "Lennert Wouters",
            "Benedikt Gierlichs",
            "Bart Preneel"
          ],
          "Title": "On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "14",
          "URL": "https://eprint.iacr.org/2022/328.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1333",
      "Name": "Inefficient Regular Expression Complexity",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
      "ExtendedDescription": "Some regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match.\n Backtracking becomes a weakness if all of these conditions are met:\n\n\n  - The number of possible backtracking attempts are exponential relative to the length of the input.\n\n  - The input can fail to match the regular expression.\n\n  - The input can be long enough.\n\n Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike. ",
      "LikelihoodOfExploit": "High",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "407",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "407",
          "ViewID": "1003",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "ReDoS",
          "Description": "ReDoS is an abbreviation of \"Regular expression Denial of Service\"."
        },
        {
          "Term": "Regular Expression Denial of Service",
          "Description": "While this term is attack-focused, this is commonly used to describe the weakness."
        },
        {
          "Term": "Catastrophic backtracking",
          "Description": "This term is used to describe the behavior of the regular expression as a negative technical impact."
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "A RegEx can be easy to create and read using unbounded matching characters, but the programmer might not consider the risk of excessive backtracking."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (CPU)"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.",
          "Effectiveness": "High",
          "EffectivenessNotes": "This is one of the few effective solutions when using user-provided regular expressions."
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.",
          "Effectiveness": "Moderate"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Limit the length of the input that the regular expression will process.",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-158",
          "Entries": [
            {
              "IntroText": "This example attempts to check if an input string is a \"sentence\" [REF-1164]."
            },
            {
              "Nature": "Bad",
              "Language": "JavaScript",
              "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var bad_pattern = /^(\\w+\\s?)*$/i;\n var result = test_string.search(bad_pattern);"
            },
            {
              "BodyText": "The regular expression has a vulnerable backtracking clause inside (\\w+\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.\n\n\nTo fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\2 which prevents the backtracking. The modified example is:"
            },
            {
              "Nature": "Good",
              "Language": "JavaScript",
              "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var good_pattern = /^((?=(\\w+))\\2\\s?)*$/i;\n var result = test_string.search(good_pattern);"
            },
            {
              "BodyText": "Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "This example attempts to check if an input string is a \"sentence\" and is modified for Perl [REF-1164]."
            },
            {
              "Nature": "Bad",
              "Language": "Perl",
              "ExampleCode": "my $test_string = \"Bad characters: \\$\\@\\#\";\n my $bdrslt = $test_string;\n $bdrslt =~ /^(\\w+\\s?)*$/i;"
            },
            {
              "BodyText": "The regular expression has a vulnerable backtracking clause inside (\\w+\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.\n\n\nTo fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\2 which prevents the backtracking. The modified example is:"
            },
            {
              "Nature": "Good",
              "Language": "Perl",
              "ExampleCode": "my $test_string = \"Bad characters: \\$\\@\\#\";\n my $gdrslt = $test_string;\n $gdrslt =~ /^((?=(\\w+))\\2\\s?)*$/i;"
            },
            {
              "BodyText": "Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-5243",
          "Description": "server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5243"
        },
        {
          "Reference": "CVE-2021-21317",
          "Description": "npm package for user-agent parser prone to ReDoS due to overlapping capture groups",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21317"
        },
        {
          "Reference": "CVE-2019-16215",
          "Description": "Markdown parser uses inefficient regex when processing a message, allowing users to cause CPU consumption and delay preventing processing of other messages.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-16215"
        },
        {
          "Reference": "CVE-2019-6785",
          "Description": "Long string in a version control product allows DoS due to an inefficient regex.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6785"
        },
        {
          "Reference": "CVE-2019-12041",
          "Description": "Javascript code allows ReDoS via a long string due to excessive backtracking.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-12041"
        },
        {
          "Reference": "CVE-2015-8315",
          "Description": "ReDoS when parsing time.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-8315"
        },
        {
          "Reference": "CVE-2015-8854",
          "Description": "ReDoS when parsing documents.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-8854"
        },
        {
          "Reference": "CVE-2017-16021",
          "Description": "ReDoS when validating URL.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-16021"
        }
      ],
      "RelatedAttackPatterns": [
        "492"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1180",
          "Authors": [
            "Scott A. Crosby"
          ],
          "Title": "Regular Expression Denial of Service",
          "PublicationYear": "2003",
          "PublicationMonth": "08",
          "URL": "https://web.archive.org/web/20031120114522/http://www.cs.rice.edu/~scrosby/hash/slides/USENIX-RegexpWIP.2.ppt"
        },
        {
          "ExternalReferenceID": "REF-1162",
          "Authors": [
            "Jan Goyvaerts"
          ],
          "Title": "Runaway Regular Expressions: Catastrophic Backtracking",
          "PublicationYear": "2019",
          "PublicationMonth": "12",
          "PublicationDay": "22",
          "URL": "https://www.regular-expressions.info/catastrophic.html"
        },
        {
          "ExternalReferenceID": "REF-1163",
          "Authors": [
            "Adar Weidman"
          ],
          "Title": "Regular expression Denial of Service - ReDoS",
          "URL": "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        },
        {
          "ExternalReferenceID": "REF-1164",
          "Authors": [
            "Ilya Kantor"
          ],
          "Title": "Catastrophic backtracking",
          "PublicationYear": "2020",
          "PublicationMonth": "12",
          "PublicationDay": "13",
          "URL": "https://javascript.info/regexp-catastrophic-backtracking"
        },
        {
          "ExternalReferenceID": "REF-1165",
          "Authors": [
            "Cristian-Alexandru Staicu",
            "Michael Pradel"
          ],
          "Title": "Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers",
          "Publication": "USENIX Security Symposium",
          "PublicationYear": "2018",
          "PublicationMonth": "07",
          "PublicationDay": "11",
          "URL": "https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-staicu.pdf"
        },
        {
          "ExternalReferenceID": "REF-1166",
          "Authors": [
            "James C. Davis",
            "Christy A. Coghlan",
            "Francisco Servant",
            "Dongyoon Lee"
          ],
          "Title": "The Impact of Regular Expression Denial of Service (ReDoS) in Practice: An Empirical Study at the Ecosystem Scale",
          "PublicationYear": "2018",
          "PublicationMonth": "08",
          "PublicationDay": "01",
          "URL": "https://fservant.github.io/papers/Davis_Coghlan_Servant_Lee_ESECFSE18.pdf",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1167",
          "Authors": [
            "James Davis"
          ],
          "Title": "The Regular Expression Denial of Service (ReDoS) cheat-sheet",
          "PublicationYear": "2020",
          "PublicationMonth": "05",
          "PublicationDay": "23",
          "URL": "https://levelup.gitconnected.com/the-regular-expression-denial-of-service-redos-cheat-sheet-a78d0ed7d865"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1334",
      "Name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.",
      "ExtendedDescription": "\n\nTo ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "284",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
        },
        {
          "Phase": "Integration",
          "Note": "Such issues could be introduced during integration and identified later during Testing or System Configuration phases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart",
            "DoS: Instability",
            "Quality Degradation",
            "DoS: Resource Consumption (CPU)",
            "DoS: Resource Consumption (Memory)",
            "DoS: Resource Consumption (Other)",
            "Reduce Performance",
            "Reduce Reliability",
            "Unexpected State"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors."
        },
        {
          "Phase": [
            "Integration"
          ],
          "Description": "Add an access control layer atop any unprotected interfaces for injecting errors."
        }
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1335",
      "Name": "Incorrect Bitwise Shift of Integer",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.",
      "ExtendedDescription": "\n\nSpecifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue.\n\n\nSpecifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "682",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "C",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C++",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C#",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Java",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "JavaScript",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "Adding shifts without properly verifying the size and sign of the shift amount."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Implicitly or explicitly add checks and mitigation for negative or over-shift values."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "A negative shift amount for an x86 or x86_64 shift instruction will produce the number of bits to be shifted by taking a 2's-complement of the shift amount and effectively masking that amount to the lowest 6 bits for a 64 bit shift instruction."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "unsigned int r = 1 << -5;"
            },
            {
              "BodyText": "The example above ends up with a shift amount of -5. The hexadecimal value is FFFFFFFFFFFFFFFD which, when bits above the 6th bit are masked off, the shift amount becomes a binary shift value of 111101 which is 61 decimal. A shift of 61 produces a very different result than -5. The previous example is a very simple version of the following code which is probably more realistic of what happens in a real system."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "int choose_bit(int reg_bit, int bit_number_from_elsewhere) \n {\n\n```\n\t if (NEED_TO_SHIFT)\n\t {\n\t\t reg_bit -= bit_number_from_elsewhere;\n\t }\n\t return reg_bit;\n }\n unsigned int handle_io_register(unsigned int *r)\n {\n\t unsigned int the_bit = 1 << choose_bit(5, 10);\n\t *r |= the_bit;\n\t return the_bit;\n }\n```"
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "int choose_bit(int reg_bit, int bit_number_from_elsewhere) \n {\n\n```\n\t if (NEED_TO_SHIFT)\n\t {\n\t\t reg_bit -= bit_number_from_elsewhere;\n\t }\n\t return reg_bit;\n }\n unsigned int handle_io_register(unsigned int *r)\n {\n\t int the_bit_number = choose_bit(5, 10);\n\t if ((the_bit_number > 0) && (the_bit_number < 63))\n\t {\n\t\t unsigned int the_bit = 1 << the_bit_number;\n\t\t *r |= the_bit;\n\t }\n\t return the_bit;\n }\n```"
            },
            {
              "BodyText": "Note that the good example not only checks for negative shifts and disallows them, but it also checks for over-shifts. No bit operation is done if the shift is out of bounds. Depending on the program, perhaps an error message should be logged."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2009-4307",
          "Description": "An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4307"
        },
        {
          "Reference": "CVE-2012-2100",
          "Description": "An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero - fix of CVE-2009-4307.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2100"
        },
        {
          "Reference": "CVE-2020-8835",
          "Description": "An overshift in a kernel allowed out of bounds reads and writes resulting in a root takeover.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8835"
        },
        {
          "Reference": "CVE-2015-1607",
          "Description": "Program is not properly handling signed bitwise left-shifts causing an overlapping memcpy memory range error.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-1607"
        },
        {
          "Reference": "CVE-2016-9842",
          "Description": "Compression function improperly executes a signed left shift of a negative integer.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2016-9842"
        },
        {
          "Reference": "CVE-2018-18445",
          "Description": "Some kernels improperly handle right shifts of 32 bit numbers in a 64 bit register.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-18445"
        },
        {
          "Reference": "CVE-2013-4206",
          "Description": "Putty has an incorrectly sized shift value resulting in an overshift.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2013-4206"
        },
        {
          "Reference": "CVE-2018-20788",
          "Description": "LED driver overshifts under certain conditions resulting in a DoS.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-20788"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1336",
      "Name": "Improper Neutralization of Special Elements Used in a Template Engine",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
      "ExtendedDescription": "\n\nMany web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates.\n\n\nTemplate engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression \"{{7*7}}\" and determine if the output returns \"49\" instead. The syntax varies depending on the language.\n\n\nIn some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error.\n\n\nTemplate engines can be used on the server or client, so both \"sides\" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "94",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Java",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "PHP",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Python",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "JavaScript",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Interpreted",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "AI/ML",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Client Server",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "Server-Side Template Injection / SSTI",
          "Description": "This term is used for injection into template engines being used by a server."
        },
        {
          "Term": "Client-Side Template Injection / CSTI",
          "Description": "This term is used for injection into template engines being used by a client."
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The developer might choose a template engine that makes it easier for programmers to write vulnerable code."
        },
        {
          "Phase": "Implementation",
          "Note": "The programmer might not use engine's built-in sandboxes or other capabilities to escape or otherwise prevent template injection from untrusted input."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Execute Unauthorized Code or Commands"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use the template engine's sandbox or restricted mode, if available."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2024-34359",
          "Description": "Chain: Python bindings for LLM library do not use a sandboxed environment when parsing a template and constructing a prompt, allowing jinja2 Server Side Template Injection and code execution - one variant of a \"prompt injection\" attack.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2024-34359"
        },
        {
          "Reference": "CVE-2017-16783",
          "Description": "server-side template injection in content management server",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-16783"
        },
        {
          "Reference": "CVE-2020-9437",
          "Description": "authentication / identity management product has client-side template injection",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9437"
        },
        {
          "Reference": "CVE-2020-12790",
          "Description": "Server-Side Template Injection using a Twig template",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12790"
        },
        {
          "Reference": "CVE-2021-21244",
          "Description": "devops platform allows SSTI",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21244"
        },
        {
          "Reference": "CVE-2020-4027",
          "Description": "bypass of Server-Side Template Injection protection mechanism with macros in Velocity templates",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4027"
        },
        {
          "Reference": "CVE-2020-26282",
          "Description": "web browser proxy server allows Java EL expressions from Server-Side Template Injection",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-26282"
        },
        {
          "Reference": "CVE-2020-1961",
          "Description": "SSTI involving mail templates and JEXL expressions",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-1961"
        },
        {
          "Reference": "CVE-2019-19999",
          "Description": "product does not use a \"safe\" setting for a FreeMarker configuration, allowing SSTI",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-19999"
        },
        {
          "Reference": "CVE-2018-20465",
          "Description": "product allows read of sensitive database username/password variables using server-side template injection",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-20465"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1193",
          "Authors": [
            "James Kettle"
          ],
          "Title": "Server-Side Template Injection",
          "PublicationYear": "2015",
          "PublicationMonth": "08",
          "PublicationDay": "05",
          "URL": "https://portswigger.net/research/server-side-template-injection",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1194",
          "Authors": [
            "James Kettle"
          ],
          "Title": "Server-Side Template Injection: RCE For The Modern Web App",
          "PublicationYear": "2015",
          "PublicationMonth": "12",
          "PublicationDay": "27",
          "URL": "https://www.youtube.com/watch?v=3cT0uE7Y87s"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Relationship",
          "Note": "Since expression languages are often used in templating languages, there may be some overlap with CWE-917 (Expression Language Injection). XSS (CWE-79) is also co-located with template injection."
        },
        {
          "Type": "Maintenance",
          "Note": "The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified."
        }
      ]
    },
    {
      "ID": "1338",
      "Name": "Improper Protections Against Hardware Overheating",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "A hardware device is missing or has inadequate protection features to prevent overheating.",
      "ExtendedDescription": "\n\nHardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.\n\n\nAny device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.\n\n\nDepending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. \n\n\nThere can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "693",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Power Management Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation",
          "Note": "Such issues could be introduced during hardware architecture, design or implementation."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Resource Consumption (Other)"
          ],
          "Likelihood": [
            "High"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "Dynamic tests should be performed to stress-test temperature controls.",
          "Effectiveness": "High"
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Power management controls should be part of Architecture and Design reviews.",
          "Effectiveness": "High"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Malicious software running on a core can execute instructions that consume maximum power or increase core frequency. Such a power-virus program could execute on the platform for an extended time to overheat the device, resulting in permanent damage."
            },
            {
              "BodyText": "Execution core and platform do not support thermal sensors, performance throttling, or platform-cooling countermeasures to ensure that any software executing on the system cannot cause overheating past the maximum allowable temperature."
            },
            {
              "BodyText": "The platform and SoC should have failsafe thermal limits that are enforced by thermal sensors that trigger critical temperature alerts when high temperature is detected. Upon detection of high temperatures, the platform should trigger cooling or shutdown automatically."
            }
          ]
        }
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1156",
          "Authors": [
            "Leonid Grustniy"
          ],
          "Title": "Loapi--This Trojan is hot!",
          "PublicationYear": "2017",
          "PublicationMonth": "12",
          "URL": "https://www.kaspersky.com/blog/loapi-trojan/20510/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1339",
      "Name": "Insufficient Precision or Accuracy of a Real Number",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Draft",
      "Description": "The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",
      "ExtendedDescription": "\n\nWhen a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker. \n\n\nThere are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as \u03a0 or \u221a2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math. \n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "682",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "PeerOf",
          "CweID": "190",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "834",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "119",
          "ViewID": "1000"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "BackgroundDetails": [
        "There are three major ways to store real numbers in computers. Each method is described along with the limitations of how they store their numbers. \n\n  - Fixed: Some implementations use a fixed number of binary bits to represent both the integer and the fraction. In the demonstrative example about Muller's Recurrence, the fraction 108.0 - ((815.0 - 1500.0 / z) / y) cannot be represented in 8 binary digits. The numeric accuracy within languages such as PL/1, COBOL and Ada is expressed in decimal digits rather than binary digits. In SQL and most databases, the length of the integer and the fraction are specified by the programmer in decimal. In the language C, fixed reals are implemented according to ISO/IEC TR18037\n\n  - Floating: The number is stored in a version of scientific notation with a fixed length for the base and the significand. This allows flexibility for more accuracy when the integer portion is smaller. When dealing with large integers, the fractional accuracy is less. Languages such as PL/1, COBOL and Ada set the accuracy by decimal digit representation rather than using binary digits. Python also implements decimal floating-point numbers using the IEEE 754-2008 encoding method.\n\n  - Ratio: The number is stored as the ratio of two integers. These integers also have their limits. These integers can be stored in a fixed number of bits or in a vector of digits. While the vector of digits method provides for very large integers, they cannot truly represent a repeating or transcendental number as those numbers do not ever have a fixed length.\n\n"
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "This weakness is introduced when the developer picks a method to represent a real number. The weakness may only be visible with very specific numeric inputs."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart"
          ],
          "Note": "This weakness will generally lead to undefined results and therefore crashes. In some implementations the program will halt if the weakness causes an overflow during a calculation."
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Execute Unauthorized Code or Commands"
          ],
          "Note": "The results of the math are not as expected. This could cause issues where a value would not be properly calculated and provide an incorrect answer."
        },
        {
          "Scope": [
            "Confidentiality",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Read Application Data",
            "Modify Application Data"
          ],
          "Note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a product's implicit security policy."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation",
            "Patching and Maintenance"
          ],
          "Description": "The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Muller's Recurrence is a series that is supposed to converge to the number 5. When running this series with the following code, different implementations of real numbers fail at specific iterations:"
            },
            {
              "Nature": "Bad",
              "Language": "Rust",
              "ExampleCode": "fn rec_float(y: f64, z: f64) -> f64 \n {\n\n```\n\t 108.0 - ((815.0 - 1500.0 / z) / y);\n }\n fn float_calc(turns: usize) -> f64 \n {\n\t let mut x: Vec<f64> = vec![4.0, 4.25];\n\t (2..turns + 1).for_each(|number| \n\t {\n\t\t x.push(rec_float(x[number - 1], x[number - 2]));\n\t });\n\t x[turns]\n }\n```"
            },
            {
              "BodyText": "The chart below shows values for different data structures in the rust language when Muller's recurrence is executed to 80 iterations. The data structure f64 is a 64 bit float. The data structures I<number>F<number> are fixed representations 128 bits in length that use the first number as the size of the integer and the second size as the size of the fraction (e.g. I16F112 uses 16 bits for the integer and 112 bits for the fraction). The data structure of Ratio comes in three different implementations: i32 uses a ratio of 32 bit signed integers, i64 uses a ratio of 64 bit signed integers and BigInt uses a ratio of signed integer with up to 2^32 digits of base 256. Notice how even with 112 bits of fractions or ratios of 64bit unsigned integers, this math still does not converge to an expected value of 5."
            },
            {
              "Nature": "Good",
              "Language": "Rust",
              "ExampleCode": "Use num_rational::BigRational;\n\n fn rec_big(y: BigRational, z: BigRational) -> BigRational\n {\n\n```\n\t BigRational::from_integer(BigInt::from(108))\n\t\t - ((BigRational::from_integer(BigInt::from(815))\n\t\t - BigRational::from_integer(BigInt::from(1500)) / z)\n\t\t / y)\n }\n fn big_calc(turns: usize) -> BigRational \n {\n\t let mut x: Vec<BigRational> = vec![BigRational::from_float(4.0).unwrap(), BigRational::from_float(4.25).unwrap(),];\n\t (2..turns + 1).for_each(|number| \n\t {\n\t\t x.push(rec_big(x[number - 1].clone(), x[number - 2].clone()));\n\t });\n\t x[turns].clone()\n }\n```"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "On February 25, 1991, during the eve of the Iraqi invasion of Saudi Arabia, a Scud missile fired from Iraqi positions hit a US Army barracks in Dhahran, Saudi Arabia. It miscalculated time and killed 28 people [REF-1190]."
            },
            {
              "Reference": "REF-1190"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Sleipner A, an offshore drilling platform in the North Sea, was incorrectly constructed with an underestimate of 50% of strength in a critical cluster of buoyancy cells needed for construction. This led to a leak in buoyancy cells during lowering, causing a seismic event of 3.0 on the Richter Scale and about $700M loss [REF-1281]."
            },
            {
              "Reference": "REF-1281"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2018-16069",
          "Description": "Chain: series of floating-point precision errors (CWE-1339) in a web browser rendering engine causes out-of-bounds read (CWE-125), giving access to cross-origin data",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-16069"
        },
        {
          "Reference": "CVE-2017-7619",
          "Description": "Chain: rounding error in floating-point calculations (CWE-1339) in image processor leads to infinite loop (CWE-835)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-7619"
        },
        {
          "Reference": "CVE-2021-29529",
          "Description": "Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29529"
        },
        {
          "Reference": "CVE-2008-2108",
          "Description": "Chain: insufficient precision (CWE-1339) in random-number generator causes some zero bits to be reliably generated, reducing the amount of entropy (CWE-331)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2108"
        },
        {
          "Reference": "CVE-2006-6499",
          "Description": "Chain: web browser crashes due to infinite loop - \"bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]\"",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1186",
          "Title": "Is COBOL holding you hostage with Math?",
          "PublicationYear": "2018",
          "PublicationMonth": "07",
          "PublicationDay": "28",
          "URL": "https://medium.com/the-technical-archaeologist/is-cobol-holding-you-hostage-with-math-5498c0eb428b"
        },
        {
          "ExternalReferenceID": "REF-1187",
          "Title": "Intermediate results and arithmetic precision",
          "PublicationYear": "2021",
          "PublicationMonth": "06",
          "PublicationDay": "30",
          "URL": "https://www.ibm.com/docs/en/cobol-zos/6.2?topic=appendixes-intermediate-results-arithmetic-precision"
        },
        {
          "ExternalReferenceID": "REF-1188",
          "Title": "8.1.2. Arbitrary Precision Numbers",
          "PublicationYear": "2021",
          "PublicationMonth": "06",
          "PublicationDay": "24",
          "URL": "https://www.postgresql.org/docs/8.3/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL"
        },
        {
          "ExternalReferenceID": "REF-1189",
          "Title": "Muller's Recurrence",
          "PublicationYear": "2017",
          "PublicationMonth": "11",
          "PublicationDay": "11",
          "URL": "https://scipython.com/blog/mullers-recurrence/"
        },
        {
          "ExternalReferenceID": "REF-1190",
          "Title": "An Improvement To Floating Point Numbers",
          "PublicationYear": "2015",
          "PublicationMonth": "10",
          "PublicationDay": "22",
          "URL": "https://hackaday.com/2015/10/22/an-improvement-to-floating-point-numbers/"
        },
        {
          "ExternalReferenceID": "REF-1191",
          "Title": "HIGH PERFORMANCE COMPUTING:  ARE WE JUST GETTING WRONG ANSWERS FASTER?",
          "PublicationYear": "1999",
          "PublicationMonth": "06",
          "PublicationDay": "23",
          "URL": "https://www3.nd.edu/~markst/cast-award-speech.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1341",
      "Name": "Multiple Releases of Same Resource or Handle",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.",
      "ExtendedDescription": "\n\nCode typically requires \"opening\" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to \"close\" or \"release\" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages.\n\n\nUnfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences.\n\n\nNote that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "675",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "CanPrecede",
          "CweID": "672",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Name": "Java",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "Rust",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Language",
          "Name": "C++",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Availability",
            "Integrity"
          ],
          "Impact": [
            "DoS: Crash, Exit, or Restart"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Static Analysis",
          "Description": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue."
        },
        {
          "Method": "Automated Dynamic Analysis",
          "Description": "Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Refactoring",
          "Description": "It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Refactoring",
          "Description": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
          "Effectiveness": "Defense in Depth"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "This example attempts to close a file twice. In some cases, the C library fclose() function will catch the error and return an error code. In other implementations, a double-free (CWE-415) occurs, causing the program to fault. Note that the examples presented here are simplistic, and double fclose() calls will frequently be spread around a program, making them more difficult to find during code reviews."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "char b[2000];\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tb[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t int r1 = fclose(f);\n\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r1);\n\t int r2 = fclose(f); // Double close\n\t printf(\"2 close done '%d'\\n\", r2);\n }\n```"
            },
            {
              "BodyText": "There are multiple possible fixes. This fix only has one call to fclose(), which is typically the preferred handling of this problem - but this simplistic method is not always possible."
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "char b[2000];\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tb[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t int r = fclose(f);\n\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r);\n }\n```"
            },
            {
              "BodyText": "This fix uses a flag to call fclose() only once. Note that this flag is explicit. The variable \"f\" could also have been used as it will be either NULL if the file is not able to be opened or a valid pointer if the file was successfully opened. If \"f\" is replacing \"f_flg\" then \"f\" would need to be set to NULL after the first fclose() call so the second fclose call would never be executed."
            },
            {
              "Nature": "Good",
              "Language": "C",
              "ExampleCode": "char b[2000];\n int f_flg = 0;\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tf_flg = 1;\n\t b[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t if (f_flg)\n\t {\n\t\tint r1 = fclose(f);\n\t\t f_flg = 0;\n\t\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r1);\n\t }\n\t if (f_flg)\n\t {\n\t\tint r2 = fclose(f); // Double close\n\t\t f_flg = 0;\n\t\t printf(\"2 close done '%d'\\n\", r2);\n\t }\n }\n```"
            }
          ]
        },
        {
          "ID": "DX-149",
          "Entries": [
            {
              "IntroText": "The following code shows a simple example of a double free vulnerability."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\t...\n\tif (abrt) {\n\t\tfree(ptr);\n\t}\n\t...\n\tfree(ptr);\n```"
            },
            {
              "BodyText": "Double free vulnerabilities have two common (and sometimes overlapping) causes:"
            },
            {
              "BodyText": "- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"
            },
            {
              "BodyText": "Although some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-13351",
          "Description": "file descriptor double close can cause the wrong file to be associated with a file descriptor.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-13351"
        },
        {
          "Reference": "CVE-2006-5051",
          "Description": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition that leads to a double free (CWE-415).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5051"
        },
        {
          "Reference": "CVE-2004-0772",
          "Description": "Double free resultant from certain error conditions.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0772"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1198",
          "Title": "close - Perldoc Browser",
          "URL": "https://perldoc.perl.org/functions/close"
        },
        {
          "ExternalReferenceID": "REF-1199",
          "Title": "io - Core tools for working with streams \u2014 Python 3.9.7 documentation",
          "PublicationYear": "2021",
          "PublicationMonth": "09",
          "PublicationDay": "02",
          "URL": "https://docs.python.org/3.9/library/io.html#io.IOBase.close"
        },
        {
          "ExternalReferenceID": "REF-1200",
          "Title": "FileOutputStream (Java Platform SE 7 )",
          "PublicationYear": "2020",
          "URL": "https://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html"
        },
        {
          "ExternalReferenceID": "REF-1201",
          "Title": "FileOutputStream (Java SE 11 & JDK 11 )",
          "PublicationYear": "2021",
          "URL": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Terminology",
          "Note": "The terms related to \"release\" may vary depending on the type of resource, programming language, specification, or framework. \"Close\" has been used synonymously for the release of resources like file descriptors and file handles. \"Return\" is sometimes used instead of Release. \"Free\" is typically used when releasing memory or buffers back into the system for reuse."
        }
      ]
    },
    {
      "ID": "1342",
      "Name": "Information Exposure through Microarchitectural State after Transient Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",
      "ExtendedDescription": "\n\nIn many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers.\n\n\nSeveral conditions may need to be fulfilled for a successful attack:\n\n\n  1. incorrect transient execution that results in remanence of sensitive information;\n\n  1. attacker has the ability to provoke microarchitectural exceptions;\n\n  1. operations and structures in victim code that can be exploited must be identified.\n\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "226",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Workstation",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Name": "x86",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Name": "ARM",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Name": "Other",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Requirements"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity"
          ],
          "Impact": [
            "Modify Memory",
            "Read Memory",
            "Execute Unauthorized Code or Commands"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design",
            "Requirements"
          ],
          "Description": "Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.",
          "Effectiveness": "High",
          "EffectivenessNotes": "Being implemented in silicon it is expected to fully address the known weaknesses with limited performance impact."
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.",
          "Effectiveness": "High",
          "EffectivenessNotes": "This effectively forces the processor to complete each memory access before moving on to the next operation. This may have a large performance impact."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Faulting loads in a victim domain may trigger incorrect transient forwarding, which leaves secret-dependent traces in the microarchitectural state. Consider this example from [REF-1203]."
            },
            {
              "BodyText": "Consider the code gadget:"
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\t void call_victim(size_t untrusted_arg) {\n\t\t *arg_copy = untrusted_arg;\n\t\t array[**trusted_ptr * 4096];\n\t } \n```"
            },
            {
              "BodyText": "A processor with this weakness will store the value of untrusted_arg (which may be provided by an attacker) to the stack, which is trusted memory. Additionally, this store operation will save this value in some microarchitectural buffer, e.g. the store queue.\n\n\nIn this code gadget, trusted_ptr is dereferenced while the attacker forces a page fault. The faulting load causes the processor to mis-speculate by forwarding untrusted_arg as the (speculative) load result. The processor then uses untrusted_arg for the pointer dereference. After the fault has been handled and the load has been re-issued with the correct argument, secret-dependent information stored at the address of trusted_ptr remains in microarchitectural state and can be extracted by an attacker using a code gadget."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-0551",
          "Description": "Load value injection in some processors utilizing speculative execution may allow an authenticated user to enable information disclosure via a side-channel with local access.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-0551"
        }
      ],
      "RelatedAttackPatterns": [
        "696"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1202",
          "Authors": [
            "Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens"
          ],
          "Title": "LVI - Hijacking Transient Execution with Load Value Injection",
          "PublicationYear": "2020",
          "URL": "https://lviattack.eu/"
        },
        {
          "ExternalReferenceID": "REF-1203",
          "Authors": [
            "Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens"
          ],
          "Title": "LVI: Hijacking Transient Execution through Microarchitectural Load Value Injection",
          "PublicationYear": "2020",
          "PublicationMonth": "01",
          "PublicationDay": "09",
          "URL": "https://lviattack.eu/lvi.pdf"
        },
        {
          "ExternalReferenceID": "REF-1204",
          "Title": "Hijacking Transient Execution through Microarchitectural Load Value Injection",
          "PublicationYear": "2020",
          "PublicationMonth": "05",
          "PublicationDay": "18",
          "URL": "https://www.youtube.com/watch?v=99kVz-YGi6Y"
        },
        {
          "ExternalReferenceID": "REF-1205",
          "Authors": [
            "Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin, Yuval Yarom"
          ],
          "Title": "CacheOut: Leaking Data on Intel CPUs via Cache Evictions",
          "PublicationYear": "2020",
          "PublicationMonth": "12",
          "PublicationDay": "28",
          "URL": "https://cacheoutattack.com/files/CacheOut.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Relationship",
          "Note": "CWE-1342 differs from CWE-1303, which is related to misprediction and biasing microarchitectural components, while CWE-1342 addresses illegal data flows and retention. For example, Spectre is an instance of CWE-1303 biasing branch prediction to steer the transient execution indirectly."
        },
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10."
        }
      ]
    },
    {
      "ID": "1351",
      "Name": "Improper Handling of Hardware Behavior in Exceptionally Cold Environments",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "A hardware device, or the firmware running on it, is\n                missing or has incorrect protection features to maintain\n                goals of security primitives when the device is cooled below\n                standard operating temperatures.",
      "ExtendedDescription": "\n\nThe hardware designer may improperly anticipate hardware behavior when exposed to exceptionally cold conditions. As a result they may introduce a weakness by not accounting for the modified behavior of critical components when in extreme environments.\n\n\nAn example of a change in behavior is that power loss won't clear/reset any volatile state when cooled below standard operating temperatures. This may result in a weakness when the starting state of the volatile memory is being relied upon for a security decision. For example, a Physical Unclonable Function (PUF) may be supplied as a security primitive to improve confidentiality, authenticity, and integrity guarantees. However, when the PUF is paired with DRAM, SRAM, or another temperature sensitive entropy source, the system designer may introduce weakness by failing to account for the chosen entropy source's behavior at exceptionally low temperatures. In the case of DRAM and SRAM, when power is cycled at low temperatures, the device will not contain the bitwise biasing caused by inconsistencies in manufacturing and will instead contain the data from previous boot. Should the PUF primitive be used in a cryptographic construction which does not account for full adversary control of PUF seed data, weakness would arise.\n\n\nThis weakness does not cover \"Cold Boot Attacks\" wherein RAM or other external storage is super cooled and read externally by an attacker.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1384",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Embedded",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Microcomputer",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity",
            "Authentication"
          ],
          "Impact": [
            "Varies by Context",
            "Unexpected State"
          ],
          "Likelihood": [
            "Low"
          ],
          "Note": "Consequences of this weakness are highly contextual."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The system should account for security primitive behavior when cooled outside standard temperatures."
        }
      ],
      "RelatedAttackPatterns": [
        "624",
        "625"
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1181",
          "Authors": [
            "Nikolaos Athanasios Anagnostopoulos",
            "Tolga Arul",
            "Markus Rosenstihl",
            "Andr\u00e9 Schaller",
            "Sebastian Gabmeyer",
            "Stefan Katzenbeisser"
          ],
          "Title": "Low-Temperature Data Remnanence Attacks Against Intrinsic SRAM PUFs",
          "PublicationYear": "2018",
          "PublicationMonth": "10",
          "PublicationDay": "15",
          "URL": "https://ieeexplore.ieee.org/abstract/document/8491873/"
        },
        {
          "ExternalReferenceID": "REF-1182",
          "Authors": [
            "Yuan Cao",
            "Yunyi Guo",
            "Benyu Liu",
            "Wei Ge",
            "Min Zhu",
            "Chip-Hong Chang"
          ],
          "Title": "A Fully Digital Physical Unclonable Function Based Temperature Sensor for Secure Remote Sensing",
          "PublicationYear": "2018",
          "PublicationMonth": "10",
          "PublicationDay": "11",
          "URL": "https://ieeexplore.ieee.org/abstract/document/8487347/"
        },
        {
          "ExternalReferenceID": "REF-1183",
          "Authors": [
            " Urbi Chatterjee",
            " Soumi Chatterjee",
            " Debdeep Mukhopadhyay",
            " Rajat Subhra Chakraborty"
          ],
          "Title": "Machine Learning Assisted PUF Calibration for Trustworthy Proof of Sensor Data in IoT",
          "PublicationYear": "2020",
          "PublicationMonth": "06",
          "URL": "https://dl.acm.org/doi/abs/10.1145/3393628",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1357",
      "Name": "Reliance on Insufficiently Trustworthy Component",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.",
      "ExtendedDescription": "\n\nMany modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party.\n\n\nRegardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company.\n\n\nNote that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "710",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "WeaknessOrdinalities": [
        {
          "Ordinality": "Indirect"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Requirements",
          "Note": "Requirements might include criteria for which the only available solutions are provided by insufficiently trusted components."
        },
        {
          "Phase": "Architecture and Design",
          "Note": "An insufficiently trusted component might be selected because it is less expensive to do in-house, requires expertise that is not available in-house, or might allow the product to reach the market faster."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Reduce Maintainability"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements",
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Integration",
            "Manufacturing"
          ],
          "Description": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\""
        },
        {
          "Phase": [
            "Operation",
            "Patching and Maintenance"
          ],
          "Description": "Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-9054",
          "Description": "Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are \"end-of-support\" and cannot be patched (CWE-1277). [REF-1097]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054"
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 2-4",
          "EntryName": "Req SP.03.02 RE(1)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 2-4",
          "EntryName": "Req SP.03.02 RE(2)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 3-3",
          "EntryName": "Req SR 1.13"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req EDR 3.12"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req HDR 3.12"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req NDR 3.12"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req EDR 3.13"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req HDR 3.13"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req NDR 3.13"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR-7.8"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SM-6"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SM-9"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SM-10"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1212",
          "Title": "A06:2021 - Vulnerable and Outdated Components",
          "PublicationYear": "2021",
          "PublicationMonth": "09",
          "PublicationDay": "24",
          "Publisher": "OWASP",
          "URL": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"
        },
        {
          "ExternalReferenceID": "REF-1246",
          "Authors": [
            "National Telecommunications and Information Administration"
          ],
          "Title": "SOFTWARE BILL OF MATERIALS",
          "URL": "https://ntia.gov/page/software-bill-materials",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1247",
          "Authors": [
            "NTIA Multistakeholder Process on Software Component Transparency Framing Working Group"
          ],
          "Title": "Framing Software Component Transparency: Establishing a Common Software Bill of Materials (SBOM)",
          "PublicationYear": "2021",
          "PublicationMonth": "10",
          "PublicationDay": "21",
          "URL": "https://www.ntia.gov/files/ntia/publications/ntia_sbom_framing_2nd_edition_20211021.pdf"
        },
        {
          "ExternalReferenceID": "REF-1097",
          "Authors": [
            "Brian Krebs"
          ],
          "Title": "Zyxel Flaw Powers New Mirai IoT Botnet Strain",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "20",
          "URL": "https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      },
      "Notes": [
        {
          "Type": "Maintenance",
          "Note": "As of CWE 4.10, the name and description for this entry has undergone significant change and is still under public discussion, especially by members of the HW SIG."
        }
      ]
    },
    {
      "ID": "1384",
      "Name": "Improper Handling of Physical or Environmental Conditions",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.",
      "ExtendedDescription": "\n\nHardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary.\n\n\nPhysical or environmental conditions of concern are:\n\n\n  -  **Atmospheric characteristics: ** extreme temperature ranges, etc.\n\n  -  **Interference: ** electromagnetic interference (EMI), radio frequency interference (RFI), etc.\n\n  -  **Assorted light sources: ** white light, ultra-violet light (UV), lasers, infrared (IR), etc.\n\n  -  **Power variances: ** under-voltages, over-voltages, under-current, over-current, etc.\n\n  -  **Clock variances: ** glitching, overclocking, clock stretching, etc.\n\n  -  **Component aging and degradation** \n\n  -  **Materials manipulation: ** focused ion beams (FIB), etc.\n\n  -  **Exposure to radiation: ** x-rays, cosmic radiation, etc.\n\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "703",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The product's design might not consider checking and handling extreme conditions."
        },
        {
          "Phase": "Manufacturing",
          "Note": "For hardware manufacturing, sub-par components might be chosen that are not able to handle the expected environmental conditions."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Varies by Context",
            "Unexpected State"
          ],
          "Note": "Consequences of this weakness are highly dependent on the role of affected components within the larger product."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2019-17391",
          "Description": "Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-17391"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1248",
          "Section": "ICS Communications / 2. Unreliability",
          "Authors": [
            "Securing Energy Infrastructure Executive Task Force (SEI ETF)"
          ],
          "Title": "Categories of Security Vulnerabilities in ICS",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "09",
          "URL": "https://inl.gov/wp-content/uploads/2022/03/SEI-ETF-NCSV-TPT-Categories-of-Security-Vulnerabilities-ICS-v1_03-09-22.pdf"
        },
        {
          "ExternalReferenceID": "REF-1255",
          "Authors": [
            "Sergei P. Skorobogatov"
          ],
          "Title": "Semi-invasive attacks - A new approach to hardware security analysis",
          "PublicationYear": "2005",
          "PublicationMonth": "04",
          "URL": "https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-630.pdf"
        },
        {
          "ExternalReferenceID": "REF-1285",
          "Authors": [
            "Texas Instruments"
          ],
          "Title": "Physical Security Attacks Against Silicon Devices",
          "PublicationYear": "2022",
          "PublicationMonth": "01",
          "PublicationDay": "31",
          "URL": "https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420"
        },
        {
          "ExternalReferenceID": "REF-1286",
          "Section": "1.2",
          "Authors": [
            "Lennert Wouters",
            "Benedikt Gierlichs",
            "Bart Preneel"
          ],
          "Title": "On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "14",
          "URL": "https://eprint.iacr.org/2022/328.pdf"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1385",
      "Name": "Missing Origin Validation in WebSockets",
      "Abstraction": "Variant",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
      "ExtendedDescription": "\n\nWebSockets provide a bi-directional low latency communication (near real-time) between a client and a server. WebSockets are different than HTTP in that the connections are long-lived, as the channel will remain open until the client or the server is ready to send the message, whereas in HTTP, once the response occurs (which typically happens immediately), the transaction completes. \n\n\nA WebSocket can leverage the existing HTTP protocol over ports 80 and 443, but it is not limited to HTTP. WebSockets can make cross-origin requests that are not restricted by browser-based protection mechanisms such as the Same Origin Policy (SOP) or Cross-Origin Resource Sharing (CORS). Without explicit origin validation, this makes CSRF attacks more powerful.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "346",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Web Server",
          "Prevalence": "Undetermined"
        }
      ],
      "AlternateTerms": [
        {
          "Term": "Cross-Site WebSocket hijacking (CSWSH)",
          "Description": "this term is used for attacks that exploit this weakness"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability",
            "Non-Repudiation",
            "Access Control"
          ],
          "Impact": [
            "Varies by Context",
            "Gain Privileges or Assume Identity",
            "Bypass Protection Mechanism",
            "Read Application Data",
            "Modify Application Data",
            "DoS: Crash, Exit, or Restart"
          ],
          "Note": "The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of the CSRF is limited only by the victim's privileges."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use a randomized CSRF token to verify requests."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation"
          ],
          "Description": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.",
          "Effectiveness": "Defense in Depth"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.",
          "Effectiveness": "Defense in Depth"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-25095",
          "Description": "web console for SIEM product does not check Origin header, allowing Cross Site WebSocket Hijacking (CSWH)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-25095"
        },
        {
          "Reference": "CVE-2018-6651",
          "Description": "Chain: gaming client attempts to validate the Origin header, but only uses a substring, allowing Cross-Site WebSocket hijacking by forcing requests from an origin whose hostname is a substring of the valid origin.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-6651"
        },
        {
          "Reference": "CVE-2018-14730",
          "Description": "WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1:3123/ connection.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-14730"
        },
        {
          "Reference": "CVE-2018-14731",
          "Description": "WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1/ connection to a randomized port number.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-14731"
        },
        {
          "Reference": "CVE-2018-14732",
          "Description": "WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1:8080/ connection.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-14732"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1257",
          "Authors": [
            "Christian Schneider"
          ],
          "Title": "Cross-Site WebSocket Hijacking (CSWSH)",
          "PublicationYear": "2013",
          "PublicationMonth": "09",
          "PublicationDay": "01",
          "URL": "https://christian-schneider.net/CrossSiteWebSocketHijacking.html"
        },
        {
          "ExternalReferenceID": "REF-1251",
          "Authors": [
            "Drew Branch"
          ],
          "Title": "WebSockets not Bound by SOP and CORS? Does this mean...",
          "PublicationYear": "2018",
          "PublicationMonth": "06",
          "PublicationDay": "06",
          "URL": "https://blog.securityevaluators.com/websockets-not-bound-by-cors-does-this-mean-2e7819374acc"
        },
        {
          "ExternalReferenceID": "REF-1252",
          "Authors": [
            "Mehul Mohan"
          ],
          "Title": "How to secure your WebSocket connections",
          "PublicationYear": "2018",
          "PublicationMonth": "11",
          "PublicationDay": "12",
          "URL": "https://www.freecodecamp.org/news/how-to-secure-your-websocket-connections-d0be0996c556/"
        },
        {
          "ExternalReferenceID": "REF-1256",
          "Authors": [
            "Vickie Li"
          ],
          "Title": "Cross-Site WebSocket Hijacking (CSWSH)",
          "PublicationYear": "2019",
          "PublicationMonth": "11",
          "PublicationDay": "27",
          "URL": "https://medium.com/swlh/hacking-websocket-25d3cba6a4b9"
        },
        {
          "ExternalReferenceID": "REF-1253",
          "Section": "Using cross-site WebSockets to exploit vulnerabilities",
          "Authors": [
            "PortSwigger"
          ],
          "Title": "Testing for WebSockets security vulnerabilities",
          "URL": "https://portswigger.net/web-security/websockets",
          "URLDate": "2023-04-07"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1386",
      "Name": "Insecure Operation on Windows Junction / Mount Point",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.",
      "ExtendedDescription": "\n\nDepending on the intended action being performed, this could allow an attacker to cause the product to read, write, delete, or otherwise operate on unauthorized files.\n\n\nIn Windows, NTFS5 allows for file system objects called reparse points. Applications can create a hard link from one directory to another directory, called a junction point. They can also create a mapping from a directory to a drive letter, called a mount point. If a file is used by a privileged program, but it can be replaced with a hard link to a sensitive file (e.g., AUTOEXEC.BAT), an attacker could excalate privileges. When the process opens the file, the attacker can assume the privileges of that process, tricking the privileged process to read, modify, or delete the sensitive file, preventing the program from accurately processing data. Note that one can also point to registries and semaphores.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "59",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Windows",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "The developer might not consider that when a program in Windows operates with different permissions than the executing user, the use of links, mount points, and junctions might cause the program to access files or directories that are outside of the intended storage location."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Files or Directories"
          ],
          "Note": "Read arbitrary files by replacing a user-controlled folder with a mount point and additional hard links."
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Modify Files or Directories"
          ],
          "Note": "Modify an arbitrary file by replacing the rollback files in installer directories, as they can have the installer execute those rollbacks."
        },
        {
          "Scope": [
            "Availability"
          ],
          "Impact": [
            "Modify Files or Directories"
          ],
          "Note": "Even if there is no control of contents, an arbitrary file delete or overwrite (when running as SYSTEM or admin) can be used for a permanent system denial-of-service, e.g. by deleting a startup configuration file that prevents the service from starting."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Strategy": "Separation of Privilege",
          "Description": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced."
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-26426",
          "Description": "Privileged service allows attackers to delete unauthorized files using a directory junction, leading to arbitrary code execution as SYSTEM.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-26426"
        },
        {
          "Reference": "CVE-2020-0863",
          "Description": "By creating a mount point and hard links, an attacker can abuse a service to allow users arbitrary file read permissions.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-0863"
        },
        {
          "Reference": "CVE-2019-1161",
          "Description": "Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1161"
        },
        {
          "Reference": "CVE-2014-0568",
          "Description": "Escape from sandbox for document reader by using a mountpoint [REF-1264]",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0568"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1262",
          "Authors": [
            "Eran Shimony"
          ],
          "Title": "Follow the Link: Exploiting Symbolic Links with Ease",
          "PublicationYear": "2019",
          "PublicationMonth": "10",
          "PublicationDay": "03",
          "URL": "https://www.cyberark.com/resources/threat-research-blog/follow-the-link-exploiting-symbolic-links-with-ease"
        },
        {
          "ExternalReferenceID": "REF-1264",
          "Authors": [
            "James Forshaw"
          ],
          "Title": "Windows 10^H^H Symbolic Link Mitigations",
          "PublicationYear": "2015",
          "PublicationMonth": "08",
          "PublicationDay": "25",
          "URL": "https://googleprojectzero.blogspot.com/2015/08/windows-10hh-symbolic-link-mitigations.html"
        },
        {
          "ExternalReferenceID": "REF-1265",
          "Title": "Symbolic testing tools",
          "URL": "https://github.com/googleprojectzero/symboliclink-testing-tools"
        },
        {
          "ExternalReferenceID": "REF-1266",
          "Authors": [
            "Shubham Dubey"
          ],
          "Title": "Understanding and Exploiting Symbolic links in Windows - Symlink Attack EOP",
          "PublicationYear": "2020",
          "PublicationMonth": "04",
          "PublicationDay": "16",
          "URL": "https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/"
        },
        {
          "ExternalReferenceID": "REF-1267",
          "Authors": [
            "Simon Zuckerbraun"
          ],
          "Title": "Abusing Arbitrary File Deletes to Escalate Privilege and Other Great Tricks",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "17",
          "URL": "https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks"
        },
        {
          "ExternalReferenceID": "REF-1271",
          "Authors": [
            "Cl\u00e9ment Lavoillotte"
          ],
          "Title": "Abusing privileged file operations",
          "PublicationYear": "2019",
          "PublicationMonth": "03",
          "PublicationDay": "20",
          "URL": "https://troopers.de/troopers19/agenda/7af9hw/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      },
      "Notes": [
        {
          "Type": "Terminology",
          "Note": "Symbolic links, hard links, junctions, and mount points can be confusing terminology, as there are differences in how they operate between UNIX-based systems and Windows, and there are interactions between them."
        },
        {
          "Type": "Maintenance",
          "Note": "This entry is still under development and will continue to see updates and content improvements."
        }
      ]
    },
    {
      "ID": "1389",
      "Name": "Incorrect Parsing of Numbers with Different Radices",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",
      "ExtendedDescription": "\n\nFrequently, a numeric input that begins with \"0\" is treated as octal, or \"0x\" causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, \"023\" (octal) is 35 decimal, or \"0x31\" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a \"0127.0.0.1\" IP address is parsed as octal due to the leading \"0\", whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1.\n\n\nThe consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "704",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation",
          "Note": "Input validation used may assume decimal bases during conditional checks, when it may not always be the case."
        },
        {
          "Phase": "Implementation",
          "Note": "The application may rely on a service that supports different numerical bases."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Application Data"
          ],
          "Likelihood": [
            "Unknown"
          ],
          "Note": "An attacker may use an unexpected numerical base to access private application resources."
        },
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Bypass Protection Mechanism",
            "Alter Execution Logic"
          ],
          "Likelihood": [
            "Unknown"
          ],
          "Note": "An attacker may use an unexpected numerical base to bypass or manipulate access control mechanisms."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Enforcement by Conversion",
          "Description": "If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Strategy": "Input Validation",
          "Description": "If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched."
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "The below demonstrative example uses an IP validator that splits up an IP address by octet, tests to ensure each octet can be casted into an integer, and then returns the original IP address if no exceptions are raised. This validated IP address is then tested using the \"ping\" command."
            },
            {
              "Nature": "Bad",
              "Language": "Python",
              "ExampleCode": "```\n\t import subprocess\n\t def validate_ip(ip: str):\n\t\t split_ip = ip.split('.')\n\t\t if len(split_ip) > 4 or len(split_ip) == 0:\n\t\t\t raise ValueError(\"Invalid IP length\")\n\t\t for octet in split_ip:\n\t\t\t try:\n\t\t\t\t int(octet, 10)\n\t\t\t except ValueError as e:\n\t\t\t\t raise ValueError(f\"Cannot convert IP octet to int - {e}\")\n```\n# Returns original IP after ensuring no exceptions are raised* \n\t\t return ip\n\t\t\n\t def run_ping(ip: str):\n\t\n\t```\n\t\t validated = validate_ip(ip)\n```\n# The ping command treats zero-prepended IP addresses as octal* \n\t\t result = subprocess.call([\"ping\", validated])\n\t\t print(result)"
            },
            {
              "BodyText": "If run_ping() were to be called with one or more zero-prepended octets, validate_ip() will succeed as zero-prepended numerical strings can be interpreted as decimal by a cast (\"012\" would cast to 12). However, as the original IP with the prepended zeroes is returned rather than the casted IP, it will be used in the call to the ping command. Ping DOES check and support octal-based IP octets, so the IP reached via ping may be different than the IP assumed by the validator. For example, ping would considered \"0127.0.0.1\" the same as \"87.0.0.1\"."
            }
          ]
        },
        {
          "ID": "DX-154",
          "Entries": [
            {
              "IntroText": "This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command."
            },
            {
              "Nature": "Bad",
              "Language": "Python",
              "ExampleCode": "```\n\t import subprocess\n\t import re\n\t def validate_ip_regex(ip: str):\n\t\t ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")\n\t\t if ip_validator.match(ip):\n\t\t\t return ip\n\t\t else:\n\t\t\t raise ValueError(\"IP address does not match valid pattern.\")\n\t def run_ping_regex(ip: str):\n\t\t validated = validate_ip_regex(ip)\n```\n# The ping command treats zero-prepended IP addresses as octal* \n\t\t result = subprocess.call([\"ping\", validated])\n\t\t print(result)"
            },
            {
              "BodyText": "Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Consider the following scenario, inspired by CWE team member Kelly Todd.\n\n\nKelly wants to set up monitoring systems for his two cats, who pose very different threats. One cat, Night, tweets embarrassing or critical comments about his owner in ways that could cause reputational damage, so Night's blog needs to be monitored regularly. The other cat, Taki, likes to distract Kelly and his coworkers during business meetings with cute meows, so Kelly monitors Taki's location using a different web site.\n\n\nSuppose /etc/hosts provides the site info as follows:"
            },
            {
              "Nature": "Bad",
              "Language": "Other",
              "ExampleCode": "```\n\t taki.example.com 10.1.0.7\n\t night.example.com 010.1.0.8 \n```"
            },
            {
              "BodyText": "The entry for night.example.com has a typo \"010\" in the first octet. When using ping to ensure the servers are up, the leading 0 causes the IP address to be converted using octal. So when Kelly's script attempts to access night.example.com, it inadvertently scans 8.1.0.8 instead of 10.1.0.8 (since \"010\" in octal is 8 in decimal), and Night is free to send new Tweets without being immediately detected."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2021-29662",
          "Description": "Chain: Use of zero-prepended IP addresses in Perl-based IP validation module can lead to an access control bypass.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29662"
        },
        {
          "Reference": "CVE-2021-28918",
          "Description": "Chain: Use of zero-prepended IP addresses in a product that manages IP blocks can lead to an SSRF.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-28918"
        },
        {
          "Reference": "CVE-2021-29921",
          "Description": "Chain: Use of zero-prepended IP addresses in a Python standard library package can lead to an SSRF.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29921"
        },
        {
          "Reference": "CVE-2021-29923",
          "Description": "Chain: Use of zero-prepended IP addresses in the net Golang library can lead to an access control bypass.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29923"
        },
        {
          "Reference": "CVE-2021-29424",
          "Description": "Chain: Use of zero-prepended IP addresses in Perl netmask module allows bypass of IP-based access control.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29424"
        },
        {
          "Reference": "CVE-2016-4029",
          "Description": "Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2016-4029"
        },
        {
          "Reference": "CVE-2020-13776",
          "Description": "Mishandling of hex-valued usernames leads to unexpected decimal conversion and privilege escalation in the systemd Linux suite.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-13776"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1284",
          "Authors": [
            "Sick Codes"
          ],
          "Title": "Universal \"netmask\" npm package, used by 270,000+ projects, vulnerable to octal input data",
          "PublicationYear": "2021",
          "PublicationMonth": "03",
          "PublicationDay": "28",
          "URL": "https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1390",
      "Name": "Weak Authentication",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",
      "ExtendedDescription": "\n\nAttackers may be able to bypass weak authentication faster and/or with less effort than expected.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "287",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Implementation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity",
            "Confidentiality",
            "Availability",
            "Access Control"
          ],
          "Impact": [
            "Read Application Data",
            "Gain Privileges or Assume Identity",
            "Execute Unauthorized Code or Commands"
          ],
          "Note": "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-153",
          "Entries": [
            {
              "IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."
            },
            {
              "BodyText": "Multiple OT products used weak authentication."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-30034",
          "Description": "Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30034"
        },
        {
          "Reference": "CVE-2022-35248",
          "Description": "Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-35248"
        },
        {
          "Reference": "CVE-2021-3116",
          "Description": "Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3116"
        },
        {
          "Reference": "CVE-2022-29965",
          "Description": "Distributed Control System (DCS) uses a deterministic algorithm to generate utility passwords",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29965"
        },
        {
          "Reference": "CVE-2022-29959",
          "Description": "Initialization file contains credentials that can be decoded using a \"simple string transformation\"",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29959"
        },
        {
          "Reference": "CVE-2020-8994",
          "Description": "UART interface for AI speaker uses empty password for root shell",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8994"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1283",
          "Authors": [
            "Forescout Vedere Labs"
          ],
          "Title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
          "PublicationYear": "2022",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://www.forescout.com/resources/ot-icefall-report/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1391",
      "Name": "Use of Weak Credentials",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.",
      "ExtendedDescription": "\n\nBy design, authentication protocols try to ensure that attackers must perform brute force attacks if they do not know the credentials such as a key or password. However, when these credentials are easily predictable or even fixed (as with default or hard-coded passwords and keys), then the attacker can defeat the mechanism without relying on brute force.\n\n\nCredentials may be weak for different reasons, such as:\n\n\n  - Hard-coded (i.e., static and unchangeable by the administrator)\n\n  - Default (i.e., the same static value across different deployments/installations, but able to be changed by the administrator)\n\n  - Predictable (i.e., generated in a way that produces unique credentials across deployments/installations, but can still be guessed with reasonable efficiency)\n\nEven if a new, unique credential is intended to be generated for each product installation, if the generation is predictable, then that may also simplify guessing attacks.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1390",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Requirements"
        },
        {
          "Phase": "Architecture and Design"
        },
        {
          "Phase": "Installation"
        },
        {
          "Phase": "Operation"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-153",
          "Entries": [
            {
              "IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."
            },
            {
              "BodyText": "Multiple OT products used weak credentials."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "[REF-1374]",
          "Description": "Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)",
          "Link": "https://www.unciphered.com/blog/randstorm-you-cant-patch-a-house-of-cards"
        },
        {
          "Reference": "CVE-2022-30270",
          "Description": "Remote Terminal Unit (RTU) uses default credentials for some SSH accounts",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30270"
        },
        {
          "Reference": "CVE-2022-29965",
          "Description": "Distributed Control System (DCS) uses a deterministic algorithm to generate utility passwords",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29965"
        },
        {
          "Reference": "CVE-2022-30271",
          "Description": "Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30271"
        },
        {
          "Reference": "CVE-2021-38759",
          "Description": "microcontroller board has default password, allowing admin access",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-38759"
        },
        {
          "Reference": "CVE-2021-41192",
          "Description": "data visualization/sharing package uses default secret keys or cookie values if they are not specified in environment variables",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-41192"
        },
        {
          "Reference": "CVE-2020-8994",
          "Description": "UART interface for AI speaker uses empty password for root shell",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8994"
        },
        {
          "Reference": "CVE-2020-27020",
          "Description": "password manager does not generate cryptographically strong passwords, allowing prediction of passwords using guessable details such as time of generation",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27020"
        },
        {
          "Reference": "CVE-2020-8632",
          "Description": "password generator for cloud application has small length value, making it easier for brute-force guessing",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8632"
        },
        {
          "Reference": "CVE-2020-5365",
          "Description": "network-attached storage (NAS) system has predictable default passwords for a diagnostics/support account",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5365"
        },
        {
          "Reference": "CVE-2020-5248",
          "Description": "IT asset management app has a default encryption key that is the same across installations",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5248"
        },
        {
          "Reference": "CVE-2012-3503",
          "Description": "Installation script has a hard-coded secret token value, allowing attackers to bypass authentication",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3503"
        },
        {
          "Reference": "CVE-2010-2306",
          "Description": "Intrusion Detection System (IDS) uses the same static, private SSL keys for multiple devices and installations, allowing decryption of SSL traffic",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2306"
        },
        {
          "Reference": "CVE-2001-0618",
          "Description": "Residential gateway uses the last 5 digits of the 'Network Name' or SSID as the default WEP key, which allows attackers to get the key by sniffing the SSID, which is sent in the clear",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0618"
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 2-4",
          "EntryName": "Req SP.09.02 RE(1)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SR-3 b)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SI-2 b)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SI-2 d)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SG-3 d)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SG-6 b)"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.1"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.2"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.5"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.7"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.8"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.9"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 1.14"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 2.1"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 4.3"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 7.5"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1303",
          "Authors": [
            "Kelly Jackson Higgins"
          ],
          "Title": "Researchers Out Default Passwords Packaged With ICS/SCADA Wares",
          "PublicationYear": "2016",
          "PublicationMonth": "01",
          "PublicationDay": "04",
          "URL": "https://www.darkreading.com/endpoint/researchers-out-default-passwords-packaged-with-ics-scada-wares",
          "URLDate": "2022-10-11"
        },
        {
          "ExternalReferenceID": "REF-1304",
          "Authors": [
            "ICS-CERT"
          ],
          "Title": "ICS Alert (ICS-ALERT-13-164-01): Medical Devices Hard-Coded Passwords",
          "PublicationYear": "2013",
          "PublicationMonth": "06",
          "PublicationDay": "13",
          "URL": "https://www.cisa.gov/news-events/ics-alerts/ics-alert-13-164-01",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1283",
          "Authors": [
            "Forescout Vedere Labs"
          ],
          "Title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
          "PublicationYear": "2022",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://www.forescout.com/resources/ot-icefall-report/"
        },
        {
          "ExternalReferenceID": "REF-1374",
          "Authors": [
            "Unciphered"
          ],
          "Title": "Randstorm: You Can't Patch a House of Cards",
          "PublicationYear": "2023",
          "PublicationMonth": "11",
          "PublicationDay": "14",
          "URL": "https://www.unciphered.com/blog/randstorm-you-cant-patch-a-house-of-cards",
          "URLDate": "2023-11-15"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1392",
      "Name": "Use of Default Credentials",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.",
      "ExtendedDescription": "It is common practice for products to be designed to use default keys, passwords, or other mechanisms for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1391",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Authentication"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Force the administrator to change the credential upon installation.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Installation",
            "Operation"
          ],
          "Description": "The product administrator could change the defaults upon installation or during operation.",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-153",
          "Entries": [
            {
              "IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."
            },
            {
              "BodyText": "At least one OT product used default credentials."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-30270",
          "Description": "Remote Terminal Unit (RTU) uses default credentials for some SSH accounts",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30270"
        },
        {
          "Reference": "CVE-2021-41192",
          "Description": "data visualization/sharing package uses default secret keys or cookie values if they are not specified in environment variables",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-41192"
        },
        {
          "Reference": "CVE-2021-38759",
          "Description": "microcontroller board has default password",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-38759"
        },
        {
          "Reference": "CVE-2010-2306",
          "Description": "Intrusion Detection System (IDS) uses the same static, private SSL keys for multiple devices and installations, allowing decryption of SSL traffic",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2306"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1283",
          "Authors": [
            "Forescout Vedere Labs"
          ],
          "Title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
          "PublicationYear": "2022",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://www.forescout.com/resources/ot-icefall-report/"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1393",
      "Name": "Use of Default Password",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses default passwords for potentially critical functionality.",
      "ExtendedDescription": "It is common practice for products to be designed to use default passwords for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, then it makes it easier for attackers to quickly bypass authentication across multiple organizations. There are many lists of default passwords and default-password scanning tools that are easily available from the World Wide Web.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1392",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "ICS/OT",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Authentication"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Documentation"
          ],
          "Description": "Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.",
          "Effectiveness": "Limited"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Force the administrator to change the credential upon installation.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Installation",
            "Operation"
          ],
          "Description": "The product administrator could change the defaults upon installation or during operation.",
          "Effectiveness": "Moderate"
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-153",
          "Entries": [
            {
              "IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."
            },
            {
              "BodyText": "Multiple OT products used default credentials."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2022-30270",
          "Description": "Remote Terminal Unit (RTU) uses default credentials for some SSH accounts",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30270"
        },
        {
          "Reference": "CVE-2022-2336",
          "Description": "OPC Unified Architecture (OPC UA) industrial automation product has a default password",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2336"
        },
        {
          "Reference": "CVE-2021-38759",
          "Description": "microcontroller board has default password",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-38759"
        },
        {
          "Reference": "CVE-2021-44480",
          "Description": "children's smart watch has default passwords allowing attackers to send SMS commands and listen to the device's surroundings",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-44480"
        },
        {
          "Reference": "CVE-2020-11624",
          "Description": "surveillance camera has default password for the admin account",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11624"
        },
        {
          "Reference": "CVE-2018-15719",
          "Description": "medical dental records product installs a MySQL database with a blank default password",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-15719"
        },
        {
          "Reference": "CVE-2014-9736",
          "Description": "healthcare system for archiving patient images has default passwords for key management and storage databases",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2014-9736"
        },
        {
          "Reference": "CVE-2000-1209",
          "Description": "database product installs admin account with default null password, allowing privileges, as exploited by various worms",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1209"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1283",
          "Authors": [
            "Forescout Vedere Labs"
          ],
          "Title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
          "PublicationYear": "2022",
          "PublicationMonth": "06",
          "PublicationDay": "20",
          "URL": "https://www.forescout.com/resources/ot-icefall-report/"
        },
        {
          "ExternalReferenceID": "REF-1303",
          "Authors": [
            "Kelly Jackson Higgins"
          ],
          "Title": "Researchers Out Default Passwords Packaged With ICS/SCADA Wares",
          "PublicationYear": "2016",
          "PublicationMonth": "01",
          "PublicationDay": "04",
          "URL": "https://www.darkreading.com/endpoint/researchers-out-default-passwords-packaged-with-ics-scada-wares",
          "URLDate": "2022-10-11"
        },
        {
          "ExternalReferenceID": "REF-1446",
          "Authors": [
            "Cybersecurity and Infrastructure Security Agency"
          ],
          "Title": "Secure by Design Alert: How Manufacturers Can Protect Customers by Eliminating Default Passwords",
          "PublicationYear": "2023",
          "PublicationMonth": "12",
          "PublicationDay": "15",
          "URL": "https://www.cisa.gov/resources-tools/resources/secure-design-alert-how-manufacturers-can-protect-customers-eliminating-default-passwords",
          "URLDate": "2024-07-14"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1394",
      "Name": "Use of Default Cryptographic Key",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product uses a default cryptographic key for potentially critical functionality.",
      "ExtendedDescription": "It is common practice for products to be designed to use default keys. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1392",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Authentication"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity"
          ]
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Force the administrator to change the credential upon installation.",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Installation",
            "Operation"
          ],
          "Description": "The product administrator could change the defaults upon installation or during operation.",
          "Effectiveness": "Moderate"
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2018-3825",
          "Description": "cloud cluster management product has a default master encryption key",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-3825"
        },
        {
          "Reference": "CVE-2016-1561",
          "Description": "backup storage product has a default SSH public key in the authorized_keys file, allowing root access",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2016-1561"
        },
        {
          "Reference": "CVE-2010-2306",
          "Description": "Intrusion Detection System (IDS) uses the same static, private SSL keys for multiple devices and installations, allowing decryption of SSL traffic",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2306"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1395",
      "Name": "Dependency on Vulnerable Third-Party Component",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product has a dependency on a third-party component that contains one or more known vulnerabilities.",
      "ExtendedDescription": "\n\nMany products are large enough or complex enough that part of their functionality uses libraries, modules, or other intellectual property developed by third parties who are not the product creator. For example, even an entire operating system might be from a third-party supplier in some hardware products. Whether open or closed source, these components may contain publicly known vulnerabilities that could be exploited by adversaries to compromise the product.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "657",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "The product architect or designer might choose a component that is already known to contain vulnerabilities or has a high likelihood of containing vulnerabilities in the future."
        },
        {
          "Phase": "Implementation",
          "Note": "For reasons of compatibility or stability, developers might choose a third-party component, such as a library, that is already known to contain vulnerabilities."
        },
        {
          "Phase": "Patching and Maintenance",
          "Note": "Since all products contain vulnerabilities, over time, a third-party component will be discovered to have a vulnerability."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality",
            "Integrity",
            "Availability"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "The consequences vary widely, depending on the vulnerabilities that exist in the component; how those vulnerabilities can be \"reached\" by adversaries, as the exploitation paths and attack surface will vary depending on how the component is used; and the criticality of the privilege levels and features for which the product relies on the component."
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Analysis",
          "Description": "For software, use Software Composition Analysis (SCA) tools, which automatically analyze products to identify third-party dependencies. Often, SCA tools can be used to link with known vulnerabilities in the dependencies that they detect. There are commercial and open-source alternatives, such as OWASP Dependency-Check [REF-1312]. Many languages or frameworks have package managers with similar capabilities, such as npm audit for JavaScript, pip-audit for Python, govulncheck for Go, and many others. Dynamic methods can detect loading of third-party components.",
          "Effectiveness": "High",
          "EffectivenessNotes": "Software Composition Analysis (SCA) tools face a number of technical challenges that can lead to false positives and false negatives. Dynamic methods have other technical challenges."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Requirements",
            "Policy"
          ],
          "Description": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed."
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "Require a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311]."
        },
        {
          "Phase": [
            "Architecture and Design",
            "Implementation",
            "Integration",
            "Manufacturing"
          ],
          "Description": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\""
        },
        {
          "Phase": [
            "Operation",
            "Patching and Maintenance"
          ],
          "Description": "Actively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch."
        },
        {
          "Phase": [
            "Operation",
            "Patching and Maintenance"
          ],
          "Description": "Continuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-169",
          "Entries": [
            {
              "IntroText": "The \"SweynTooth\" vulnerabilities in Bluetooth Low Energy (BLE) software development kits (SDK) were found to affect multiple Bluetooth System-on-Chip (SoC) manufacturers. These SoCs were used by many products such as medical devices, Smart Home devices, wearables, and other IoT devices. [REF-1314] [REF-1315]"
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "log4j, a Java-based logging framework, is used in a large number of products, with estimates in the range of 3 billion affected devices [REF-1317]. When the \"log4shell\" (CVE-2021-44228) vulnerability was initially announced, it was actively exploited for remote code execution, requiring urgent mitigation in many organizations. However, it was unclear how many products were affected, as Log4j would sometimes be part of a long sequence of transitive dependencies. [REF-1316]"
            }
          ]
        }
      ],
      "TaxonomyMappings": [
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 2.4"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 6.2"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-2",
          "EntryName": "Req CR 7.2"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SM-9"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SM-10"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SR-2"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req DM-1"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req DM-3"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req DM-4"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SVV-1"
        },
        {
          "TaxonomyName": "ISA/IEC 62443",
          "EntryID": "Part 4-1",
          "EntryName": "Req SVV-3"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1313",
          "Authors": [
            "Jeff Williams, Arshan Dabirsiaghi"
          ],
          "Title": "The Unfortunate Reality of Insecure Libraries",
          "PublicationYear": "2014",
          "URL": "https://owasp.org/www-project-dependency-check/",
          "URLDate": "2023-01-25"
        },
        {
          "ExternalReferenceID": "REF-1212",
          "Title": "A06:2021 - Vulnerable and Outdated Components",
          "PublicationYear": "2021",
          "PublicationMonth": "09",
          "PublicationDay": "24",
          "Publisher": "OWASP",
          "URL": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"
        },
        {
          "ExternalReferenceID": "REF-1247",
          "Authors": [
            "NTIA Multistakeholder Process on Software Component Transparency Framing Working Group"
          ],
          "Title": "Framing Software Component Transparency: Establishing a Common Software Bill of Materials (SBOM)",
          "PublicationYear": "2021",
          "PublicationMonth": "10",
          "PublicationDay": "21",
          "URL": "https://www.ntia.gov/files/ntia/publications/ntia_sbom_framing_2nd_edition_20211021.pdf"
        },
        {
          "ExternalReferenceID": "REF-1311",
          "Authors": [
            "Am\u00e9lie Koran, Wendy Nather, Stewart Scott, Sara Ann Brackett"
          ],
          "Title": "The Cases for Using the SBOMs We Build",
          "PublicationYear": "2022",
          "PublicationMonth": "11",
          "URL": "https://www.atlanticcouncil.org/wp-content/uploads/2022/11/AC_SBOM_IB_v2-002.pdf",
          "URLDate": "2023-01-25"
        },
        {
          "ExternalReferenceID": "REF-1312",
          "Authors": [
            "OWASP"
          ],
          "Title": "OWASP Dependency-Check",
          "URL": "https://owasp.org/www-project-dependency-check/",
          "URLDate": "2023-01-25"
        },
        {
          "ExternalReferenceID": "REF-1314",
          "Authors": [
            "ICS-CERT"
          ],
          "Title": "ICS Alert (ICS-ALERT-20-063-01): SweynTooth Vulnerabilities",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "04",
          "URL": "https://www.cisa.gov/news-events/ics-alerts/ics-alert-20-063-01",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1315",
          "Authors": [
            "Matheus E. Garbelini, Sudipta Chattopadhyay, Chundong Wang, Singapore University of Technology and Design"
          ],
          "Title": "Unleashing Mayhem over Bluetooth Low Energy",
          "PublicationYear": "2020",
          "PublicationMonth": "03",
          "PublicationDay": "04",
          "URL": "https://asset-group.github.io/disclosures/sweyntooth/",
          "URLDate": "2023-01-25"
        },
        {
          "ExternalReferenceID": "REF-1316",
          "Authors": [
            "CISA"
          ],
          "Title": "Alert (AA21-356A): Mitigating Log4Shell and Other Log4j-Related Vulnerabilities",
          "PublicationYear": "2021",
          "PublicationMonth": "12",
          "PublicationDay": "22",
          "URL": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa21-356a",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1317",
          "Authors": [
            "SC Media"
          ],
          "Title": "What Log4Shell taught us about application security, and how to respond now",
          "PublicationYear": "2022",
          "PublicationMonth": "07",
          "PublicationDay": "05",
          "URL": "https://www.scmagazine.com/resource/application-security/what-log4shell-taught-us-about-appsec-and-how-to-respond",
          "URLDate": "2023-01-26"
        },
        {
          "ExternalReferenceID": "REF-1320",
          "Authors": [
            "Ali Youssef"
          ],
          "Title": "A Framework for a Medical Device Security Program at a Healthcare Delivery Organization",
          "PublicationYear": "2022",
          "PublicationMonth": "08",
          "PublicationDay": "08",
          "URL": "https://array.aami.org/content/news/framework-medical-device-security-program-healthcare-delivery-organization",
          "URLDate": "2023-04-07"
        },
        {
          "ExternalReferenceID": "REF-1321",
          "Authors": [
            "Cloud Security Alliance"
          ],
          "Title": "Shared Responsibility Model Explained",
          "PublicationYear": "2020",
          "PublicationMonth": "08",
          "PublicationDay": "26",
          "URL": "https://cloudsecurityalliance.org/blog/2020/08/26/shared-responsibility-model-explained/",
          "URLDate": "2023-01-28"
        },
        {
          "ExternalReferenceID": "REF-1322",
          "Section": "Section 6.1: Medical Device Procurement",
          "Authors": [
            "Melissa Chase, Steven Christey Coley, Julie Connolly, Ronnie Daldos, Margie Zuk"
          ],
          "Title": "Medical Device Cybersecurity Regional Incident Preparedness and Response Playbook",
          "PublicationYear": "2022",
          "PublicationMonth": "11",
          "PublicationDay": "14",
          "URL": "https://www.mitre.org/news-insights/publication/medical-device-cybersecurity-regional-incident-preparedness-and-response",
          "URLDate": "2023-01-28"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1419",
      "Name": "Incorrect Initialization of Resource",
      "Abstraction": "Class",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.",
      "ExtendedDescription": "\n\nThis can have security implications when the associated resource is expected to have certain properties or values. Examples include a variable that determines whether a user has been authenticated or not, or a register or fuse value that determines the security state of the product.\n\n\nFor software, this weakness can frequently occur when implicit initialization is used, meaning the resource is not explicitly set to a specific value. For example, in C, memory is not necessarily cleared when it is allocated on the stack, and many scripting languages use a default empty, null value, or zero value when a variable is not explicitly initialized.\n\n\nFor hardware, this weakness frequently appears with reset values and fuses. After a product reset, hardware may initialize registers incorrectly. During different phases of a product lifecycle, fuses may be set to incorrect values. Even if fuses are set to correct values, the lines to the fuse could be broken or there might be hardware on the fuse line that alters the fuse value to be incorrect.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "665",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Implementation"
        },
        {
          "Phase": "Manufacturing"
        },
        {
          "Phase": "Installation"
        },
        {
          "Phase": "System Configuration"
        },
        {
          "Phase": "Operation"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory",
            "Read Application Data",
            "Unexpected State"
          ],
          "Likelihood": [
            "Unknown"
          ]
        },
        {
          "Scope": [
            "Authorization",
            "Integrity"
          ],
          "Impact": [
            "Gain Privileges or Assume Identity"
          ]
        },
        {
          "Scope": [
            "Other"
          ],
          "Impact": [
            "Varies by Context"
          ],
          "Note": "The technical impact can vary widely based on how the resource is used in the product, and whether its contents affect security decisions."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Choose the safest-possible initialization for security-related resources."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Ensure that each resource (whether variable, memory buffer, register, etc.) is fully initialized."
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "Pay close attention to complex conditionals or reset sources that affect initialization, since some paths might not perform the initialization."
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Ensure that the design and architecture clearly identify what the initialization should be, and that the initialization does not have security implications."
        }
      ],
      "DemonstrativeExamples": [
        {
          "ID": "DX-162",
          "Entries": [
            {
              "IntroText": "Consider example design module system verilog code shown below. The register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "// Parameterized Register module example \n // Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// \n module register_example \n #( \n parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits \n parameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) \n ) \n ( \n input [REGISTER_WIDTH-1:0] Data_in, \n input Clk, \n input resetn, \n input write, \n output reg [REGISTER_WIDTH-1:0] Data_out \n ); \n\n reg Secure_mode; \n\n always @(posedge Clk or negedge resetn) \n\n```\n\t if (~resetn) \n\t begin \n\t\t Data_out <= REGISTER_DEFAULT; // Register content set to Default at reset \n\t\t Secure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset \n\t end \n\t else if (write & ~Secure_mode) \n\t begin \n\t\t Data_out <= Data_in; \n\t end \n endmodule \n module register_top \n ( \n input Clk, \n input resetn, \n input write, \n input [31:0] Data_in, \n output reg [31:0] Secure_reg, \n output reg [31:0] Insecure_reg \n ); \n register_example #( \n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0. \n ) Insecure_Device_ID_1 ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n register_example #(\n\t .REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default. \n ) Insecure_Device_ID_2 ( \n\t .Data_in (Data_in), \n\t .Data_out (Insecure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n endmodule \n```"
            },
            {
              "BodyText": "These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters."
            },
            {
              "BodyText": "In the example design, both registers will be software writable since Secure_mode is defined as zero."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "register_example #( \n\n```\n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode \n ) Secure_Device_ID_example ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n );\n```"
            }
          ]
        },
        {
          "ID": "DX-163",
          "Entries": [
            {
              "IntroText": "This code attempts to login a user using credentials from a POST request:"
            },
            {
              "Nature": "Bad",
              "Language": "PHP",
              "ExampleCode": "```\n```\n// $user and $pass automatically set from POST request* \n\tif (login_user($user,$pass)) {\n\t```\n\t\t$authorized = true;\n\t}\n```\n...* \n\t\n\tif ($authorized) {\n\t```\n\t\tgeneratePage();\n\t}\n```"
            },
            {
              "BodyText": "Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials."
            },
            {
              "BodyText": "Here is a fixed version:"
            },
            {
              "Nature": "Good",
              "Language": "PHP",
              "ExampleCode": "```\n\t$user = $_POST['user'];\n\t$pass = $_POST['pass'];\n\t$authorized = false;\n\tif (login_user($user,$pass)) {\n\t\t$authorized = true;\n\t}\n```\n...*"
            },
            {
              "BodyText": "This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP."
            }
          ]
        },
        {
          "ID": "DX-222",
          "Entries": [
            {
              "IntroText": "The following example code is excerpted from the Access Control module, acct_wrapper, in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this module, a set of memory-mapped I/O registers, referred to as acct_mem, each 32-bit wide, is utilized to store access control permissions for peripherals [REF-1437]. Access control registers are typically used to define and enforce permissions and access rights for various system resources."
            },
            {
              "BodyText": "However, in the buggy SoC, these registers are all enabled at reset, i.e., essentially granting unrestricted access to all system resources [REF-1438]. This will introduce security vulnerabilities and risks to the system, such as privilege escalation or exposing sensitive information to unauthorized users or processes."
            },
            {
              "Nature": "Bad",
              "Language": "Verilog",
              "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'hffffffff;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."
            },
            {
              "BodyText": "To fix this issue, the access control registers must be properly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, predictable behavior, and allow proper control of peripherals. The specifics of what values should be set depend on the SoC's design and the requirements of the system. To address the problem depicted in the bad code example [REF-1438], the default value for \"acct_mem\" should be set to 32'h00000000 (see good code example [REF-1439]). This ensures that during startup or after any reset, access to protected data is restricted until the system setup is complete and security procedures properly configure the access control settings."
            },
            {
              "Nature": "Good",
              "Language": "Verilog",
              "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6)) \n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'h00000000;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-27211",
          "Description": "Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27211"
        },
        {
          "Reference": "CVE-2023-25815",
          "Description": "chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2023-25815"
        },
        {
          "Reference": "CVE-2022-43468",
          "Description": "WordPress module sets internal variables based on external inputs, allowing false reporting of the number of views",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-43468"
        },
        {
          "Reference": "CVE-2022-36349",
          "Description": "insecure default variable initialization in BIOS firmware for a hardware board allows DoS",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-36349"
        },
        {
          "Reference": "CVE-2015-7763",
          "Description": "distributed filesystem only initializes part of the variable-length padding for a packet, allowing attackers to read sensitive information from previously-sent packets in the same memory location",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2015-7763"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1437",
          "Title": "acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L39"
        },
        {
          "ExternalReferenceID": "REF-1438",
          "Title": "Bad Code acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L79C1-L86C16"
        },
        {
          "ExternalReferenceID": "REF-1439",
          "Title": "Good Code acct_wrapper.sv",
          "PublicationYear": "2021",
          "URL": "https://github.com/HACK-EVENT/hackatdac21/blob/062de4f25002d2dcbdb0a82af36b80a517592612/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L84"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
        "Comments": "Examine children of this entry to see if there is a better fit",
        "Reasons": [
          "Abstraction"
        ]
      }
    },
    {
      "ID": "1420",
      "Name": "Exposure of Sensitive Information during Transient Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.",
      "ExtendedDescription": "\n\nWhen operations execute but do not commit to the processor's architectural state, this is commonly referred to as transient execution. This behavior can occur when the processor mis-predicts an outcome (such as a branch target), or when a processor event (such as an exception or microcode assist, etc.) is handled after younger operations have already executed. Operations that execute transiently may exhibit observable discrepancies (CWE-203) in covert channels [REF-1400] such as data caches. Observable discrepancies of this kind can be detected and analyzed using timing or power analysis techniques, which may allow an attacker to infer information about the operations that executed transiently. For example, the attacker may be able to infer confidential data that was accessed or used by those operations.\n\n\nTransient execution weaknesses may be exploited using one of two methods. In the first method, the attacker generates a code sequence that exposes data through a covert channel when it is executed transiently (the attacker must also be able to trigger transient execution). Some transient execution weaknesses can only expose data that is accessible within the attacker's processor context. For example, an attacker executing code in a software sandbox may be able to use a transient execution weakness to expose data within the same address space, but outside of the attacker's sandbox. Other transient execution weaknesses can expose data that is architecturally inaccessible, that is, data protected by hardware-enforced boundaries such as page tables or privilege rings. These weaknesses are the subject of CWE-1421.\n\n\nIn the second exploitation method, the attacker first identifies a code sequence in a victim program that, when executed transiently, can expose data that is architecturally accessible within the victim's processor context. For instance, the attacker may search the victim program for code sequences that resemble a bounds-check bypass sequence (see Demonstrative Example 1). If the attacker can trigger a mis-prediction of the conditional branch and influence the index of the out-of-bounds array access, then the attacker may be able to infer the value of out-of-bounds data by monitoring observable discrepancies in a covert channel.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "669",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "This weakness can be introduced when a computing unit (such as a CPU, GPU, accelerator, or any other processor) uses out-of-order execution, speculation, or any other microarchitectural feature that can allow microarchitectural operations to execute without committing to architectural state."
        },
        {
          "Phase": "Implementation",
          "Note": "This weakness can be introduced when sandboxes or managed runtimes are not properly isolated by using hardware-enforced boundaries. Developers of sandbox or managed runtime software should exercise caution when relying on software techniques (such as bounds checking) to prevent code in one sandbox from accessing confidential data in another sandbox. For example, an attacker sandbox may be able to trigger a processor event or mis-prediction in a manner that allows it to transiently read a victim sandbox's private data."
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "\n\nThis weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by exhaustively analyzing a processor's machine clear (or nuke) conditions ([REF-1427]).\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nHardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\n\n\nManual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage.\n"
        },
        {
          "Method": "Fuzzing",
          "Description": "\n\nAcademic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1428]).\n",
          "Effectiveness": "Opportunistic",
          "EffectivenessNotes": "\n\nFuzzing may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage.\n"
        },
        {
          "Method": "Fuzzing",
          "Description": "\n\nAcademic researchers have demonstrated that this weakness can be detected in software using software fuzzing tools ([REF-1429]).\n",
          "Effectiveness": "Opportunistic",
          "EffectivenessNotes": "\n\nAt the time of this writing, publicly available software fuzzing tools can only detect a subset of transient execution weaknesses in software (for example, [REF-1429] can only detect instances of Spectre v1) and may produce false positives.\n"
        },
        {
          "Method": "Automated Static Analysis",
          "Description": "\n\nA variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nAt the time of this writing, publicly available software static analysis tools can only detect a subset of transient execution weaknesses in software and may produce false positives.\n"
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nSoftware vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors:\n\n\n$ cat /proc/cpuinfo | grep bugs | head -n 1\n\n\nbugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed\n",
          "Effectiveness": "High",
          "EffectivenessNotes": "\n\nThis method can be useful for detecting whether a processor is affected by known weaknesses, but it may not be useful for detecting unknown weaknesses.\n"
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique has many pitfalls. For example, InvisiSpec was an early attempt to mitigate this weakness by blocking \"micro-architectural covert and side channels through the multiprocessor data cache hierarchy due to speculative loads\" [REF-1417]. Commodity processors and SoCs have many covert and side channels that exist outside of the data cache hierarchy. Even when some of these channels are blocked, others (such as execution ports [REF-1418]) may allow an attacker to infer confidential data. Mitigation strategies that attempt to prevent transient execution from causing observable discrepancies also have other pitfalls, for example, see [REF-1419].\n"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nInstructions or features that constrain transient execution or suppress its side effects may impact performance.\n"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nDisabling specific predictors or other hardware features may result in significant performance overhead.\n"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\n",
          "Effectiveness": "Defense in Depth",
          "EffectivenessNotes": "\n\nSpecific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIsolate sandboxes or managed runtimes in separate address spaces (separate processes). For examples, see [REF-1421].\n",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nInclude serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the prediction from happening at all).\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nWhen used to comprehensively mitigate a transient execution weakness (for example, by inserting an LFENCE after every instruction in a program), serialization instructions can introduce significant performance overhead. On the other hand, when used to mitigate only a relatively small number of high-risk code sequences, serialization instructions may have a low or negligible impact on performance.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nSome CFI techniques may not be able to constrain transient execution, even though they are effective at constraining architectural execution. Or they may be able to provide some additional protection against a transient execution weakness, but without comprehensively mitigating the weakness. For example, Clang-CFI provides strong architectural CFI properties and can make some transient execution weaknesses more difficult to exploit [REF-1398].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness. One prominent example of this mitigation is retpoline ([REF-1414]).\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique may only be effective for software that is compiled with this mitigation. For some transient execution weaknesses, this technique may not be sufficient to protect software that is compiled without the affected instruction(s). For example, see CWE-1421.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nAddress masking and related software mitigation techniques have been used to harden specific code sequences that could potentially be exploited via transient execution. For example, the Linux kernel makes limited use of manually inserted address masks to mitigate bounds-check bypass [REF-1390]. Compiler-based techniques have also been used to automatically harden software [REF-1425].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\n",
          "Effectiveness": "Incidental",
          "EffectivenessNotes": "\n\nSome transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].\n"
        },
        {
          "Phase": [
            "Documentation"
          ],
          "Description": "\n\nIf a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Secure programs perform bounds checking before accessing an array if the source of the array index is provided by an untrusted source such as user input. In the code below, data from array1 will not be accessed if x is out of bounds. The following code snippet is from [REF-1415]:"
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "```\n\tif (x < array1_size)\n\t\ty = array2[array1[x] * 4096];\n```"
            },
            {
              "BodyText": "However, if this code executes on a processor that performs conditional branch prediction the outcome of the if statement could be mis-predicted and the access on the next line will occur with a value of x that can point to an out-of-bounds location (within the program's memory).\n\n\nEven though the processor does not commit the architectural effects of the mis-predicted branch, the memory accesses alter data cache state, which is not rolled back after the branch is resolved. The cache state can reveal array1[x] thereby providing a mechanism to recover the data value located at address array1 + x."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Some managed runtimes or just-in-time (JIT) compilers may overwrite recently executed code with new code. When the instruction pointer enters the new code, the processor may inadvertently execute the stale code that had been overwritten. This can happen, for instance, when the processor issues a store that overwrites a sequence of code, but the processor fetches and executes the (stale) code before the store updates memory. Similar to the first example, the processor does not commit the stale code's architectural effects, though microarchitectural side effects can persist. Hence, confidential information accessed or used by the stale code may be inferred via an observable discrepancy in a covert channel. This vulnerability is described in more detail in [REF-1427]."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-5753",
          "Description": "Microarchitectural conditional branch predictors may allow operations to execute transiently after a misprediction, potentially exposing data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5753"
        },
        {
          "Reference": "CVE-2021-0089",
          "Description": "A machine clear triggered by self-modifying code may allow incorrect operations to execute transiently, potentially exposing data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-0089"
        },
        {
          "Reference": "CVE-2022-0002",
          "Description": "Microarchitectural indirect branch predictors may allow incorrect operations to execute transiently after a misprediction, potentially exposing data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0002"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1389",
          "Authors": [
            "Alyssa Milburn",
            "Ke Sun",
            "Henrique Kawakami"
          ],
          "Title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "08",
          "URL": "https://arxiv.org/abs/2203.04277",
          "URLDate": "2024-02-22"
        },
        {
          "ExternalReferenceID": "REF-1417",
          "Authors": [
            "Mengjia Yan",
            "Jiho Choi",
            "Dimitrios Skarlatos",
            "Adam Morrison",
            "Christopher W. Fletcher",
            "Josep Torrella"
          ],
          "Title": "InvisiSpec: making speculative execution invisible in the cache hierarchy.",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "http://iacoma.cs.uiuc.edu/iacoma-papers/micro18.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1418",
          "Authors": [
            "Alejandro Cabrera Aldaya",
            "Billy Bob Brumley",
            "Sohaib ul Hassan",
            "Cesar Pereida Garc\u00eda",
            "Nicola Tuveri"
          ],
          "Title": "Port Contention for Fun and Profit",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://eprint.iacr.org/2018/1060.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1419",
          "Authors": [
            "Mohammad Behnia",
            "Prateek Sahu",
            "Riccardo Paccagnella",
            "Jiyong Yu",
            "Zirui Zhao",
            "Xiang Zou",
            "Thomas Unterluggauer",
            "Josep Torrellas",
            "Carlos Rozas",
            "Adam Morrison",
            "Frank Mckeen",
            "Fangfei Liu",
            "Ron Gabor",
            "Christopher W. Fletcher",
            "Abhishek Basak",
            "Alaa Alameldeen"
          ],
          "Title": "Speculative Interference Attacks: Breaking Invisible Speculation Schemes",
          "PublicationYear": "2021",
          "PublicationMonth": "04",
          "URL": "https://arxiv.org/abs/2007.11818",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1420",
          "Authors": [
            "Ross Mcilroy",
            "Jaroslav Sevcik",
            "Tobias Tebbi",
            "Ben L. Titzer",
            "Toon Verwaest"
          ],
          "Title": "Spectre is here to stay: An analysis of side-channels and speculative execution",
          "PublicationYear": "2019",
          "PublicationMonth": "02",
          "PublicationDay": "14",
          "URL": "https://arxiv.org/pdf/1902.05178.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1421",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Managed Runtime Speculative Execution Side Channel Mitigations",
          "PublicationYear": "2018",
          "PublicationMonth": "01",
          "PublicationDay": "03",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/runtime-speculative-side-channel-mitigations.html",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1398",
          "Authors": [
            "The Clang Team"
          ],
          "Title": "Control Flow Integrity",
          "URL": "https://clang.llvm.org/docs/ControlFlowIntegrity.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1414",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Retpoline: A Branch Target Injection Mitigation",
          "PublicationYear": "2022",
          "PublicationMonth": "08",
          "PublicationDay": "22",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/retpoline-branch-target-injection-mitigation.html",
          "URLDate": "2023-02-13"
        },
        {
          "ExternalReferenceID": "REF-1390",
          "Authors": [
            "The kernel development community"
          ],
          "Title": "Speculation",
          "PublicationYear": "2020",
          "PublicationMonth": "08",
          "PublicationDay": "16",
          "URL": "https://docs.kernel.org/6.6/staging/speculation.html",
          "URLDate": "2024-02-04"
        },
        {
          "ExternalReferenceID": "REF-1425",
          "Authors": [
            "Chandler Carruth"
          ],
          "Title": "Speculative Load Hardening",
          "URL": "https://llvm.org/docs/SpeculativeLoadHardening.html",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1427",
          "Authors": [
            "Hany Ragab",
            "Enrico Barberis",
            "Herbert Bos",
            "Cristiano Giuffrida"
          ],
          "Title": "Rage Against the Machine Clear: A Systematic Analysis of Machine Clears and Their Implications for Transient Execution Attacks",
          "PublicationYear": "2021",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/system/files/sec21-ragab.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1428",
          "Authors": [
            "Oleksii Oleksenko",
            "Marco Guarnieri",
            "Boris K\u00f6pf",
            "Mark Silberstein"
          ],
          "Title": "Hide and Seek with Spectres: Efficient discovery of speculative information leaks with random testing",
          "PublicationYear": "2023",
          "PublicationMonth": "01",
          "PublicationDay": "18",
          "URL": "https://arxiv.org/pdf/2301.07642.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1429",
          "Authors": [
            "Oleksii Oleksenko",
            "Bohdan Trach",
            "Mark Silberstein",
            "Christof Fetzer"
          ],
          "Title": "SpecFuzz: Bringing Spectre-type vulnerabilities to the surface",
          "PublicationYear": "2020",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/system/files/sec20-oleksenko.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1415",
          "Authors": [
            "Paul Kocher",
            "Jann Horn",
            "Anders Fogh",
            "Daniel Genkin",
            "Daniel Gruss",
            "Werner Haas",
            "Mike Hamburg",
            "Moritz Lipp",
            "Stefan Mangard",
            "Thomas Prescher",
            "Michael Schwarz",
            "Yuval Yarom"
          ],
          "Title": "Spectre Attacks: Exploiting Speculative Execution",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://spectreattack.com/spectre.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1400",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Refined Speculative Execution Terminology",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "11",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html",
          "URLDate": "2024-02-13"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed-with-Review",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
        "Comments": "\n\nA vulnerability should only map to CWE-1420 if it cannot map to any of CWE-1420's child weaknesses. Follow this diagram:\n\n",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1421",
      "Name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "\n\t\t\tA processor event may allow transient operations to access\n\t\t\tarchitecturally restricted data (for example, in another address\n\t\t\tspace) in a shared microarchitectural structure (for example, a CPU\n\t\t\tcache), potentially exposing the data over a covert channel.\n\t\t  ",
      "ExtendedDescription": "\n\nMany commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components.\n\n\nMany commodity processors also share microarchitectural resources that cache (temporarily store) data, which may be confidential. These resources may be shared across processor contexts, including across SMT threads, privilege rings, or others.\n\n\nWhen transient operations allow access to ISA-protected data in a shared microarchitectural resource, this might violate users' expectations of the ISA feature that is bypassed. For example, if transient operations can access a victim's private data in a shared microarchitectural resource, then the operations' microarchitectural side effects may correspond to the accessed data. If an attacker can trigger these transient operations and observe their side effects through a covert channel [REF-1400], then the attacker may be able to infer the victim's private data. Private data could include sensitive program data, OS/VMM data, page table data (such as memory addresses), system configuration data (see Demonstrative Example 3), or any other data that the attacker does not have the required privileges to access.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "\n\nThis weakness can be introduced during hardware architecture and design if a data path allows architecturally restricted data to propagate to operations that execute before an older mis-prediction or processor event (such as an exception) is caught.\n"
        },
        {
          "Phase": "Implementation",
          "Note": "\n\nThis weakness can be introduced during system software implementation if state-sanitizing operations are not invoked when switching from one context to another, according to the hardware vendor's recommendations for mitigating the weakness.\n"
        },
        {
          "Phase": "System Configuration",
          "Note": "\n\nThis weakness can be introduced if the system has not been configured according to the hardware vendor's recommendations for mitigating the weakness.\n"
        },
        {
          "Phase": "Architecture and Design",
          "Note": "\n\nThis weakness can be introduced when an access control check (for example, checking page permissions) can proceed in parallel with the access operation (for example, a load) that is being checked. If the processor can allow the access operation to execute before the check completes, this race condition may allow subsequent transient operations to expose sensitive information.\n"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "Medium"
          ],
          "Note": "\n\n<<put the information here>>\n"
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "\n\nThis weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods. \n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Manual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nThis weakness can be detected (pre-discovery) in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label data in one context (for example, kernel data) and perform information flow analysis (or a simulation, etc.) to determine whether tainted data can appear in another context (for example, user mode). Alternatively, stale or invalid data in shared microarchitectural resources can be marked as tainted, and the taint analysis framework can identify when transient operations encounter tainted data.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Automated static or dynamic taint analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nSoftware vendors can release tools that detect presence of known weaknesses (post-discovery) on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors:\n\n\n$ cat /proc/cpuinfo | grep bugs | head -n 1\n\n\nbugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed\n",
          "Effectiveness": "High",
          "EffectivenessNotes": "This method can be useful for detecting whether a processor if affected by known weaknesses, but it may not be useful for detecting unknown weaknesses."
        },
        {
          "Method": "Fuzzing",
          "Description": "Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1406], [REF-1430])",
          "Effectiveness": "Opportunistic",
          "EffectivenessNotes": "Fuzzing may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nHardware designers may choose to engineer the processor's pipeline to prevent architecturally restricted data from being used by operations that can execute transiently.\n",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nHardware designers may choose not to share microarchitectural resources that can contain sensitive data, such as fill buffers and store buffers.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nThis can be highly effective at preventing this weakness from being exposed across different SMT threads or different processor cores. It is generally less practical to isolate these resources between different contexts (for example, user and kernel) that may execute on the same SMT thread or processor core.\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nHardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nSanitizing shared state on context transitions may not be practical for all processors, especially when the amount of shared state affected by the weakness is relatively large. Additionally, this technique may not be practical unless there is a synchronous transition between two processor contexts that would allow the affected resource to be sanitized. For example, this technique alone may not suffice to mitigate asynchronous access to a resource that is shared by two SMT threads.\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique has many pitfalls. For example, InvisiSpec was an early attempt to mitigate this weakness by blocking \"micro-architectural covert and side channels through the multiprocessor data cache hierarchy due to speculative loads\" [REF-1417]. Commodity processors and SoCs have many covert and side channels that exist outside of the data cache hierarchy. Even when some of these channels are blocked, others (such as execution ports [REF-1418]) may allow an attacker to infer confidential data. Mitigation strategies that attempt to prevent transient execution from causing observable discrepancies also have other pitfalls, for example, see [REF-1419].\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nSoftware architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nIsolating different contexts across a process boundary (or another kind of architectural boundary) may only be effective for some weaknesses.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique may only be fully effective if it is applied to all software that runs on the system. Also, relatively few observed examples of this weakness have exposed data through only a single instruction.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\n",
          "Effectiveness": "Incidental",
          "EffectivenessNotes": "\n\nSome transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].\n"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nSystem software can mitigate this weakness by invoking state-sanitizing operations when switching from one context to another, according to the hardware vendor's recommendations.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique may not be able to mitigate weaknesses that arise from resource sharing across SMT threads.\n"
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "\n\nSome systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nDisabling resource sharing (for example, by disabling SMT) may result in significant performance overhead.\n"
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "\n\nSome systems may allow the user to disable (for example, in the BIOS) microarchitectural features that allow transient access to architecturally restricted data.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nDisabling microarchitectural features such as predictors may result in significant performance overhead.\n"
        },
        {
          "Phase": [
            "Patching and Maintenance"
          ],
          "Description": "\n\nThe hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nThis technique may not be able to mitigate weaknesses that arise from resource sharing across SMT threads.\n"
        },
        {
          "Phase": [
            "Patching and Maintenance"
          ],
          "Description": "\n\nThis kind of patch may not be feasible or implementable for all processors or all weaknesses.\n",
          "Effectiveness": "Limited"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\n",
          "Effectiveness": "Defense in Depth",
          "EffectivenessNotes": "\n\nSpecific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420].\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Some processors may perform access control checks in parallel with memory read/write operations. For example, when a user-mode program attempts to read data from memory, the processor may also need to check whether the memory address is mapped into user space or kernel space. If the processor performs the access concurrently with the check, then the access may be able to transiently read kernel data before the check completes. This race condition is demonstrated in the following code snippet from [REF-1408], with additional annotations:"
            },
            {
              "Nature": "Bad",
              "Language": "x86 Assembly",
              "ExampleCode": "1 ; rcx = kernel address, rbx = probe array\n 2 xor rax, rax # set rax to 0\n 3 retry:\n 4 mov al, byte [rcx] # attempt to read kernel memory\n 5 shl rax, 0xc # multiply result by page size (4KB)\n 6 jz retry # if the result is zero, try again\n 7 mov rbx, qword [rbx + rax] # transmit result over a cache covert channel"
            },
            {
              "BodyText": "Vulnerable processors may return kernel data from a shared microarchitectural resource in line 4, for example, from the processor's L1 data cache. Since this vulnerability involves a race condition, the mov in line 4 may not always return kernel data (that is, whenever the check \"wins\" the race), in which case this demonstration code re-attempts the access in line 6. The accessed data is multiplied by 4KB, a common page size, to make it easier to observe via a cache covert channel after the transmission in line 7. The use of cache covert channels to observe the side effects of transient execution has been described in [REF-1408]."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Many commodity processors share microarchitectural fill buffers between sibling hardware threads on simultaneous multithreaded (SMT) processors. Fill buffers can serve as temporary storage for data that passes to and from the processor's caches. Microarchitectural Fill Buffer Data Sampling (MFBDS) is a vulnerability that can allow a hardware thread to access its sibling's private data in a shared fill buffer. The access may be prohibited by the processor's ISA, but MFBDS can allow the access to occur during transient execution, in particular during a faulting operation or an operation that triggers a microcode assist.\n\n\nMore information on MFBDS can be found in [REF-1405] and [REF-1409]."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Some processors may allow access to system registers (for example, system coprocessor registers or model-specific registers) during transient execution. This scenario is depicted in the code snippet below. Under ordinary operating circumstances, code in exception level 0 (EL0) is not permitted to access registers that are restricted to EL1, such as TTBR0_EL1. However, on some processors an earlier mis-prediction can cause the MRS instruction to transiently read the value in an EL1 register. In this example, a conditional branch (line 2) can be mis-predicted as \"not taken\" while waiting for a slow load (line 1). This allows MRS (line 3) to transiently read the value in the TTBR0_EL1 register. The subsequent memory access (line 6) can allow the restricted register's value to become observable, for example, over a cache covert channel.\n\n\nCode snippet is from [REF-1410]. See also [REF-1411]."
            },
            {
              "Nature": "Bad",
              "Language": "x86 Assembly",
              "ExampleCode": "1 LDR X1, [X2] ; arranged to miss in the cache\n 2 CBZ X1, over ; This will be taken \n 3 MRS X3, TTBR0_EL1; \n 4 LSL X3, X3, #imm \n 5 AND X3, X3, #0xFC0\n 6 LDR X5, [X6,X3] ; X6 is an EL0 base address\n 7 over"
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-5715",
          "Description": "A fault may allow transient user-mode operations to access kernel data cached in the L1D, potentially exposing the data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5715"
        },
        {
          "Reference": "CVE-2018-3615",
          "Description": "A fault may allow transient non-enclave operations to access SGX enclave data cached in the L1D, potentially exposing the data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2018-3615"
        },
        {
          "Reference": "CVE-2019-1135",
          "Description": "A TSX Asynchronous Abort may allow transient operations to access architecturally restricted data, potentially exposing the data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1135"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1404",
          "Authors": [
            "The kernel development community"
          ],
          "Title": "Page Table Isolation (PTI)",
          "PublicationYear": "2023",
          "PublicationMonth": "01",
          "PublicationDay": "30",
          "URL": "https://kernel.org/doc/html/next/x86/pti.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1405",
          "Authors": [
            "Stephan van Schaik",
            "Alyssa Milburn",
            "Sebastian \u00d6sterlund",
            "Pietro Frigo",
            "Giorgi Maisuradze",
            "Kaveh Razavi",
            "Herbert Bos",
            "Cristiano Giuffrida"
          ],
          "Title": "RIDL: Rogue In-Flight Data Load",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "PublicationDay": "19",
          "URL": "https://mdsattacks.com/files/ridl.pdf",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1406",
          "Authors": [
            "Daniel Moghimi"
          ],
          "Title": "Downfall: Exploiting Speculative Data Gathering",
          "PublicationYear": "2023",
          "PublicationMonth": "08",
          "PublicationDay": "09",
          "URL": "https://www.usenix.org/system/files/usenixsecurity23-moghimi.pdf",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1401",
          "Authors": [
            "Neta Bar Kama",
            "Roope Kaivola"
          ],
          "Title": "Hardware Security Leak Detection by Symbolic Simulation",
          "PublicationYear": "2021",
          "PublicationMonth": "11",
          "URL": "https://ieeexplore.ieee.org/document/9617727",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1408",
          "Authors": [
            "Moritz Lipp",
            "Michael Schwarz",
            "Daniel Gruss",
            "Thomas Prescher",
            "Werner Haas",
            "Stefan Mangard",
            "Paul Kocher",
            "Daniel Genkin",
            "Yuval Yarom",
            "Mike Hamburg"
          ],
          "Title": "Meltdown: Reading Kernel Memory from User Space",
          "PublicationYear": "2020",
          "PublicationMonth": "05",
          "PublicationDay": "21",
          "URL": "https://meltdownattack.com/meltdown.pdf",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1409",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Microarchitectural Data Sampling",
          "PublicationYear": "2021",
          "PublicationMonth": "03",
          "PublicationDay": "11",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/intel-analysis-microarchitectural-data-sampling.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1410",
          "Authors": [
            "ARM"
          ],
          "Title": "Cache Speculation Side-channels",
          "PublicationYear": "2018",
          "PublicationMonth": "01",
          "URL": "https://armkeil.blob.core.windows.net/developer/Files/pdf/Cache_Speculation_Side-channels.pdf",
          "URLDate": "2024-02-22"
        },
        {
          "ExternalReferenceID": "REF-1411",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Rogue System Register Read/CVE-2018-3640/INTEL-SA-00115",
          "PublicationYear": "2018",
          "PublicationMonth": "05",
          "PublicationDay": "01",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/advisory-guidance/rogue-system-register-read.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1400",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Refined Speculative Execution Terminology",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "11",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1389",
          "Authors": [
            "Alyssa Milburn",
            "Ke Sun",
            "Henrique Kawakami"
          ],
          "Title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "08",
          "URL": "https://arxiv.org/abs/2203.04277",
          "URLDate": "2024-02-22"
        },
        {
          "ExternalReferenceID": "REF-1430",
          "Authors": [
            "Daniel Moghimi",
            "Moritz Lipp",
            "Berk Sunar",
            "Michael Schwarz"
          ],
          "Title": "Medusa: Microarchitectural: Data Leakage via Automated Attack Synthesis",
          "PublicationYear": "2020",
          "PublicationMonth": "08",
          "URL": "https://www.usenix.org/conference/usenixsecurity20/presentation/moghimi-medusa",
          "URLDate": "2024-02-27"
        },
        {
          "ExternalReferenceID": "REF-1417",
          "Authors": [
            "Mengjia Yan",
            "Jiho Choi",
            "Dimitrios Skarlatos",
            "Adam Morrison",
            "Christopher W. Fletcher",
            "Josep Torrella"
          ],
          "Title": "InvisiSpec: making speculative execution invisible in the cache hierarchy.",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "http://iacoma.cs.uiuc.edu/iacoma-papers/micro18.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1418",
          "Authors": [
            "Alejandro Cabrera Aldaya",
            "Billy Bob Brumley",
            "Sohaib ul Hassan",
            "Cesar Pereida Garc\u00eda",
            "Nicola Tuveri"
          ],
          "Title": "Port Contention for Fun and Profit",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://eprint.iacr.org/2018/1060.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1419",
          "Authors": [
            "Mohammad Behnia",
            "Prateek Sahu",
            "Riccardo Paccagnella",
            "Jiyong Yu",
            "Zirui Zhao",
            "Xiang Zou",
            "Thomas Unterluggauer",
            "Josep Torrellas",
            "Carlos Rozas",
            "Adam Morrison",
            "Frank Mckeen",
            "Fangfei Liu",
            "Ron Gabor",
            "Christopher W. Fletcher",
            "Abhishek Basak",
            "Alaa Alameldeen"
          ],
          "Title": "Speculative Interference Attacks: Breaking Invisible Speculation Schemes",
          "PublicationYear": "2021",
          "PublicationMonth": "04",
          "URL": "https://arxiv.org/abs/2007.11818",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1420",
          "Authors": [
            "Ross Mcilroy",
            "Jaroslav Sevcik",
            "Tobias Tebbi",
            "Ben L. Titzer",
            "Toon Verwaest"
          ],
          "Title": "Spectre is here to stay: An analysis of side-channels and speculative execution",
          "PublicationYear": "2019",
          "PublicationMonth": "02",
          "PublicationDay": "14",
          "URL": "https://arxiv.org/pdf/1902.05178.pdf",
          "URLDate": "2024-02-14"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities",
        "Comments": "If a weakness can potentially be exploited to infer data that is accessible inside or outside the current processor context, then the weakness could map to CWE-1421 and to another CWE such as CWE-1420.",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1422",
      "Name": "Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "A processor event or prediction may allow incorrect or stale data to\n\t\t  be forwarded to transient operations, potentially exposing data over a\n\t\t  covert channel.",
      "ExtendedDescription": "\n\nSoftware may use a variety of techniques to preserve the confidentiality of private data that is accessible within the current processor context. For example, the memory safety and type safety properties of some high-level programming languages help to prevent software written in those languages from exposing private data. As a second example, software sandboxes may co-locate multiple users' software within a single process. The processor's Instruction Set Architecture (ISA) may permit one user's software to access another user's data (because the software shares the same address space), but the sandbox prevents these accesses by using software techniques such as bounds checking.\n\n\nIf incorrect or stale data can be forwarded (for example, from a cache) to transient operations, then the operations' microarchitectural side effects may correspond to the data. If an attacker can trigger these transient operations and observe their side effects through a covert channel, then the attacker may be able to infer the data. For example, an attacker process may induce transient execution in a victim process that causes the victim to inadvertently access and then expose its private data via a covert channel. In the software sandbox example, an attacker sandbox may induce transient execution in its own code, allowing it to transiently access and expose data in a victim sandbox that shares the same address space.\n\n\nConsequently, weaknesses that arise from incorrect/stale data forwarding might violate users' expectations of software-based memory safety and isolation techniques. If the data forwarding behavior is not properly documented by the hardware vendor, this might violate the software vendor's expectation of how the hardware should behave.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "\n\nThis weakness can be introduced by data speculation techniques, or when the processor pipeline is designed to check exception conditions concurrently with other operations. This weakness can also persist after a CWE-1421 weakness has been mitigated. For example, suppose that a processor can forward stale data from a shared microarchitectural buffer to dependent transient operations, and furthermore suppose that the processor has been patched to flush the buffer on context switches. This mitigates the CWE-1421 weakness, but the stale-data forwarding behavior may persist as a CWE-1422 weakness unless this behavior is also patched.\n"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Automated Static Analysis",
          "Description": "\n\nA variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Automated static analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        },
        {
          "Method": "Manual Analysis",
          "Description": "\n\nThis weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state.Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods. \n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Manual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nSoftware vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors:\n\n\n$ cat /proc/cpuinfo | grep bugs | head -n 1\n\n\nbugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed\n",
          "Effectiveness": "High",
          "EffectivenessNotes": "This method can be useful for detecting whether a processor if affected by known weaknesses, but it may not be useful for detecting unknown weaknesses."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "Instructions or features that constrain transient execution or suppress its side effects may impact performance."
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\n",
          "Effectiveness": "Defense in Depth",
          "EffectivenessNotes": "Disabling specific predictors or other hardware features may result in significant performance overhead."
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nInstructions or features that constrain transient execution or suppress its side effects may impact performance.\n"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nDisabling specific predictors or other hardware features may result in significant performance overhead.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\n",
          "Effectiveness": "Incidental",
          "EffectivenessNotes": "\n\nSome transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIsolate sandboxes or managed runtimes in separate address spaces (separate processes).\n",
          "Effectiveness": "High",
          "EffectivenessNotes": "\n\nProcess isolation is also an effective strategy to mitigate many other kinds of weaknesses.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nInclude serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the mis-prediction from happening at all).\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nWhen used to comprehensively mitigate a transient execution weakness, serialization instructions can introduce significant performance overhead.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nAddress masking and related software mitigation techniques have been used to harden specific code sequences that could potentially be exploited via transient execution. For example, the Linux kernel makes limited use of this technique to mitigate bounds-check bypass [REF-1390].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique is only effective for software that is compiled with this mitigation.\n"
        },
        {
          "Phase": [
            "Documentation"
          ],
          "Description": "\n\nIf a hardware feature can allow incorrect or stale data to be forwarded to transient operations, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\n",
          "Effectiveness": "High"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Faulting loads in a victim domain may trigger incorrect transient forwarding, which leaves secret-dependent traces in the microarchitectural state. Consider this code sequence example from [REF-1391]."
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "void call_victim(size_t untrusted_arg) {\n\n```\n\t *arg_copy = untrusted_arg;\n\t array[**trusted_ptr * 4096];\n }\n```"
            },
            {
              "BodyText": "A processor with this weakness will store the value of untrusted_arg (which may be provided by an attacker) to the stack, which is trusted memory. Additionally, this store operation will save this value in some microarchitectural buffer, for example, the store buffer.\n\n\nIn this code sequence, trusted_ptr is dereferenced while the attacker forces a page fault. The faulting load causes the processor to mis-speculate by forwarding untrusted_arg as the (transient) load result. The processor then uses untrusted_arg for the pointer dereference. After the fault has been handled and the load has been re-issued with the correct argument, secret-dependent information stored at the address of trusted_ptr remains in microarchitectural state and can be extracted by an attacker using a vulnerable code sequence."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "Some processors try to predict when a store will forward data to a subsequent load, even when the address of the store or the load is not yet known. For example, on Intel processors this feature is called a Fast Store Forwarding Predictor [REF-1392], and on AMD processors the feature is called Predictive Store Forwarding [REF-1393]. A misprediction can cause incorrect or stale data to be forwarded from a store to a load, as illustrated in the following code snippet from [REF-1393]:"
            },
            {
              "Nature": "Bad",
              "Language": "C",
              "ExampleCode": "void fn(int idx) {\n\n```\n\t unsigned char v;\n\t idx_array[0] = 4096;\n\t v = array[idx_array[idx] * (idx)];\n }\n```"
            },
            {
              "BodyText": "In this example, assume that the parameter idx can only be 0 or 1, and assume that idx_array initially contains all 0s. Observe that the assignment to v in line 4 will be array[0], regardless of whether idx=0 or idx=1. Now suppose that an attacker repeatedly invokes fn with idx=0 to train the store forwarding predictor to predict that the store in line 3 will forward the data 4096 to the load idx_array[idx] in line 4. Then, when the attacker invokes fn with idx=1 the predictor may cause idx_array[idx] to transiently produce the incorrect value 4096, and therefore v will transiently be assigned the value array[4096], which otherwise would not have been accessible in line 4.\n\n\nAlthough this toy example is benign (it doesn't transmit array[4096] over a covert channel), an attacker may be able to use similar techniques to craft and train malicious code sequences to, for example, read data beyond a software sandbox boundary."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2020-0551",
          "Description": "A fault, microcode assist, or abort may allow transient load operations to forward malicious stale data to dependent operations executed by a victim, causing the victim to unintentionally access and potentially expose its own data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-0551"
        },
        {
          "Reference": "CVE-2020-8698",
          "Description": "A fast store forwarding predictor may allow store operations to forward incorrect data to transient load operations, potentially exposing data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8698"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1389",
          "Authors": [
            "Alyssa Milburn",
            "Ke Sun",
            "Henrique Kawakami"
          ],
          "Title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "08",
          "URL": "https://arxiv.org/abs/2203.04277",
          "URLDate": "2024-02-22"
        },
        {
          "ExternalReferenceID": "REF-1390",
          "Authors": [
            "The kernel development community"
          ],
          "Title": "Speculation",
          "PublicationYear": "2020",
          "PublicationMonth": "08",
          "PublicationDay": "16",
          "URL": "https://docs.kernel.org/6.6/staging/speculation.html",
          "URLDate": "2024-02-04"
        },
        {
          "ExternalReferenceID": "REF-1391",
          "Authors": [
            "Jo Van Bulck",
            "Daniel Moghimi",
            "Michael Schwarz",
            "Moritz Lipp",
            "Marina Minkin",
            "Daniel Genkin",
            "Yuval Yarom",
            "Berk Sunar",
            "Daniel Gruss",
            "Frank Piessens"
          ],
          "Title": "LVI : Hijacking Transient Execution through Microarchitectural Load Value Injection",
          "PublicationYear": "2020",
          "PublicationMonth": "01",
          "PublicationDay": "09",
          "URL": "https://lviattack.eu/lvi.pdf",
          "URLDate": "2024-02-04"
        },
        {
          "ExternalReferenceID": "REF-1392",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Fast Store Forwarding Predictor",
          "PublicationYear": "2022",
          "PublicationMonth": "02",
          "PublicationDay": "08",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/fast-store-forwarding-predictor.html",
          "URLDate": "2024-02-04"
        },
        {
          "ExternalReferenceID": "REF-1393",
          "Authors": [
            "AMD"
          ],
          "Title": "Security Analysis Of AMD Predictive Store Forwarding",
          "PublicationYear": "2021",
          "PublicationMonth": "03",
          "URL": "https://www.amd.com/system/files/documents/security-analysis-predictive-store-forwarding.pdf",
          "URLDate": "2024-02-04"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities",
        "Comments": "Use only when the weakness arises from forwarding of incorrect/stale data, and the data is not architecturally restricted (that is, the forwarded data is accessible within the current processor context). \n\nIf a weakness arises from forwarding of incorrect/stale data that is not accessible within the current processor context, then CWE-1421 may be more appropriate for the mapping task.\n",
        "Reasons": [
          "Acceptable-Use"
        ]
      }
    },
    {
      "ID": "1423",
      "Name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.\n\t\t\t",
      "ExtendedDescription": "\n\nMany commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components.\n\n\nWhen separate software components (for example, two processes) share microarchitectural predictor state across a hardware boundary, code in one component may be able to influence microarchitectural predictor behavior in another component. If the predictor can cause transient execution, the shared predictor state may allow an attacker to influence transient execution in a victim, and in a manner that could allow the attacker to infer private data from the victim by monitoring observable discrepancies (CWE-203) in a covert channel [REF-1400].\n\n\nPredictor state may be shared when the processor transitions from one component to another (for example, when a process makes a system call to enter the kernel). Many commodity processors have features which prevent microarchitectural predictions that occur before a boundary from influencing predictions that occur after the boundary.\n\n\nPredictor state may also be shared between hardware threads, for example, sibling hardware threads on a processor that supports simultaneous multithreading (SMT). This sharing may be benign if the hardware threads are simultaneously executing in the same software component, or it could expose a weakness if one sibling is a malicious software component, and the other sibling is a victim software component. Processors that share microarchitectural predictors between hardware threads may have features which prevent microarchitectural predictions that occur on one hardware thread from influencing predictions that occur on another hardware thread.\n\n\nFeatures that restrict predictor state sharing across transitions or between hardware threads may be always-on, on by default, or may require opt-in from software.\n",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1000",
          "Ordinal": "Primary"
        },
        {
          "Nature": "ChildOf",
          "CweID": "1420",
          "ViewID": "1194",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Operating_System",
          "Class": "Not OS-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Microcontroller Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Processor Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "Memory Hardware",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "System on Chip",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "\n\nThis weakness can be introduced during hardware architecture and design if predictor state is not properly isolated between modes (for example, user mode and kernel mode), if predictor state is not isolated between hardware threads, or if it is not isolated between other kinds of execution contexts supported by the processor.\n"
        },
        {
          "Phase": "Implementation",
          "Note": "\n\nThis weakness can be introduced during system software implementation if predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) are not invoked when switching from one context to another.\n"
        },
        {
          "Phase": "System Configuration",
          "Note": "\n\nThis weakness can be introduced if the system has not been configured according to the hardware vendor's recommendations for mitigating the weakness.\n"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Confidentiality"
          ],
          "Impact": [
            "Read Memory"
          ],
          "Likelihood": [
            "Medium"
          ]
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Manual Analysis",
          "Description": "\n\nThis weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may have microarchitectural predictor state that is shared between hardware threads, execution contexts (for example, user and kernel), or other components that may host mutually distrusting software (or firmware, etc.).\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Manual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nSoftware vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors:\n\n\n$ cat /proc/cpuinfo | grep bugs | head -n 1\n\n\nbugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed\n",
          "Effectiveness": "High",
          "EffectivenessNotes": "This method can be useful for detecting whether a processor if affected by known weaknesses, but it may not be useful for detecting unknown weaknesses"
        },
        {
          "Method": "Automated Analysis",
          "Description": "\n\nThis weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "Automated static or dynamic taint analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nHardware designers may choose to use microarchitectural bits to tag predictor entries. For example, each predictor entry may be tagged with a kernel-mode bit which, when set, indicates that the predictor entry was created in kernel mode. The processor can use this bit to enforce that predictions in the current mode must have been trained in the current mode. This can prevent malicious cross-mode training, such as when user-mode software attempts to create predictor entries that influence transient execution in the kernel. Predictor entry tags can also be used to associate each predictor entry with the SMT thread that created it, and thus the processor can enforce that each predictor entry can only be used by the SMT thread that created it. This can prevent an SMT thread from using predictor entries crafted by a malicious sibling SMT thread.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nTagging can be highly effective for predictor state that is comprised of discrete elements, such as an array of recently visited branch targets. Predictor state can also have different representations that are not conducive to tagging. For example, some processors keep a compressed digest of branch history which does not contain discrete elements that can be individually tagged.\n"
        },
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "\n\nHardware designers may choose to sanitize microarchitectural predictor state (for example, branch prediction history) when the processor transitions to a different context, for example, whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize predictor state according to the user's threat model. For example, this can allow operating system software to sanitize predictor state when performing a context switch from one process to another.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nThis technique may not be able to mitigate weaknesses that arise from predictor state that is shared across SMT threads. Sanitizing predictor state on context switches may also negatively impact performance, either by removing predictor entries that could be reused when returning to the previous context, or by slowing down the context switch itself.\n"
        },
        {
          "Phase": [
            "Implementation"
          ],
          "Description": "\n\nSystem software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nThis technique may not be able to mitigate weaknesses that arise from predictor state shared across SMT threads. Sanitizing predictor state may also negatively impact performance in some circumstances.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).\n",
          "Effectiveness": "Limited",
          "EffectivenessNotes": "\n\nThis technique is only effective for software that is compiled with this mitigation. Additionally, an alternate instruction sequence may mitigate the weakness on some processors but not others, even when the processors share the same ISA. For example, retpoline has been documented as effective on some x86 processors, but not fully effective on other x86 processors.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nSome CFI techniques may not be able to constrain transient execution, even though they are effective at constraining architectural execution. Or they may be able to provide some additional protection against a transient execution weakness, but without comprehensively mitigating the weakness. For example, Clang-CFI provides strong architectural CFI properties and can make some transient execution weaknesses more difficult to exploit [REF-1398].\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\n",
          "Effectiveness": "Incidental",
          "EffectivenessNotes": "\n\nSome transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].\n"
        },
        {
          "Phase": [
            "System Configuration"
          ],
          "Description": "\n\nSome systems may allow the user to disable predictor sharing. For example, this could be a BIOS configuration, or a model-specific register (MSR) that can be configured by the operating system or virtual machine monitor.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nDisabling predictor sharing can negatively impact performance for some workloads that benefit from shared predictor state.\n"
        },
        {
          "Phase": [
            "Patching and Maintenance"
          ],
          "Description": "\n\nThe hardware vendor may provide a patch to, for example, sanitize predictor state when the processor transitions to a different context, or to prevent predictor entries from being shared across SMT threads. A patch may also introduce new ISA that allows software to toggle a mitigation.\n",
          "Effectiveness": "Moderate",
          "EffectivenessNotes": "\n\nThis mitigation may only be fully effective if the patch prevents predictor sharing across all contexts that are affected by the weakness. Additionally, sanitizing predictor state and/or preventing shared predictor state can negatively impact performance in some circumstances.\n"
        },
        {
          "Phase": [
            "Documentation"
          ],
          "Description": "\n\nIf a hardware feature can allow microarchitectural predictor state to be shared between contexts, SMT threads, or other architecturally defined boundaries, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\n",
          "Effectiveness": "High"
        },
        {
          "Phase": [
            "Requirements"
          ],
          "Description": "\n\nProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\n"
        }
      ],
      "DemonstrativeExamples": [
        {
          "Entries": [
            {
              "IntroText": "Branch Target Injection (BTI) is a vulnerability that can allow an SMT hardware thread to maliciously train the indirect branch predictor state that is shared with its sibling hardware thread. A cross-thread BTI attack requires the attacker to find a vulnerable code sequence within the victim software. For example, the authors of [REF-1415] identified the following code sequence in the Windows library ntdll.dll:"
            },
            {
              "Nature": "Bad",
              "Language": "x86 Assembly",
              "ExampleCode": "```\n\t adc edi,dword ptr [ebx+edx+13BE13BDh]\n\t adc dl,byte ptr [edi]\n\t ...\n indirect_branch_site:\n\t jmp dword ptr [rsi] # at this point attacker knows edx, controls edi and ebx\n```"
            },
            {
              "BodyText": "To successfully exploit this code sequence to disclose the victim's private data, the attacker must also be able to find an indirect branch site within the victim, where the attacker controls the values in edi and ebx, and the attacker knows the value in edx as shown above at the indirect branch site.\n\n\nA proof-of-concept cross-thread BTI attack might proceed as follows:\n\n\n  1. The attacker thread and victim thread must be co-scheduled on the same physical processor core. \n\n  1. The attacker thread must train the shared branch predictor so that when the victim thread reaches indirect_branch_site, the jmp instruction will be predicted to target example_code_sequence instead of the correct architectural target. The training procedure may vary by processor, and the attacker may need to reverse-engineer the branch predictor to identify a suitable training algorithm. \n\n  1. This step assumes that the attacker can control some values in the victim program, specifically the values in edi and ebx at indirect_branch_site. When the victim reaches indirect_branch_site the processor will (mis)predict example_code_sequence as the target and (transiently) execute the adc instructions. If the attacker chooses ebx so that `ebx = m \n   -  0x13BE13BD - edx, then the first adc will load 32 bits from address m in the victim's address space and add *m (the data loaded from) to the attacker-controlled base address in edi. The second adc instruction accesses a location in memory whose address corresponds to *m`. \n\n\n\n  1. The adversary uses a covert channel analysis technique such as Flush+Reload ([REF-1416]) to infer the value of the victim's private data *m."
            }
          ]
        },
        {
          "Entries": [
            {
              "IntroText": "BTI can also allow software in one execution context to maliciously train branch predictor entries that can be used in another context. For example, on some processors user-mode software may be able to train predictor entries that can also be used after transitioning into kernel mode, such as after invoking a system call. This vulnerability does not necessarily require SMT and may instead be performed in synchronous steps, though it does require the attacker to find an exploitable code sequence in the victim's code, for example, in the kernel."
            }
          ]
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2017-5754",
          "Description": "(Branch Target Injection, BTI, Spectre v2). Shared microarchitectural indirect branch predictor state may allow code to influence transient execution across a process, VM, or privilege boundary, potentially exposing data that is accessible beyond the boundary.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5754"
        },
        {
          "Reference": "CVE-2022-0001",
          "Description": "(Branch History Injection, BHI, Spectre-BHB). Shared branch history state may allow user-mode code to influence transient execution in the kernel, potentially exposing kernel data over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0001"
        },
        {
          "Reference": "CVE-2021-33149",
          "Description": "(RSB underflow, Retbleed). Shared return stack buffer state may allow code that executes before a prediction barrier to influence transient execution after the prediction barrier, potentially exposing data that is accessible beyond the barrier over a covert channel.",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33149"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1414",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Retpoline: A Branch Target Injection Mitigation",
          "PublicationYear": "2022",
          "PublicationMonth": "08",
          "PublicationDay": "22",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/retpoline-branch-target-injection-mitigation.html",
          "URLDate": "2023-02-13"
        },
        {
          "ExternalReferenceID": "REF-1415",
          "Authors": [
            "Paul Kocher",
            "Jann Horn",
            "Anders Fogh",
            "Daniel Genkin",
            "Daniel Gruss",
            "Werner Haas",
            "Mike Hamburg",
            "Moritz Lipp",
            "Stefan Mangard",
            "Thomas Prescher",
            "Michael Schwarz",
            "Yuval Yarom"
          ],
          "Title": "Spectre Attacks: Exploiting Speculative Execution",
          "PublicationYear": "2019",
          "PublicationMonth": "05",
          "URL": "https://spectreattack.com/spectre.pdf",
          "URLDate": "2024-02-14"
        },
        {
          "ExternalReferenceID": "REF-1416",
          "Authors": [
            "Yuval Yarom",
            "Katrina Falkner"
          ],
          "Title": "Flush+Reload: A High Resolution, Low Noise, L3 Cache Side-Channel Attack",
          "PublicationYear": "2014",
          "URL": "https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-yarom.pdf",
          "URLDate": "2023-02-13"
        },
        {
          "ExternalReferenceID": "REF-1398",
          "Authors": [
            "The Clang Team"
          ],
          "Title": "Control Flow Integrity",
          "URL": "https://clang.llvm.org/docs/ControlFlowIntegrity.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1389",
          "Authors": [
            "Alyssa Milburn",
            "Ke Sun",
            "Henrique Kawakami"
          ],
          "Title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "08",
          "URL": "https://arxiv.org/abs/2203.04277",
          "URLDate": "2024-02-22"
        },
        {
          "ExternalReferenceID": "REF-1400",
          "Authors": [
            "Intel Corporation"
          ],
          "Title": "Refined Speculative Execution Terminology",
          "PublicationYear": "2022",
          "PublicationMonth": "03",
          "PublicationDay": "11",
          "URL": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html",
          "URLDate": "2024-02-13"
        },
        {
          "ExternalReferenceID": "REF-1401",
          "Authors": [
            "Neta Bar Kama",
            "Roope Kaivola"
          ],
          "Title": "Hardware Security Leak Detection by Symbolic Simulation",
          "PublicationYear": "2021",
          "PublicationMonth": "11",
          "URL": "https://ieeexplore.ieee.org/document/9617727",
          "URLDate": "2024-02-13"
        }
      ],
      "MappingNotes": {
        "Usage": "Allowed",
        "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities",
        "Comments": "Use only when the weakness allows code in one processor context to influence the predictions of code in another processor context via predictor state that is shared between the two contexts. For example, Branch Target Injection, an instance of CWE-1423, can be mitigated by tagging each indirect branch predictor entry according to the processor context in which the entry was created, thus preventing entries created in one context from being used in a different context. However, the mitigated indirect branch predictor can still expose different weaknesses where malicious predictor entries created in one context are used later in the same context (context tags cannot prevent this). One such example is Intra-mode Branch Target Injection. Weaknesses of this sort can map to CWE-1420.",
        "Reasons": [
          "Acceptable-Use"
        ],
        "Suggestions": [
          {
            "CweID": "1420",
            "Comment": "If a weakness involves a microarchitectural predictor whose state is not shared across processor contexts, then CWE-1420 may be more appropriate for the mapping task."
          }
        ]
      }
    },
    {
      "ID": "1426",
      "Name": "Improper Validation of Generative AI Output",
      "Abstraction": "Base",
      "Structure": "Simple",
      "Status": "Incomplete",
      "Description": "The product invokes a generative AI/ML\n\t\t\tcomponent whose behaviors and outputs cannot be directly\n\t\t\tcontrolled, but the product does not validate or\n\t\t\tinsufficiently validates the outputs to ensure that they\n\t\t\talign with the intended security, content, or privacy\n\t\t\tpolicy.",
      "RelatedWeaknesses": [
        {
          "Nature": "ChildOf",
          "CweID": "707",
          "ViewID": "1000",
          "Ordinal": "Primary"
        }
      ],
      "ApplicablePlatforms": [
        {
          "Type": "Language",
          "Class": "Not Language-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Architecture",
          "Class": "Not Architecture-Specific",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Name": "AI/ML",
          "Prevalence": "Undetermined"
        },
        {
          "Type": "Technology",
          "Class": "Not Technology-Specific",
          "Prevalence": "Undetermined"
        }
      ],
      "ModesOfIntroduction": [
        {
          "Phase": "Architecture and Design",
          "Note": "\n\nDevelopers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.\n"
        },
        {
          "Phase": "Implementation",
          "Note": "\n\nDevelopers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.\n"
        }
      ],
      "CommonConsequences": [
        {
          "Scope": [
            "Integrity"
          ],
          "Impact": [
            "Execute Unauthorized Code or Commands",
            "Varies by Context"
          ],
          "Note": "\n\nIn an agent-oriented setting, output could be used to cause unpredictable agent invocation, i.e., to control or influence agents that might be invoked from the output. The impact varies depending on the access that is granted to the tools, such as creating a database or writing files.\n"
        }
      ],
      "DetectionMethods": [
        {
          "Method": "Dynamic Analysis with Manual Results Interpretation",
          "Description": "Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system."
        },
        {
          "Method": "Dynamic Analysis with Automated Results Interpretation",
          "Description": "Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system."
        },
        {
          "Method": "Architecture or Design Review",
          "Description": "Review of the product design can be effective, but it works best in conjunction with dynamic analysis."
        }
      ],
      "PotentialMitigations": [
        {
          "Phase": [
            "Architecture and Design"
          ],
          "Description": "Since the output from a generative AI component (such as an LLM) cannot be trusted, ensure that it operates in an untrusted or non-privileged space."
        },
        {
          "Phase": [
            "Operation"
          ],
          "Description": "Use \"semantic comparators,\" which are mechanisms that provide semantic comparison to identify objects that might appear different but are semantically similar."
        },
        {
          "Phase": [
            "Operation"
          ],
          "Description": "\n\nUse components that operate externally to the system to monitor the output and act as a moderator. These components are called different terms, such as supervisors or guardrails.\n"
        },
        {
          "Phase": [
            "Build and Compilation"
          ],
          "Description": "\n\nDuring model training, use an appropriate variety of good and bad examples to guide preferred outputs.\n"
        }
      ],
      "ObservedExamples": [
        {
          "Reference": "CVE-2024-3402",
          "Description": "chain: GUI for ChatGPT API performs input validation but does not properly \"sanitize\" or validate model output data (CWE-1426), leading to XSS (CWE-79).",
          "Link": "https://www.cve.org/CVERecord?id=CVE-2024-3402"
        }
      ],
      "References": [
        {
          "ExternalReferenceID": "REF-1441",
          "Authors": [
            "OWASP"
          ],
          "Title": "LLM02: Insecure Output Handling",
          "PublicationYear": "2024",
          "PublicationMonth": "03",
          "PublicationDay": "21",
          "URL": "https://genai.owasp.org/llmrisk/llm02-insecure-output-handling/",
          "URLDate": "2024-07-11"
        },
        {
          "ExternalReferenceID": "REF-1442",
          "Authors": [
            "Cohere",
            "Guardrails AI"
          ],
          "Title": "Validating Outputs",
          "PublicationYear": "2023",
          "PublicationMonth": "09",
          "PublicationDay": "13",
          "URL": "https://cohere.com/blog/validating-llm-outputs",
          "URLDate": "2024-07-11"
        },
        {
          "ExternalReferenceID": "REF-1443",
          "Authors": [
            "Traian Rebedea",
            "Razvan Dinu",
            "Makesh Sreedhar",
            "Christopher Parisien",
            "Jonathan Cohen"
          ],
          "Title": "NeMo Guardrails: A Toolkit for Controllable and Safe LLM Applications with Programmable Rails",
          "PublicationYear": "2023",
          "PublicationMonth": "12",
          "URL": "https://aclanthology.org/2023.emnlp-demo.40/",
          "URLDate": "2024-07-11"
        },
        {
          "ExternalReferenceID": "REF-1444",
          "Authors": [
            "Snyk"
          ],
          "Title": "Insecure output handling in LLMs",
          "URL": "https://learn.snyk.io/lesson/insecure-input-handling/",
          "URLDate": "2024-07-11"
        },
        {
          "ExternalReferenceID": "REF-1445",
          "Authors": [
            "Yi Dong",
            "Ronghui Mu",
            "Gaojie Jin",
            "Yi Qi",
            "Jinwei Hu",
            "Xingyu Zhao",
            "Jie Meng",
            "Wenjie Ruan",
            "Xiaowei Huang"
          ],
          "Title": "Building Guardrails for Large Language Models",
          "PublicationYear": "2024",
          "PublicationMonth": "05",
          "PublicationDay": "29",
          "URL": "https://arxiv.org/pdf/2402.01822",
          "URLDate": "2024-07-11"
        }
      ],
      "MappingNotes": {
        "Usage": "Discouraged",
        "Rationale": "There is potential for this CWE entry to be modified in the future for further clarification as the research community continues to better understand weaknesses in this domain.",
        "Comments": "\n\nThis CWE entry is only related to \"validation\" of output and might be used mistakenly for other kinds of output-related weaknesses. Careful attention should be paid to whether this CWE should be used for vulnerabilities related to \"prompt injection,\" which is an attack that works against many different weaknesses. See Maintenance Notes and Research Gaps. Analysts should closely investigate the root cause to ensure it is not ultimately due to other well-known weaknesses. The following suggestions are not comprehensive.\n",
        "Reasons": [
          "Potential Major Changes",
          "Frequent Misinterpretation"
        ],
        "Suggestions": [
          {
            "CweID": "77",
            "Comment": "Command Injection. Use this CWE for most cases of 'prompt injection' attacks in which additional prompts are added to input to, or output from, the model. If OS command injection, consider CWE-78."
          },
          {
            "CweID": "94",
            "Comment": "Code Injection. Use this CWE for cases in which output from genAI components is directly fed into components that parse and execute code."
          },
          {
            "CweID": "116",
            "Comment": "Improper Encoding or Escaping of Output. Use this CWE when the product is expected to encode or escape genAI outputs."
          }
        ]
      },
      "Notes": [
        {
          "Type": "Research Gap",
          "Note": "This entry is related to AI/ML, which is not well understood from a weakness perspective. Typically, for new/emerging technologies including AI/ML, early vulnerability discovery and research does not focus on root cause analysis (i.e., weakness identification). For AI/ML, the recent focus has been on attacks and exploitation methods, technical impacts, and mitigations. As a result, closer research or focused efforts by SMEs is necessary to understand the underlying weaknesses. Diverse and dynamic terminology and rapidly-evolving technology further complicate understanding. Finally, there might not be enough real-world examples with sufficient details from which weakness patterns may be discovered. For example, many real-world vulnerabilities related to \"prompt injection\" appear to be related to typical injection-style attacks in which the only difference is that the \"input\" to the vulnerable component comes from model output instead of direct adversary input, similar to \"second-order SQL injection\" attacks."
        },
        {
          "Type": "Maintenance",
          "Note": "This entry was created by members of the CWE AI Working Group during June and July 2024. The CWE Project Lead, CWE Technical Lead, AI WG co-chairs, and many WG members decided that for purposes of timeliness, it would be more helpful to the CWE community to publish the new entry in CWE 4.15 quickly and add to it in subsequent versions."
        }
      ]
    }
  ]
}